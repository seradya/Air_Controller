
AirController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000117c  08006fe0  08006fe0  00016fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800815c  0800815c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800815c  0800815c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800815c  0800815c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800815c  0800815c  0001815c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008160  08008160  00018160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  200001ec  08008350  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  08008350  0002078c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d318  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029fa  00000000  00000000  0002d52d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  0002ff28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  00030dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6bd  00000000  00000000  00031ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ed9  00000000  00000000  0004c195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c5f6  00000000  00000000  0005e06e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea664  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bdc  00000000  00000000  000ea6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08006fc8 	.word	0x08006fc8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08006fc8 	.word	0x08006fc8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <DelayMicro>:

//------------------------------------------------

__STATIC_INLINE void DelayMicro(__IO uint32_t micros)

{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  micros *= (SystemCoreClock / 1000000) / 6;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <DelayMicro+0x34>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <DelayMicro+0x38>)
 8000b36:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3a:	0cdb      	lsrs	r3, r3, #19
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	fb02 f303 	mul.w	r3, r2, r3
 8000b42:	607b      	str	r3, [r7, #4]

  /* Wait till done */

  while (micros--) ;
 8000b44:	bf00      	nop
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	1e5a      	subs	r2, r3, #1
 8000b4a:	607a      	str	r2, [r7, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1fa      	bne.n	8000b46 <DelayMicro+0x1e>

}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	20000010 	.word	0x20000010
 8000b60:	165e9f81 	.word	0x165e9f81

08000b64 <NRF24_ReadReg>:

//--------------------------------------------------

uint8_t NRF24_ReadReg(uint8_t addr)

{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]

  uint8_t dt=0, cmd;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	73fb      	strb	r3, [r7, #15]

  CS_ON;
 8000b72:	2200      	movs	r2, #0
 8000b74:	2110      	movs	r1, #16
 8000b76:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <NRF24_ReadReg+0x60>)
 8000b78:	f001 ff80 	bl	8002a7c <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 8000b7c:	f107 020f 	add.w	r2, r7, #15
 8000b80:	1df9      	adds	r1, r7, #7
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	480f      	ldr	r0, [pc, #60]	; (8000bc8 <NRF24_ReadReg+0x64>)
 8000b8c:	f002 fe61 	bl	8003852 <HAL_SPI_TransmitReceive>

  if (addr!=STATUS)//если адрес равен адрес регистра статус то и возварщаем его состояние
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	d00c      	beq.n	8000bb0 <NRF24_ReadReg+0x4c>

  {

    cmd=0xFF;
 8000b96:	23ff      	movs	r3, #255	; 0xff
 8000b98:	73bb      	strb	r3, [r7, #14]

    HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 8000b9a:	f107 020f 	add.w	r2, r7, #15
 8000b9e:	f107 010e 	add.w	r1, r7, #14
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	2301      	movs	r3, #1
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <NRF24_ReadReg+0x64>)
 8000bac:	f002 fe51 	bl	8003852 <HAL_SPI_TransmitReceive>

  }

  CS_OFF;
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <NRF24_ReadReg+0x60>)
 8000bb6:	f001 ff61 	bl	8002a7c <HAL_GPIO_WritePin>

  return dt;
 8000bba:	7bfb      	ldrb	r3, [r7, #15]

}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40010800 	.word	0x40010800
 8000bc8:	20000230 	.word	0x20000230

08000bcc <NRF24_WriteReg>:

//------------------------------------------------

void NRF24_WriteReg(uint8_t addr, uint8_t dt)

{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71bb      	strb	r3, [r7, #6]

  addr |= W_REGISTER;//включим бит записи в адрес
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f043 0320 	orr.w	r3, r3, #32
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	71fb      	strb	r3, [r7, #7]

  CS_ON;
 8000be6:	2200      	movs	r2, #0
 8000be8:	2110      	movs	r1, #16
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <NRF24_WriteReg+0x54>)
 8000bec:	f001 ff46 	bl	8002a7c <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1,&addr,1,1000);//отправим адрес в шину
 8000bf0:	1df9      	adds	r1, r7, #7
 8000bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	480a      	ldr	r0, [pc, #40]	; (8000c24 <NRF24_WriteReg+0x58>)
 8000bfa:	f002 fbdd 	bl	80033b8 <HAL_SPI_Transmit>

  HAL_SPI_Transmit(&hspi1,&dt,1,1000);//отправим данные в шину
 8000bfe:	1db9      	adds	r1, r7, #6
 8000c00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c04:	2201      	movs	r2, #1
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <NRF24_WriteReg+0x58>)
 8000c08:	f002 fbd6 	bl	80033b8 <HAL_SPI_Transmit>

  CS_OFF;
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2110      	movs	r1, #16
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <NRF24_WriteReg+0x54>)
 8000c12:	f001 ff33 	bl	8002a7c <HAL_GPIO_WritePin>

}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40010800 	.word	0x40010800
 8000c24:	20000230 	.word	0x20000230

08000c28 <NRF24_ToggleFeatures>:

//------------------------------------------------

void NRF24_ToggleFeatures(void)

{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0

  uint8_t dt[1] = {ACTIVATE};
 8000c2e:	2350      	movs	r3, #80	; 0x50
 8000c30:	713b      	strb	r3, [r7, #4]

  CS_ON;
 8000c32:	2200      	movs	r2, #0
 8000c34:	2110      	movs	r1, #16
 8000c36:	480f      	ldr	r0, [pc, #60]	; (8000c74 <NRF24_ToggleFeatures+0x4c>)
 8000c38:	f001 ff20 	bl	8002a7c <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000c3c:	1d39      	adds	r1, r7, #4
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	2201      	movs	r2, #1
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <NRF24_ToggleFeatures+0x50>)
 8000c46:	f002 fbb7 	bl	80033b8 <HAL_SPI_Transmit>

  DelayMicro(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff ff6c 	bl	8000b28 <DelayMicro>

  dt[0] = 0x73;
 8000c50:	2373      	movs	r3, #115	; 0x73
 8000c52:	713b      	strb	r3, [r7, #4]

  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000c54:	1d39      	adds	r1, r7, #4
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4806      	ldr	r0, [pc, #24]	; (8000c78 <NRF24_ToggleFeatures+0x50>)
 8000c5e:	f002 fbab 	bl	80033b8 <HAL_SPI_Transmit>

  CS_OFF;
 8000c62:	2201      	movs	r2, #1
 8000c64:	2110      	movs	r1, #16
 8000c66:	4803      	ldr	r0, [pc, #12]	; (8000c74 <NRF24_ToggleFeatures+0x4c>)
 8000c68:	f001 ff08 	bl	8002a7c <HAL_GPIO_WritePin>

}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40010800 	.word	0x40010800
 8000c78:	20000230 	.word	0x20000230

08000c7c <NRF24_Read_Buf>:

//-----------------------------------------------

void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)

{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	71bb      	strb	r3, [r7, #6]

  CS_ON;
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2110      	movs	r1, #16
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <NRF24_Read_Buf+0x4c>)
 8000c92:	f001 fef3 	bl	8002a7c <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1,&addr,1,1000);//отправим адрес в шину
 8000c96:	1df9      	adds	r1, r7, #7
 8000c98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	480b      	ldr	r0, [pc, #44]	; (8000ccc <NRF24_Read_Buf+0x50>)
 8000ca0:	f002 fb8a 	bl	80033b8 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);//отправим данные в буфер
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cac:	6839      	ldr	r1, [r7, #0]
 8000cae:	4807      	ldr	r0, [pc, #28]	; (8000ccc <NRF24_Read_Buf+0x50>)
 8000cb0:	f002 fcbe 	bl	8003630 <HAL_SPI_Receive>

  CS_OFF;
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <NRF24_Read_Buf+0x4c>)
 8000cba:	f001 fedf 	bl	8002a7c <HAL_GPIO_WritePin>

}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40010800 	.word	0x40010800
 8000ccc:	20000230 	.word	0x20000230

08000cd0 <NRF24_Write_Buf>:

//------------------------------------------------

void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)

{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	71bb      	strb	r3, [r7, #6]

  addr |= W_REGISTER;//включим бит записи в адрес
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f043 0320 	orr.w	r3, r3, #32
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	71fb      	strb	r3, [r7, #7]

  CS_ON;
 8000cea:	2200      	movs	r2, #0
 8000cec:	2110      	movs	r1, #16
 8000cee:	480f      	ldr	r0, [pc, #60]	; (8000d2c <NRF24_Write_Buf+0x5c>)
 8000cf0:	f001 fec4 	bl	8002a7c <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1,&addr,1,1000);//отправим адрес в шину
 8000cf4:	1df9      	adds	r1, r7, #7
 8000cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <NRF24_Write_Buf+0x60>)
 8000cfe:	f002 fb5b 	bl	80033b8 <HAL_SPI_Transmit>

  DelayMicro(1);
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff ff10 	bl	8000b28 <DelayMicro>

  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);//отправим данные в буфер
 8000d08:	79bb      	ldrb	r3, [r7, #6]
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d10:	6839      	ldr	r1, [r7, #0]
 8000d12:	4807      	ldr	r0, [pc, #28]	; (8000d30 <NRF24_Write_Buf+0x60>)
 8000d14:	f002 fb50 	bl	80033b8 <HAL_SPI_Transmit>

  CS_OFF;
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <NRF24_Write_Buf+0x5c>)
 8000d1e:	f001 fead 	bl	8002a7c <HAL_GPIO_WritePin>

}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40010800 	.word	0x40010800
 8000d30:	20000230 	.word	0x20000230

08000d34 <NRF24_FlushRX>:

//------------------------------------------------

void NRF24_FlushRX(void)

{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0

  uint8_t dt[1] = {FLUSH_RX};
 8000d3a:	23e2      	movs	r3, #226	; 0xe2
 8000d3c:	713b      	strb	r3, [r7, #4]

  CS_ON;
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2110      	movs	r1, #16
 8000d42:	480b      	ldr	r0, [pc, #44]	; (8000d70 <NRF24_FlushRX+0x3c>)
 8000d44:	f001 fe9a 	bl	8002a7c <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000d48:	1d39      	adds	r1, r7, #4
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4808      	ldr	r0, [pc, #32]	; (8000d74 <NRF24_FlushRX+0x40>)
 8000d52:	f002 fb31 	bl	80033b8 <HAL_SPI_Transmit>

  DelayMicro(1);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f7ff fee6 	bl	8000b28 <DelayMicro>

  CS_OFF;
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2110      	movs	r1, #16
 8000d60:	4803      	ldr	r0, [pc, #12]	; (8000d70 <NRF24_FlushRX+0x3c>)
 8000d62:	f001 fe8b 	bl	8002a7c <HAL_GPIO_WritePin>

}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40010800 	.word	0x40010800
 8000d74:	20000230 	.word	0x20000230

08000d78 <NRF24_FlushTX>:

//------------------------------------------------

void NRF24_FlushTX(void)

{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0

  uint8_t dt[1] = {FLUSH_TX};
 8000d7e:	23e1      	movs	r3, #225	; 0xe1
 8000d80:	713b      	strb	r3, [r7, #4]

  CS_ON;
 8000d82:	2200      	movs	r2, #0
 8000d84:	2110      	movs	r1, #16
 8000d86:	480b      	ldr	r0, [pc, #44]	; (8000db4 <NRF24_FlushTX+0x3c>)
 8000d88:	f001 fe78 	bl	8002a7c <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000d8c:	1d39      	adds	r1, r7, #4
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	2201      	movs	r2, #1
 8000d94:	4808      	ldr	r0, [pc, #32]	; (8000db8 <NRF24_FlushTX+0x40>)
 8000d96:	f002 fb0f 	bl	80033b8 <HAL_SPI_Transmit>

  DelayMicro(1);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f7ff fec4 	bl	8000b28 <DelayMicro>

  CS_OFF;
 8000da0:	2201      	movs	r2, #1
 8000da2:	2110      	movs	r1, #16
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <NRF24_FlushTX+0x3c>)
 8000da6:	f001 fe69 	bl	8002a7c <HAL_GPIO_WritePin>

}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40010800 	.word	0x40010800
 8000db8:	20000230 	.word	0x20000230

08000dbc <NRF24L01_RX_Mode>:

//------------------------------------------------

void NRF24L01_RX_Mode(void)

{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0

  uint8_t regval=0x00;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	71fb      	strb	r3, [r7, #7]

  regval = NRF24_ReadReg(CONFIG);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f7ff fecc 	bl	8000b64 <NRF24_ReadReg>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	71fb      	strb	r3, [r7, #7]

  //разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX

  regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f043 0303 	orr.w	r3, r3, #3
 8000dd6:	71fb      	strb	r3, [r7, #7]

  NRF24_WriteReg(CONFIG,regval);
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f7ff fef5 	bl	8000bcc <NRF24_WriteReg>

  CE_SET;
 8000de2:	2201      	movs	r2, #1
 8000de4:	2108      	movs	r1, #8
 8000de6:	4807      	ldr	r0, [pc, #28]	; (8000e04 <NRF24L01_RX_Mode+0x48>)
 8000de8:	f001 fe48 	bl	8002a7c <HAL_GPIO_WritePin>

  DelayMicro(150); //Задержка минимум 130 мкс
 8000dec:	2096      	movs	r0, #150	; 0x96
 8000dee:	f7ff fe9b 	bl	8000b28 <DelayMicro>

  // Flush buffers

  NRF24_FlushRX();
 8000df2:	f7ff ff9f 	bl	8000d34 <NRF24_FlushRX>

  NRF24_FlushTX();
 8000df6:	f7ff ffbf 	bl	8000d78 <NRF24_FlushTX>

}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40010800 	.word	0x40010800

08000e08 <NRF24L01_TX_Mode>:
//------------------------------------------------

void NRF24L01_TX_Mode(uint8_t *pBuf)

{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

  NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 8000e10:	2203      	movs	r2, #3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <NRF24L01_TX_Mode+0x2c>)
 8000e14:	2010      	movs	r0, #16
 8000e16:	f7ff ff5b 	bl	8000cd0 <NRF24_Write_Buf>

  CE_RESET;
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2108      	movs	r1, #8
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <NRF24L01_TX_Mode+0x30>)
 8000e20:	f001 fe2c 	bl	8002a7c <HAL_GPIO_WritePin>

  // Flush buffers

  NRF24_FlushRX();
 8000e24:	f7ff ff86 	bl	8000d34 <NRF24_FlushRX>

  NRF24_FlushTX();
 8000e28:	f7ff ffa6 	bl	8000d78 <NRF24_FlushTX>

}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000000 	.word	0x20000000
 8000e38:	40010800 	.word	0x40010800

08000e3c <NRF24_Transmit>:

//------------------------------------------------

void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)

{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	71bb      	strb	r3, [r7, #6]

  CE_RESET;
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2108      	movs	r1, #8
 8000e50:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <NRF24_Transmit+0x64>)
 8000e52:	f001 fe13 	bl	8002a7c <HAL_GPIO_WritePin>

  CS_ON;
 8000e56:	2200      	movs	r2, #0
 8000e58:	2110      	movs	r1, #16
 8000e5a:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <NRF24_Transmit+0x64>)
 8000e5c:	f001 fe0e 	bl	8002a7c <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1,&addr,1,1000);//отправим адрес в шину
 8000e60:	1df9      	adds	r1, r7, #7
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	2201      	movs	r2, #1
 8000e68:	480e      	ldr	r0, [pc, #56]	; (8000ea4 <NRF24_Transmit+0x68>)
 8000e6a:	f002 faa5 	bl	80033b8 <HAL_SPI_Transmit>

  DelayMicro(1);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f7ff fe5a 	bl	8000b28 <DelayMicro>

  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);//отправим данные в буфер
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7c:	6839      	ldr	r1, [r7, #0]
 8000e7e:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <NRF24_Transmit+0x68>)
 8000e80:	f002 fa9a 	bl	80033b8 <HAL_SPI_Transmit>

  CS_OFF;
 8000e84:	2201      	movs	r2, #1
 8000e86:	2110      	movs	r1, #16
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <NRF24_Transmit+0x64>)
 8000e8a:	f001 fdf7 	bl	8002a7c <HAL_GPIO_WritePin>

  CE_SET;
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2108      	movs	r1, #8
 8000e92:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <NRF24_Transmit+0x64>)
 8000e94:	f001 fdf2 	bl	8002a7c <HAL_GPIO_WritePin>

}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40010800 	.word	0x40010800
 8000ea4:	20000230 	.word	0x20000230

08000ea8 <NRF24L01_Send>:

//------------------------------------------------

void NRF24L01_Send(uint8_t *pBuf)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	uint8_t status=0x00, regval=0x00;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73bb      	strb	r3, [r7, #14]
	NRF24L01_TX_Mode(pBuf);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ffa5 	bl	8000e08 <NRF24L01_TX_Mode>
	regval = NRF24_ReadReg(CONFIG);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f7ff fe50 	bl	8000b64 <NRF24_ReadReg>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	73bb      	strb	r3, [r7, #14]

	//если модуль ушел в спящий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);
 8000ec8:	7bbb      	ldrb	r3, [r7, #14]
 8000eca:	f043 0302 	orr.w	r3, r3, #2
 8000ece:	73bb      	strb	r3, [r7, #14]
	regval &= ~(1<<PRIM_RX);
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	f023 0301 	bic.w	r3, r3, #1
 8000ed6:	73bb      	strb	r3, [r7, #14]
	NRF24_WriteReg(CONFIG,regval);
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	4619      	mov	r1, r3
 8000edc:	2000      	movs	r0, #0
 8000ede:	f7ff fe75 	bl	8000bcc <NRF24_WriteReg>
	DelayMicro(150); //Задержка минимум 130 мкс
 8000ee2:	2096      	movs	r0, #150	; 0x96
 8000ee4:	f7ff fe20 	bl	8000b28 <DelayMicro>

	//Отправим данные в воздух
	NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);
 8000ee8:	2205      	movs	r2, #5
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	20a0      	movs	r0, #160	; 0xa0
 8000eee:	f7ff ffa5 	bl	8000e3c <NRF24_Transmit>
	CE_SET;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2108      	movs	r1, #8
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <NRF24L01_Send+0x6c>)
 8000ef8:	f001 fdc0 	bl	8002a7c <HAL_GPIO_WritePin>
	DelayMicro(15); //minimum 10us high pulse (Page 21)
 8000efc:	200f      	movs	r0, #15
 8000efe:	f7ff fe13 	bl	8000b28 <DelayMicro>
	CE_RESET;
 8000f02:	2200      	movs	r2, #0
 8000f04:	2108      	movs	r1, #8
 8000f06:	4803      	ldr	r0, [pc, #12]	; (8000f14 <NRF24L01_Send+0x6c>)
 8000f08:	f001 fdb8 	bl	8002a7c <HAL_GPIO_WritePin>
}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40010800 	.word	0x40010800

08000f18 <NRF24L01_Receive>:
*/
//------------------------------------------------

void NRF24L01_Receive(void)

{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  //uint8_t status=0x0;

  //status = NRF24_ReadReg(STATUS);
  NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 8000f1c:	2205      	movs	r2, #5
 8000f1e:	490e      	ldr	r1, [pc, #56]	; (8000f58 <NRF24L01_Receive+0x40>)
 8000f20:	2061      	movs	r0, #97	; 0x61
 8000f22:	f7ff feab 	bl	8000c7c <NRF24_Read_Buf>
    //if(status & 0x2){
    	pressure[1] = ((uint32_t)(RX_BUF[2]<<16))+((uint32_t)(RX_BUF[1]<<8))+((uint32_t)(RX_BUF[0]));
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <NRF24L01_Receive+0x40>)
 8000f28:	789b      	ldrb	r3, [r3, #2]
 8000f2a:	041b      	lsls	r3, r3, #16
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <NRF24L01_Receive+0x40>)
 8000f30:	785b      	ldrb	r3, [r3, #1]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	4413      	add	r3, r2
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <NRF24L01_Receive+0x40>)
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <NRF24L01_Receive+0x44>)
 8000f3e:	6053      	str	r3, [r2, #4]
    	pressure[2] = (uint32_t)(RX_BUF[3]);
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <NRF24L01_Receive+0x40>)
 8000f42:	78db      	ldrb	r3, [r3, #3]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <NRF24L01_Receive+0x44>)
 8000f48:	609a      	str	r2, [r3, #8]
    	pressure[3] = (uint32_t)(RX_BUF[4]);
 8000f4a:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <NRF24L01_Receive+0x40>)
 8000f4c:	791b      	ldrb	r3, [r3, #4]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b02      	ldr	r3, [pc, #8]	; (8000f5c <NRF24L01_Receive+0x44>)
 8000f52:	60da      	str	r2, [r3, #12]
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000208 	.word	0x20000208
 8000f5c:	20000220 	.word	0x20000220

08000f60 <NRF24L01_IT>:

//--------------------------------------------------

void NRF24L01_IT(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	uint8_t status=0x00;
 8000f66:	2300      	movs	r3, #0
 8000f68:	71fb      	strb	r3, [r7, #7]
	status = NRF24_ReadReg(STATUS);
 8000f6a:	2007      	movs	r0, #7
 8000f6c:	f7ff fdfa 	bl	8000b64 <NRF24_ReadReg>
 8000f70:	4603      	mov	r3, r0
 8000f72:	71fb      	strb	r3, [r7, #7]
	if((status & RX_DR)&&(status & TX_DS))
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d019      	beq.n	8000fb2 <NRF24L01_IT+0x52>
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 0320 	and.w	r3, r3, #32
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d014      	beq.n	8000fb2 <NRF24L01_IT+0x52>
	{
			NRF24_WriteReg(STATUS, RX_DR);
 8000f88:	2140      	movs	r1, #64	; 0x40
 8000f8a:	2007      	movs	r0, #7
 8000f8c:	f7ff fe1e 	bl	8000bcc <NRF24_WriteReg>
			NRF24L01_Receive();
 8000f90:	f7ff ffc2 	bl	8000f18 <NRF24L01_Receive>
			NRF24_WriteReg(STATUS, TX_DS);
 8000f94:	2120      	movs	r1, #32
 8000f96:	2007      	movs	r0, #7
 8000f98:	f7ff fe18 	bl	8000bcc <NRF24_WriteReg>
			pressure[2] = (NRF24_ReadReg(OBSERVE_TX) & 0xF);
 8000f9c:	2008      	movs	r0, #8
 8000f9e:	f7ff fde1 	bl	8000b64 <NRF24_ReadReg>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	f003 030f 	and.w	r3, r3, #15
 8000fa8:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <NRF24L01_IT+0xc4>)
 8000faa:	6093      	str	r3, [r2, #8]
			NRF24L01_RX_Mode();
 8000fac:	f7ff ff06 	bl	8000dbc <NRF24L01_RX_Mode>
		NRF24_WriteReg(STATUS, MAX_RT);
		NRF24_FlushTX();
		pressure[2] = (NRF24_ReadReg(OBSERVE_TX) & 0xF);
		NRF24L01_RX_Mode();
	}
}
 8000fb0:	e034      	b.n	800101c <NRF24L01_IT+0xbc>
	else if(status & RX_DR)
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d006      	beq.n	8000fca <NRF24L01_IT+0x6a>
		NRF24_WriteReg(STATUS, RX_DR);
 8000fbc:	2140      	movs	r1, #64	; 0x40
 8000fbe:	2007      	movs	r0, #7
 8000fc0:	f7ff fe04 	bl	8000bcc <NRF24_WriteReg>
		NRF24L01_Receive();
 8000fc4:	f7ff ffa8 	bl	8000f18 <NRF24L01_Receive>
}
 8000fc8:	e028      	b.n	800101c <NRF24L01_IT+0xbc>
	else if(status & TX_DS)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 0320 	and.w	r3, r3, #32
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00e      	beq.n	8000ff2 <NRF24L01_IT+0x92>
	 	NRF24_WriteReg(STATUS, TX_DS);
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	2007      	movs	r0, #7
 8000fd8:	f7ff fdf8 	bl	8000bcc <NRF24_WriteReg>
	 	pressure[2] = (NRF24_ReadReg(OBSERVE_TX) & 0xF);
 8000fdc:	2008      	movs	r0, #8
 8000fde:	f7ff fdc1 	bl	8000b64 <NRF24_ReadReg>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	f003 030f 	and.w	r3, r3, #15
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <NRF24L01_IT+0xc4>)
 8000fea:	6093      	str	r3, [r2, #8]
	 	NRF24L01_RX_Mode();
 8000fec:	f7ff fee6 	bl	8000dbc <NRF24L01_RX_Mode>
}
 8000ff0:	e014      	b.n	800101c <NRF24L01_IT+0xbc>
	else if(status & MAX_RT)
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	f003 0310 	and.w	r3, r3, #16
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00f      	beq.n	800101c <NRF24L01_IT+0xbc>
		NRF24_WriteReg(STATUS, MAX_RT);
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	2007      	movs	r0, #7
 8001000:	f7ff fde4 	bl	8000bcc <NRF24_WriteReg>
		NRF24_FlushTX();
 8001004:	f7ff feb8 	bl	8000d78 <NRF24_FlushTX>
		pressure[2] = (NRF24_ReadReg(OBSERVE_TX) & 0xF);
 8001008:	2008      	movs	r0, #8
 800100a:	f7ff fdab 	bl	8000b64 <NRF24_ReadReg>
 800100e:	4603      	mov	r3, r0
 8001010:	f003 030f 	and.w	r3, r3, #15
 8001014:	4a03      	ldr	r2, [pc, #12]	; (8001024 <NRF24L01_IT+0xc4>)
 8001016:	6093      	str	r3, [r2, #8]
		NRF24L01_RX_Mode();
 8001018:	f7ff fed0 	bl	8000dbc <NRF24L01_RX_Mode>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000220 	.word	0x20000220

08001028 <NRF24_ini>:

//--------------------------------------------------
void NRF24_ini(void)

{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	  CE_RESET;
 800102c:	2200      	movs	r2, #0
 800102e:	2108      	movs	r1, #8
 8001030:	4823      	ldr	r0, [pc, #140]	; (80010c0 <NRF24_ini+0x98>)
 8001032:	f001 fd23 	bl	8002a7c <HAL_GPIO_WritePin>
	  DelayMicro(5000);
 8001036:	f241 3088 	movw	r0, #5000	; 0x1388
 800103a:	f7ff fd75 	bl	8000b28 <DelayMicro>
	  NRF24_WriteReg(CONFIG, 0x0a); 						// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 800103e:	210a      	movs	r1, #10
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff fdc3 	bl	8000bcc <NRF24_WriteReg>
	  DelayMicro(5000);
 8001046:	f241 3088 	movw	r0, #5000	; 0x1388
 800104a:	f7ff fd6d 	bl	8000b28 <DelayMicro>
	  NRF24_WriteReg(EN_AA, 0x01); 							// Enable Pipe0
 800104e:	2101      	movs	r1, #1
 8001050:	2001      	movs	r0, #1
 8001052:	f7ff fdbb 	bl	8000bcc <NRF24_WriteReg>
	  NRF24_WriteReg(EN_RXADDR, 0x01); 						// Enable Pipe0
 8001056:	2101      	movs	r1, #1
 8001058:	2002      	movs	r0, #2
 800105a:	f7ff fdb7 	bl	8000bcc <NRF24_WriteReg>
	  NRF24_WriteReg(SETUP_AW, 0x01); 						// Setup address width=3 bytes
 800105e:	2101      	movs	r1, #1
 8001060:	2003      	movs	r0, #3
 8001062:	f7ff fdb3 	bl	8000bcc <NRF24_WriteReg>
	  NRF24_WriteReg(SETUP_RETR, 0x5F); 					// 1500us, 15 retrans
 8001066:	215f      	movs	r1, #95	; 0x5f
 8001068:	2004      	movs	r0, #4
 800106a:	f7ff fdaf 	bl	8000bcc <NRF24_WriteReg>
	  NRF24_ToggleFeatures();
 800106e:	f7ff fddb 	bl	8000c28 <NRF24_ToggleFeatures>
	  NRF24_WriteReg(FEATURE, 0x6);							//Enable ACK payload (require dynamic payload)
 8001072:	2106      	movs	r1, #6
 8001074:	201d      	movs	r0, #29
 8001076:	f7ff fda9 	bl	8000bcc <NRF24_WriteReg>
	  NRF24_WriteReg(DYNPD, 0x1);							//Dynamic payload pipe 0
 800107a:	2101      	movs	r1, #1
 800107c:	201c      	movs	r0, #28
 800107e:	f7ff fda5 	bl	8000bcc <NRF24_WriteReg>
	  NRF24_WriteReg(STATUS, 0x70); 						//Reset flags for IRQ
 8001082:	2170      	movs	r1, #112	; 0x70
 8001084:	2007      	movs	r0, #7
 8001086:	f7ff fda1 	bl	8000bcc <NRF24_WriteReg>
	  NRF24_WriteReg(RF_CH, 70); 							// частота 2470 MHz
 800108a:	2146      	movs	r1, #70	; 0x46
 800108c:	2005      	movs	r0, #5
 800108e:	f7ff fd9d 	bl	8000bcc <NRF24_WriteReg>
	  NRF24_WriteReg(RF_SETUP, 0x26); 						//TX_PWR:0dBm, Datarate:250kbps
 8001092:	2126      	movs	r1, #38	; 0x26
 8001094:	2006      	movs	r0, #6
 8001096:	f7ff fd99 	bl	8000bcc <NRF24_WriteReg>
	  NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 800109a:	2203      	movs	r2, #3
 800109c:	4909      	ldr	r1, [pc, #36]	; (80010c4 <NRF24_ini+0x9c>)
 800109e:	2010      	movs	r0, #16
 80010a0:	f7ff fe16 	bl	8000cd0 <NRF24_Write_Buf>
	  NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);
 80010a4:	2203      	movs	r2, #3
 80010a6:	4907      	ldr	r1, [pc, #28]	; (80010c4 <NRF24_ini+0x9c>)
 80010a8:	200a      	movs	r0, #10
 80010aa:	f7ff fe11 	bl	8000cd0 <NRF24_Write_Buf>
	  NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH); 			//Number of bytes in RX payload in data pipe 0
 80010ae:	2105      	movs	r1, #5
 80010b0:	2011      	movs	r0, #17
 80010b2:	f7ff fd8b 	bl	8000bcc <NRF24_WriteReg>
	  NRF24L01_RX_Mode();
 80010b6:	f7ff fe81 	bl	8000dbc <NRF24L01_RX_Mode>
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40010800 	.word	0x40010800
 80010c4:	20000000 	.word	0x20000000

080010c8 <Display_Init>:

extern uint32_t pressure[4];
//extern uint8_t buf1[5] = {0};
 uint16_t i=1,retr_cnt_full=0;

void Display_Init(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(SPI_Led_GPIO_Port, SPI_Led_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(I2C_Led_GPIO_Port, I2C_Led_Pin, GPIO_PIN_RESET);
	ssd1306_Init();
 80010cc:	f000 fbf4 	bl	80018b8 <ssd1306_Init>

	//ssd1306_UpdateScreen();
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	0000      	movs	r0, r0
	...

080010d8 <Main_Screen>:

void Main_Screen(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b09e      	sub	sp, #120	; 0x78
 80010dc:	af02      	add	r7, sp, #8
	uint8_t x = 1, y = 10;
 80010de:	2301      	movs	r3, #1
 80010e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80010e4:	230a      	movs	r3, #10
 80010e6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	char ps3[32];
	char ps4[32];
	//char ps4[64];
	//for(int i = 0; i < 4; i++)
	//float press1 = (pressure[0] / 101312000);
	float press2 = (float)(pressure[1] / 133.32);
 80010ea:	4b69      	ldr	r3, [pc, #420]	; (8001290 <Main_Screen+0x1b8>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f978 	bl	80003e4 <__aeabi_ui2d>
 80010f4:	a364      	add	r3, pc, #400	; (adr r3, 8001288 <Main_Screen+0x1b0>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff fb17 	bl	800072c <__aeabi_ddiv>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f7ff fcbf 	bl	8000a88 <__aeabi_d2f>
 800110a:	4603      	mov	r3, r0
 800110c:	66bb      	str	r3, [r7, #104]	; 0x68
	//sprintf(ps1, "%1.3f", press1);
	sprintf(ps2, "%1.3f", press2);
 800110e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001110:	f7ff f98a 	bl	8000428 <__aeabi_f2d>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800111c:	495d      	ldr	r1, [pc, #372]	; (8001294 <Main_Screen+0x1bc>)
 800111e:	f003 fd01 	bl	8004b24 <siprintf>
	sprintf(ps1, "%d", pressure[1]);
 8001122:	4b5b      	ldr	r3, [pc, #364]	; (8001290 <Main_Screen+0x1b8>)
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800112a:	495b      	ldr	r1, [pc, #364]	; (8001298 <Main_Screen+0x1c0>)
 800112c:	4618      	mov	r0, r3
 800112e:	f003 fcf9 	bl	8004b24 <siprintf>
	sprintf(ps3, "%d", i);
 8001132:	4b5a      	ldr	r3, [pc, #360]	; (800129c <Main_Screen+0x1c4>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	f107 0320 	add.w	r3, r7, #32
 800113c:	4956      	ldr	r1, [pc, #344]	; (8001298 <Main_Screen+0x1c0>)
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fcf0 	bl	8004b24 <siprintf>
	sprintf(ps4, "%d", retr_cnt_full);
 8001144:	4b56      	ldr	r3, [pc, #344]	; (80012a0 <Main_Screen+0x1c8>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	463b      	mov	r3, r7
 800114c:	4952      	ldr	r1, [pc, #328]	; (8001298 <Main_Screen+0x1c0>)
 800114e:	4618      	mov	r0, r3
 8001150:	f003 fce8 	bl	8004b24 <siprintf>
	//sprintf(ps2, "%d", pressure[1]);
	ssd1306_SetCursor(x, y);
 8001154:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8001158:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fd5e 	bl	8001c20 <ssd1306_SetCursor>
	ssd1306_WriteString("             ", Font_11x18, White);
 8001164:	4a4f      	ldr	r2, [pc, #316]	; (80012a4 <Main_Screen+0x1cc>)
 8001166:	2301      	movs	r3, #1
 8001168:	ca06      	ldmia	r2, {r1, r2}
 800116a:	484f      	ldr	r0, [pc, #316]	; (80012a8 <Main_Screen+0x1d0>)
 800116c:	f000 fd32 	bl	8001bd4 <ssd1306_WriteString>
	ssd1306_SetCursor(x, y);
 8001170:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8001174:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fd50 	bl	8001c20 <ssd1306_SetCursor>
	ssd1306_WriteString(ps1, Font_11x18, White);
 8001180:	4a48      	ldr	r2, [pc, #288]	; (80012a4 <Main_Screen+0x1cc>)
 8001182:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001186:	2301      	movs	r3, #1
 8001188:	ca06      	ldmia	r2, {r1, r2}
 800118a:	f000 fd23 	bl	8001bd4 <ssd1306_WriteString>
	x += SSD1306_WIDTH/2 + 3;
 800118e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001192:	3343      	adds	r3, #67	; 0x43
 8001194:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	ssd1306_SetCursor(x, y);
 8001198:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800119c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 fd3c 	bl	8001c20 <ssd1306_SetCursor>
	ssd1306_WriteString("     ", Font_11x18, White);
 80011a8:	4a3e      	ldr	r2, [pc, #248]	; (80012a4 <Main_Screen+0x1cc>)
 80011aa:	2301      	movs	r3, #1
 80011ac:	ca06      	ldmia	r2, {r1, r2}
 80011ae:	483f      	ldr	r0, [pc, #252]	; (80012ac <Main_Screen+0x1d4>)
 80011b0:	f000 fd10 	bl	8001bd4 <ssd1306_WriteString>
	ssd1306_SetCursor(x, y);
 80011b4:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80011b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011bc:	4611      	mov	r1, r2
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fd2e 	bl	8001c20 <ssd1306_SetCursor>
	ssd1306_WriteString(ps2, Font_11x18, White);
 80011c4:	4a37      	ldr	r2, [pc, #220]	; (80012a4 <Main_Screen+0x1cc>)
 80011c6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80011ca:	2301      	movs	r3, #1
 80011cc:	ca06      	ldmia	r2, {r1, r2}
 80011ce:	f000 fd01 	bl	8001bd4 <ssd1306_WriteString>
	y += SSD1306_HEIGHT/2;
 80011d2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80011d6:	3320      	adds	r3, #32
 80011d8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	ssd1306_SetCursor(x, y);
 80011dc:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80011e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fd1a 	bl	8001c20 <ssd1306_SetCursor>
	ssd1306_WriteString("     ", Font_11x18, White);
 80011ec:	4a2d      	ldr	r2, [pc, #180]	; (80012a4 <Main_Screen+0x1cc>)
 80011ee:	2301      	movs	r3, #1
 80011f0:	ca06      	ldmia	r2, {r1, r2}
 80011f2:	482e      	ldr	r0, [pc, #184]	; (80012ac <Main_Screen+0x1d4>)
 80011f4:	f000 fcee 	bl	8001bd4 <ssd1306_WriteString>
	ssd1306_SetCursor(x, y);
 80011f8:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80011fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fd0c 	bl	8001c20 <ssd1306_SetCursor>
	ssd1306_WriteString(ps4, Font_11x18, White);
 8001208:	4a26      	ldr	r2, [pc, #152]	; (80012a4 <Main_Screen+0x1cc>)
 800120a:	4638      	mov	r0, r7
 800120c:	2301      	movs	r3, #1
 800120e:	ca06      	ldmia	r2, {r1, r2}
 8001210:	f000 fce0 	bl	8001bd4 <ssd1306_WriteString>
	x -= SSD1306_WIDTH/2 + 3;
 8001214:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001218:	3b43      	subs	r3, #67	; 0x43
 800121a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	ssd1306_SetCursor(x, y);
 800121e:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8001222:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fcf9 	bl	8001c20 <ssd1306_SetCursor>
	ssd1306_WriteString("     ", Font_11x18, White);
 800122e:	4a1d      	ldr	r2, [pc, #116]	; (80012a4 <Main_Screen+0x1cc>)
 8001230:	2301      	movs	r3, #1
 8001232:	ca06      	ldmia	r2, {r1, r2}
 8001234:	481d      	ldr	r0, [pc, #116]	; (80012ac <Main_Screen+0x1d4>)
 8001236:	f000 fccd 	bl	8001bd4 <ssd1306_WriteString>
	ssd1306_SetCursor(x, y);
 800123a:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800123e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fceb 	bl	8001c20 <ssd1306_SetCursor>
	ssd1306_WriteString(ps3, Font_11x18, White);
 800124a:	4a16      	ldr	r2, [pc, #88]	; (80012a4 <Main_Screen+0x1cc>)
 800124c:	f107 0020 	add.w	r0, r7, #32
 8001250:	2301      	movs	r3, #1
 8001252:	ca06      	ldmia	r2, {r1, r2}
 8001254:	f000 fcbe 	bl	8001bd4 <ssd1306_WriteString>

	ssd1306_Line(SSD1306_WIDTH/2,0,SSD1306_WIDTH/2,SSD1306_HEIGHT,White);
 8001258:	2301      	movs	r3, #1
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2340      	movs	r3, #64	; 0x40
 800125e:	2240      	movs	r2, #64	; 0x40
 8001260:	2100      	movs	r1, #0
 8001262:	2040      	movs	r0, #64	; 0x40
 8001264:	f000 fcf4 	bl	8001c50 <ssd1306_Line>
	ssd1306_Line(0,SSD1306_HEIGHT/2,SSD1306_WIDTH,SSD1306_HEIGHT/2,White);
 8001268:	2301      	movs	r3, #1
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2320      	movs	r3, #32
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	2120      	movs	r1, #32
 8001272:	2000      	movs	r0, #0
 8001274:	f000 fcec 	bl	8001c50 <ssd1306_Line>

	ssd1306_UpdateScreen();
 8001278:	f000 fbaa 	bl	80019d0 <ssd1306_UpdateScreen>
}
 800127c:	bf00      	nop
 800127e:	3770      	adds	r7, #112	; 0x70
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	f3af 8000 	nop.w
 8001288:	70a3d70a 	.word	0x70a3d70a
 800128c:	4060aa3d 	.word	0x4060aa3d
 8001290:	20000220 	.word	0x20000220
 8001294:	08006fe0 	.word	0x08006fe0
 8001298:	08006fe8 	.word	0x08006fe8
 800129c:	20000004 	.word	0x20000004
 80012a0:	2000020e 	.word	0x2000020e
 80012a4:	20000008 	.word	0x20000008
 80012a8:	08006fec 	.word	0x08006fec
 80012ac:	08006ffc 	.word	0x08006ffc

080012b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_DMA_Init+0x38>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <MX_DMA_Init+0x38>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6153      	str	r3, [r2, #20]
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_DMA_Init+0x38>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	200f      	movs	r0, #15
 80012d4:	f001 f8b7 	bl	8002446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012d8:	200f      	movs	r0, #15
 80012da:	f001 f8d0 	bl	800247e <HAL_NVIC_EnableIRQ>

}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000

080012ec <Encoder_Init>:
 *      Author: serad
 */

#include <encoder.h>

void Encoder_Init(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80012f0:	213c      	movs	r1, #60	; 0x3c
 80012f2:	480b      	ldr	r0, [pc, #44]	; (8001320 <Encoder_Init+0x34>)
 80012f4:	f002 fdea 	bl	8003ecc <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim3, 32768);
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <Encoder_Init+0x34>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
	cnt1 = __HAL_TIM_GET_COUNTER(&htim3)>>1;
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <Encoder_Init+0x34>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	085b      	lsrs	r3, r3, #1
 800130a:	4a06      	ldr	r2, [pc, #24]	; (8001324 <Encoder_Init+0x38>)
 800130c:	6013      	str	r3, [r2, #0]
	cnt2 = __HAL_TIM_GET_COUNTER(&htim3)>>1;
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <Encoder_Init+0x34>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	085b      	lsrs	r3, r3, #1
 8001316:	4a04      	ldr	r2, [pc, #16]	; (8001328 <Encoder_Init+0x3c>)
 8001318:	6013      	str	r3, [r2, #0]
};
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000730 	.word	0x20000730
 8001324:	20000210 	.word	0x20000210
 8001328:	20000214 	.word	0x20000214

0800132c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001340:	4b48      	ldr	r3, [pc, #288]	; (8001464 <MX_GPIO_Init+0x138>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a47      	ldr	r2, [pc, #284]	; (8001464 <MX_GPIO_Init+0x138>)
 8001346:	f043 0310 	orr.w	r3, r3, #16
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b45      	ldr	r3, [pc, #276]	; (8001464 <MX_GPIO_Init+0x138>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001358:	4b42      	ldr	r3, [pc, #264]	; (8001464 <MX_GPIO_Init+0x138>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a41      	ldr	r2, [pc, #260]	; (8001464 <MX_GPIO_Init+0x138>)
 800135e:	f043 0320 	orr.w	r3, r3, #32
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b3f      	ldr	r3, [pc, #252]	; (8001464 <MX_GPIO_Init+0x138>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0320 	and.w	r3, r3, #32
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	4b3c      	ldr	r3, [pc, #240]	; (8001464 <MX_GPIO_Init+0x138>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	4a3b      	ldr	r2, [pc, #236]	; (8001464 <MX_GPIO_Init+0x138>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	6193      	str	r3, [r2, #24]
 800137c:	4b39      	ldr	r3, [pc, #228]	; (8001464 <MX_GPIO_Init+0x138>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	4b36      	ldr	r3, [pc, #216]	; (8001464 <MX_GPIO_Init+0x138>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a35      	ldr	r2, [pc, #212]	; (8001464 <MX_GPIO_Init+0x138>)
 800138e:	f043 0308 	orr.w	r3, r3, #8
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b33      	ldr	r3, [pc, #204]	; (8001464 <MX_GPIO_Init+0x138>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2118      	movs	r1, #24
 80013a4:	4830      	ldr	r0, [pc, #192]	; (8001468 <MX_GPIO_Init+0x13c>)
 80013a6:	f001 fb69 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_Res_Pin|OLED_CS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80013b0:	482e      	ldr	r0, [pc, #184]	; (800146c <MX_GPIO_Init+0x140>)
 80013b2:	f001 fb63 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013bc:	2303      	movs	r3, #3
 80013be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4619      	mov	r1, r3
 80013c6:	482a      	ldr	r0, [pc, #168]	; (8001470 <MX_GPIO_Init+0x144>)
 80013c8:	f001 f9d4 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 80013cc:	f649 7303 	movw	r3, #40707	; 0x9f03
 80013d0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d2:	2303      	movs	r3, #3
 80013d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	4619      	mov	r1, r3
 80013dc:	4822      	ldr	r0, [pc, #136]	; (8001468 <MX_GPIO_Init+0x13c>)
 80013de:	f001 f9c9 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013e2:	2304      	movs	r3, #4
 80013e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <MX_GPIO_Init+0x148>)
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4619      	mov	r1, r3
 80013f4:	481c      	ldr	r0, [pc, #112]	; (8001468 <MX_GPIO_Init+0x13c>)
 80013f6:	f001 f9bd 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80013fa:	2318      	movs	r3, #24
 80013fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2302      	movs	r3, #2
 8001408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	4619      	mov	r1, r3
 8001410:	4815      	ldr	r0, [pc, #84]	; (8001468 <MX_GPIO_Init+0x13c>)
 8001412:	f001 f9af 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB14 PB3 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001416:	f644 43cf 	movw	r3, #19663	; 0x4ccf
 800141a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141c:	2303      	movs	r3, #3
 800141e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4619      	mov	r1, r3
 8001426:	4811      	ldr	r0, [pc, #68]	; (800146c <MX_GPIO_Init+0x140>)
 8001428:	f001 f9a4 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OLED_Res_Pin|OLED_CS_Pin|OLED_DC_Pin;
 800142c:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8001430:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2302      	movs	r3, #2
 800143c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	4619      	mov	r1, r3
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <MX_GPIO_Init+0x140>)
 8001446:	f001 f995 	bl	8002774 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2101      	movs	r1, #1
 800144e:	2008      	movs	r0, #8
 8001450:	f000 fff9 	bl	8002446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001454:	2008      	movs	r0, #8
 8001456:	f001 f812 	bl	800247e <HAL_NVIC_EnableIRQ>

}
 800145a:	bf00      	nop
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	40010800 	.word	0x40010800
 800146c:	40010c00 	.word	0x40010c00
 8001470:	40011000 	.word	0x40011000
 8001474:	10210000 	.word	0x10210000

08001478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t retr_cnt=0, dt;
 800147e:	2300      	movs	r3, #0
 8001480:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001482:	f000 fe83 	bl	800218c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001486:	f000 f83f 	bl	8001508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800148a:	f7ff ff4f 	bl	800132c <MX_GPIO_Init>
  MX_DMA_Init();
 800148e:	f7ff ff0f 	bl	80012b0 <MX_DMA_Init>
  MX_SPI2_Init();
 8001492:	f000 f8c9 	bl	8001628 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001496:	f000 fdad 	bl	8001ff4 <MX_TIM3_Init>
  MX_SPI1_Init();
 800149a:	f000 f88f 	bl	80015bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  Display_Init();
 800149e:	f7ff fe13 	bl	80010c8 <Display_Init>
  Encoder_Init();
 80014a2:	f7ff ff23 	bl	80012ec <Encoder_Init>
  NRF24_ini();
 80014a6:	f7ff fdbf 	bl	8001028 <NRF24_ini>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  Main_Screen();
 80014aa:	f7ff fe15 	bl	80010d8 <Main_Screen>
	  HAL_Delay(1000);
 80014ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b2:	f000 fecd 	bl	8002250 <HAL_Delay>
	  NRF24L01_Send(buf1);
 80014b6:	4810      	ldr	r0, [pc, #64]	; (80014f8 <main+0x80>)
 80014b8:	f7ff fcf6 	bl	8000ea8 <NRF24L01_Send>
	  retr_cnt = dt & 0xF;
 80014bc:	79bb      	ldrb	r3, [r7, #6]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	71fb      	strb	r3, [r7, #7]
	  i++;
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <main+0x84>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <main+0x84>)
 80014ce:	801a      	strh	r2, [r3, #0]
	  retr_cnt_full += pressure[2];
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <main+0x88>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <main+0x8c>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	b29a      	uxth	r2, r3
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <main+0x8c>)
 80014e0:	801a      	strh	r2, [r3, #0]
	  if(i>=999) i=1;
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <main+0x84>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	f240 32e6 	movw	r2, #998	; 0x3e6
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d9dd      	bls.n	80014aa <main+0x32>
 80014ee:	4b03      	ldr	r3, [pc, #12]	; (80014fc <main+0x84>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	801a      	strh	r2, [r3, #0]
	  Main_Screen();
 80014f4:	e7d9      	b.n	80014aa <main+0x32>
 80014f6:	bf00      	nop
 80014f8:	20000218 	.word	0x20000218
 80014fc:	20000004 	.word	0x20000004
 8001500:	20000220 	.word	0x20000220
 8001504:	2000020e 	.word	0x2000020e

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b090      	sub	sp, #64	; 0x40
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 0318 	add.w	r3, r7, #24
 8001512:	2228      	movs	r2, #40	; 0x28
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f002 fe9c 	bl	8004254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800152e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001532:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001538:	2301      	movs	r3, #1
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153c:	2302      	movs	r3, #2
 800153e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001546:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800154a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154c:	f107 0318 	add.w	r3, r7, #24
 8001550:	4618      	mov	r0, r3
 8001552:	f001 fac3 	bl	8002adc <HAL_RCC_OscConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800155c:	f000 f827 	bl	80015ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001560:	230f      	movs	r3, #15
 8001562:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001564:	2302      	movs	r3, #2
 8001566:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800156c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001570:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2102      	movs	r1, #2
 800157a:	4618      	mov	r0, r3
 800157c:	f001 fd30 	bl	8002fe0 <HAL_RCC_ClockConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001586:	f000 f812 	bl	80015ae <Error_Handler>
  }
}
 800158a:	bf00      	nop
 800158c:	3740      	adds	r7, #64	; 0x40
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_2 )
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d101      	bne.n	80015a6 <HAL_GPIO_EXTI_Callback+0x14>
	{
		NRF24L01_IT();
 80015a2:	f7ff fcdd 	bl	8000f60 <NRF24L01_IT>
	}
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
	...

080015bc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <MX_SPI1_Init+0x64>)
 80015c2:	4a18      	ldr	r2, [pc, #96]	; (8001624 <MX_SPI1_Init+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <MX_SPI1_Init+0x64>)
 80015c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MX_SPI1_Init+0x64>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <MX_SPI1_Init+0x64>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_SPI1_Init+0x64>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <MX_SPI1_Init+0x64>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_SPI1_Init+0x64>)
 80015e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_SPI1_Init+0x64>)
 80015f0:	2220      	movs	r2, #32
 80015f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <MX_SPI1_Init+0x64>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_SPI1_Init+0x64>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <MX_SPI1_Init+0x64>)
 8001602:	2200      	movs	r2, #0
 8001604:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_SPI1_Init+0x64>)
 8001608:	220a      	movs	r2, #10
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <MX_SPI1_Init+0x64>)
 800160e:	f001 fe4f 	bl	80032b0 <HAL_SPI_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001618:	f7ff ffc9 	bl	80015ae <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000230 	.word	0x20000230
 8001624:	40013000 	.word	0x40013000

08001628 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_SPI2_Init+0x68>)
 800162e:	4a19      	ldr	r2, [pc, #100]	; (8001694 <MX_SPI2_Init+0x6c>)
 8001630:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <MX_SPI2_Init+0x68>)
 8001634:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001638:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_SPI2_Init+0x68>)
 800163c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001640:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MX_SPI2_Init+0x68>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_SPI2_Init+0x68>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_SPI2_Init+0x68>)
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_SPI2_Init+0x68>)
 8001656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800165a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_SPI2_Init+0x68>)
 800165e:	2208      	movs	r2, #8
 8001660:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_SPI2_Init+0x68>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_SPI2_Init+0x68>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_SPI2_Init+0x68>)
 8001670:	2200      	movs	r2, #0
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_SPI2_Init+0x68>)
 8001676:	220a      	movs	r2, #10
 8001678:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_SPI2_Init+0x68>)
 800167c:	f001 fe18 	bl	80032b0 <HAL_SPI_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001686:	f7ff ff92 	bl	80015ae <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000288 	.word	0x20000288
 8001694:	40003800 	.word	0x40003800

08001698 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0318 	add.w	r3, r7, #24
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a44      	ldr	r2, [pc, #272]	; (80017c4 <HAL_SPI_MspInit+0x12c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d130      	bne.n	800171a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016b8:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <HAL_SPI_MspInit+0x130>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a42      	ldr	r2, [pc, #264]	; (80017c8 <HAL_SPI_MspInit+0x130>)
 80016be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b40      	ldr	r3, [pc, #256]	; (80017c8 <HAL_SPI_MspInit+0x130>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <HAL_SPI_MspInit+0x130>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a3c      	ldr	r2, [pc, #240]	; (80017c8 <HAL_SPI_MspInit+0x130>)
 80016d6:	f043 0304 	orr.w	r3, r3, #4
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <HAL_SPI_MspInit+0x130>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016e8:	23a0      	movs	r3, #160	; 0xa0
 80016ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0318 	add.w	r3, r7, #24
 80016f8:	4619      	mov	r1, r3
 80016fa:	4834      	ldr	r0, [pc, #208]	; (80017cc <HAL_SPI_MspInit+0x134>)
 80016fc:	f001 f83a 	bl	8002774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001700:	2340      	movs	r3, #64	; 0x40
 8001702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 0318 	add.w	r3, r7, #24
 8001710:	4619      	mov	r1, r3
 8001712:	482e      	ldr	r0, [pc, #184]	; (80017cc <HAL_SPI_MspInit+0x134>)
 8001714:	f001 f82e 	bl	8002774 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001718:	e04f      	b.n	80017ba <HAL_SPI_MspInit+0x122>
  else if(spiHandle->Instance==SPI2)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a2c      	ldr	r2, [pc, #176]	; (80017d0 <HAL_SPI_MspInit+0x138>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d14a      	bne.n	80017ba <HAL_SPI_MspInit+0x122>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001724:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <HAL_SPI_MspInit+0x130>)
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	4a27      	ldr	r2, [pc, #156]	; (80017c8 <HAL_SPI_MspInit+0x130>)
 800172a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172e:	61d3      	str	r3, [r2, #28]
 8001730:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <HAL_SPI_MspInit+0x130>)
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <HAL_SPI_MspInit+0x130>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a21      	ldr	r2, [pc, #132]	; (80017c8 <HAL_SPI_MspInit+0x130>)
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <HAL_SPI_MspInit+0x130>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001754:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	f107 0318 	add.w	r3, r7, #24
 8001766:	4619      	mov	r1, r3
 8001768:	481a      	ldr	r0, [pc, #104]	; (80017d4 <HAL_SPI_MspInit+0x13c>)
 800176a:	f001 f803 	bl	8002774 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <HAL_SPI_MspInit+0x140>)
 8001770:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <HAL_SPI_MspInit+0x144>)
 8001772:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_SPI_MspInit+0x140>)
 8001776:	2210      	movs	r2, #16
 8001778:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <HAL_SPI_MspInit+0x140>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_SPI_MspInit+0x140>)
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_SPI_MspInit+0x140>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_SPI_MspInit+0x140>)
 800178e:	2200      	movs	r2, #0
 8001790:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_SPI_MspInit+0x140>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_SPI_MspInit+0x140>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800179e:	480e      	ldr	r0, [pc, #56]	; (80017d8 <HAL_SPI_MspInit+0x140>)
 80017a0:	f000 fe88 	bl	80024b4 <HAL_DMA_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_SPI_MspInit+0x116>
      Error_Handler();
 80017aa:	f7ff ff00 	bl	80015ae <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <HAL_SPI_MspInit+0x140>)
 80017b2:	649a      	str	r2, [r3, #72]	; 0x48
 80017b4:	4a08      	ldr	r2, [pc, #32]	; (80017d8 <HAL_SPI_MspInit+0x140>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	; 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40013000 	.word	0x40013000
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010800 	.word	0x40010800
 80017d0:	40003800 	.word	0x40003800
 80017d4:	40010c00 	.word	0x40010c00
 80017d8:	200002e0 	.word	0x200002e0
 80017dc:	40020058 	.word	0x40020058

080017e0 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 80017e4:	2201      	movs	r2, #1
 80017e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ea:	480b      	ldr	r0, [pc, #44]	; (8001818 <ssd1306_Reset+0x38>)
 80017ec:	f001 f946 	bl	8002a7c <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f6:	4808      	ldr	r0, [pc, #32]	; (8001818 <ssd1306_Reset+0x38>)
 80017f8:	f001 f940 	bl	8002a7c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80017fc:	200a      	movs	r0, #10
 80017fe:	f000 fd27 	bl	8002250 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8001802:	2201      	movs	r2, #1
 8001804:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001808:	4803      	ldr	r0, [pc, #12]	; (8001818 <ssd1306_Reset+0x38>)
 800180a:	f001 f937 	bl	8002a7c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800180e:	200a      	movs	r0, #10
 8001810:	f000 fd1e 	bl	8002250 <HAL_Delay>
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40010c00 	.word	0x40010c00

0800181c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001826:	2200      	movs	r2, #0
 8001828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <ssd1306_WriteCommand+0x44>)
 800182e:	f001 f925 	bl	8002a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8001832:	2200      	movs	r2, #0
 8001834:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001838:	4809      	ldr	r0, [pc, #36]	; (8001860 <ssd1306_WriteCommand+0x44>)
 800183a:	f001 f91f 	bl	8002a7c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 800183e:	1df9      	adds	r1, r7, #7
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
 8001844:	2201      	movs	r2, #1
 8001846:	4807      	ldr	r0, [pc, #28]	; (8001864 <ssd1306_WriteCommand+0x48>)
 8001848:	f001 fdb6 	bl	80033b8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800184c:	2201      	movs	r2, #1
 800184e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001852:	4803      	ldr	r0, [pc, #12]	; (8001860 <ssd1306_WriteCommand+0x44>)
 8001854:	f001 f912 	bl	8002a7c <HAL_GPIO_WritePin>
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40010c00 	.word	0x40010c00
 8001864:	20000288 	.word	0x20000288

08001868 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001872:	2200      	movs	r2, #0
 8001874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <ssd1306_WriteData+0x48>)
 800187a:	f001 f8ff 	bl	8002a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 800187e:	2201      	movs	r2, #1
 8001880:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001884:	480a      	ldr	r0, [pc, #40]	; (80018b0 <ssd1306_WriteData+0x48>)
 8001886:	f001 f8f9 	bl	8002a7c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b29a      	uxth	r2, r3
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <ssd1306_WriteData+0x4c>)
 8001896:	f001 fd8f 	bl	80033b8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800189a:	2201      	movs	r2, #1
 800189c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a0:	4803      	ldr	r0, [pc, #12]	; (80018b0 <ssd1306_WriteData+0x48>)
 80018a2:	f001 f8eb 	bl	8002a7c <HAL_GPIO_WritePin>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40010c00 	.word	0x40010c00
 80018b4:	20000288 	.word	0x20000288

080018b8 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80018bc:	f7ff ff90 	bl	80017e0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80018c0:	2064      	movs	r0, #100	; 0x64
 80018c2:	f000 fcc5 	bl	8002250 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 fa42 	bl	8001d50 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80018cc:	2020      	movs	r0, #32
 80018ce:	f7ff ffa5 	bl	800181c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80018d2:	2000      	movs	r0, #0
 80018d4:	f7ff ffa2 	bl	800181c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80018d8:	20b0      	movs	r0, #176	; 0xb0
 80018da:	f7ff ff9f 	bl	800181c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80018de:	20c8      	movs	r0, #200	; 0xc8
 80018e0:	f7ff ff9c 	bl	800181c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7ff ff99 	bl	800181c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80018ea:	2010      	movs	r0, #16
 80018ec:	f7ff ff96 	bl	800181c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80018f0:	2040      	movs	r0, #64	; 0x40
 80018f2:	f7ff ff93 	bl	800181c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80018f6:	20ff      	movs	r0, #255	; 0xff
 80018f8:	f000 fa16 	bl	8001d28 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80018fc:	20a1      	movs	r0, #161	; 0xa1
 80018fe:	f7ff ff8d 	bl	800181c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001902:	20a6      	movs	r0, #166	; 0xa6
 8001904:	f7ff ff8a 	bl	800181c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001908:	20a8      	movs	r0, #168	; 0xa8
 800190a:	f7ff ff87 	bl	800181c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800190e:	203f      	movs	r0, #63	; 0x3f
 8001910:	f7ff ff84 	bl	800181c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001914:	20a4      	movs	r0, #164	; 0xa4
 8001916:	f7ff ff81 	bl	800181c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800191a:	20d3      	movs	r0, #211	; 0xd3
 800191c:	f7ff ff7e 	bl	800181c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff ff7b 	bl	800181c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001926:	20d5      	movs	r0, #213	; 0xd5
 8001928:	f7ff ff78 	bl	800181c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800192c:	20f0      	movs	r0, #240	; 0xf0
 800192e:	f7ff ff75 	bl	800181c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001932:	20d9      	movs	r0, #217	; 0xd9
 8001934:	f7ff ff72 	bl	800181c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001938:	2022      	movs	r0, #34	; 0x22
 800193a:	f7ff ff6f 	bl	800181c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800193e:	20da      	movs	r0, #218	; 0xda
 8001940:	f7ff ff6c 	bl	800181c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001944:	2012      	movs	r0, #18
 8001946:	f7ff ff69 	bl	800181c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800194a:	20db      	movs	r0, #219	; 0xdb
 800194c:	f7ff ff66 	bl	800181c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001950:	2020      	movs	r0, #32
 8001952:	f7ff ff63 	bl	800181c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001956:	208d      	movs	r0, #141	; 0x8d
 8001958:	f7ff ff60 	bl	800181c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800195c:	2014      	movs	r0, #20
 800195e:	f7ff ff5d 	bl	800181c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001962:	2001      	movs	r0, #1
 8001964:	f000 f9f4 	bl	8001d50 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001968:	2000      	movs	r0, #0
 800196a:	f000 f80f 	bl	800198c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800196e:	f000 f82f 	bl	80019d0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <ssd1306_Init+0xd0>)
 8001974:	2200      	movs	r2, #0
 8001976:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <ssd1306_Init+0xd0>)
 800197a:	2200      	movs	r2, #0
 800197c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800197e:	4b02      	ldr	r3, [pc, #8]	; (8001988 <ssd1306_Init+0xd0>)
 8001980:	2201      	movs	r2, #1
 8001982:	711a      	strb	r2, [r3, #4]
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000724 	.word	0x20000724

0800198c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	e00d      	b.n	80019b8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <ssd1306_Fill+0x1a>
 80019a2:	2100      	movs	r1, #0
 80019a4:	e000      	b.n	80019a8 <ssd1306_Fill+0x1c>
 80019a6:	21ff      	movs	r1, #255	; 0xff
 80019a8:	4a08      	ldr	r2, [pc, #32]	; (80019cc <ssd1306_Fill+0x40>)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4413      	add	r3, r2
 80019ae:	460a      	mov	r2, r1
 80019b0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3301      	adds	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019be:	d3ed      	bcc.n	800199c <ssd1306_Fill+0x10>
    }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	20000324 	.word	0x20000324

080019d0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80019d6:	2300      	movs	r3, #0
 80019d8:	71fb      	strb	r3, [r7, #7]
 80019da:	e016      	b.n	8001a0a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	3b50      	subs	r3, #80	; 0x50
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ff1a 	bl	800181c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff ff17 	bl	800181c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80019ee:	2010      	movs	r0, #16
 80019f0:	f7ff ff14 	bl	800181c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	01db      	lsls	r3, r3, #7
 80019f8:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <ssd1306_UpdateScreen+0x4c>)
 80019fa:	4413      	add	r3, r2
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff32 	bl	8001868 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	3301      	adds	r3, #1
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b07      	cmp	r3, #7
 8001a0e:	d9e5      	bls.n	80019dc <ssd1306_UpdateScreen+0xc>
    }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000324 	.word	0x20000324

08001a20 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	71bb      	strb	r3, [r7, #6]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db3d      	blt.n	8001ab6 <ssd1306_DrawPixel+0x96>
 8001a3a:	79bb      	ldrb	r3, [r7, #6]
 8001a3c:	2b3f      	cmp	r3, #63	; 0x3f
 8001a3e:	d83a      	bhi.n	8001ab6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001a40:	797b      	ldrb	r3, [r7, #5]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d11a      	bne.n	8001a7c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	79bb      	ldrb	r3, [r7, #6]
 8001a4a:	08db      	lsrs	r3, r3, #3
 8001a4c:	b2d8      	uxtb	r0, r3
 8001a4e:	4603      	mov	r3, r0
 8001a50:	01db      	lsls	r3, r3, #7
 8001a52:	4413      	add	r3, r2
 8001a54:	4a1a      	ldr	r2, [pc, #104]	; (8001ac0 <ssd1306_DrawPixel+0xa0>)
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	b25a      	sxtb	r2, r3
 8001a5a:	79bb      	ldrb	r3, [r7, #6]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b259      	sxtb	r1, r3
 8001a6c:	79fa      	ldrb	r2, [r7, #7]
 8001a6e:	4603      	mov	r3, r0
 8001a70:	01db      	lsls	r3, r3, #7
 8001a72:	4413      	add	r3, r2
 8001a74:	b2c9      	uxtb	r1, r1
 8001a76:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <ssd1306_DrawPixel+0xa0>)
 8001a78:	54d1      	strb	r1, [r2, r3]
 8001a7a:	e01d      	b.n	8001ab8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a7c:	79fa      	ldrb	r2, [r7, #7]
 8001a7e:	79bb      	ldrb	r3, [r7, #6]
 8001a80:	08db      	lsrs	r3, r3, #3
 8001a82:	b2d8      	uxtb	r0, r3
 8001a84:	4603      	mov	r3, r0
 8001a86:	01db      	lsls	r3, r3, #7
 8001a88:	4413      	add	r3, r2
 8001a8a:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <ssd1306_DrawPixel+0xa0>)
 8001a8c:	5cd3      	ldrb	r3, [r2, r3]
 8001a8e:	b25a      	sxtb	r2, r3
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	2101      	movs	r1, #1
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	b25b      	sxtb	r3, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	b25b      	sxtb	r3, r3
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	b259      	sxtb	r1, r3
 8001aa6:	79fa      	ldrb	r2, [r7, #7]
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	01db      	lsls	r3, r3, #7
 8001aac:	4413      	add	r3, r2
 8001aae:	b2c9      	uxtb	r1, r1
 8001ab0:	4a03      	ldr	r2, [pc, #12]	; (8001ac0 <ssd1306_DrawPixel+0xa0>)
 8001ab2:	54d1      	strb	r1, [r2, r3]
 8001ab4:	e000      	b.n	8001ab8 <ssd1306_DrawPixel+0x98>
        return;
 8001ab6:	bf00      	nop
    }
}
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	20000324 	.word	0x20000324

08001ac4 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4604      	mov	r4, r0
 8001acc:	1d38      	adds	r0, r7, #4
 8001ace:	e880 0006 	stmia.w	r0, {r1, r2}
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4623      	mov	r3, r4
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	2b1f      	cmp	r3, #31
 8001ae0:	d902      	bls.n	8001ae8 <ssd1306_WriteChar+0x24>
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	2b7e      	cmp	r3, #126	; 0x7e
 8001ae6:	d901      	bls.n	8001aec <ssd1306_WriteChar+0x28>
        return 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e06d      	b.n	8001bc8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001aec:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <ssd1306_WriteChar+0x10c>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	793b      	ldrb	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	2b80      	cmp	r3, #128	; 0x80
 8001af8:	dc06      	bgt.n	8001b08 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001afa:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <ssd1306_WriteChar+0x10c>)
 8001afc:	885b      	ldrh	r3, [r3, #2]
 8001afe:	461a      	mov	r2, r3
 8001b00:	797b      	ldrb	r3, [r7, #5]
 8001b02:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001b04:	2b40      	cmp	r3, #64	; 0x40
 8001b06:	dd01      	ble.n	8001b0c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	e05d      	b.n	8001bc8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	e04c      	b.n	8001bac <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	3b20      	subs	r3, #32
 8001b18:	7979      	ldrb	r1, [r7, #5]
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	4619      	mov	r1, r3
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	440b      	add	r3, r1
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
 8001b30:	e034      	b.n	8001b9c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d012      	beq.n	8001b68 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <ssd1306_WriteChar+0x10c>)
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	b2d8      	uxtb	r0, r3
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <ssd1306_WriteChar+0x10c>)
 8001b52:	885b      	ldrh	r3, [r3, #2]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	7bba      	ldrb	r2, [r7, #14]
 8001b60:	4619      	mov	r1, r3
 8001b62:	f7ff ff5d 	bl	8001a20 <ssd1306_DrawPixel>
 8001b66:	e016      	b.n	8001b96 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <ssd1306_WriteChar+0x10c>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	b2d8      	uxtb	r0, r3
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <ssd1306_WriteChar+0x10c>)
 8001b78:	885b      	ldrh	r3, [r3, #2]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	4413      	add	r3, r2
 8001b82:	b2d9      	uxtb	r1, r3
 8001b84:	7bbb      	ldrb	r3, [r7, #14]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	bf0c      	ite	eq
 8001b8a:	2301      	moveq	r3, #1
 8001b8c:	2300      	movne	r3, #0
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	f7ff ff45 	bl	8001a20 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	793b      	ldrb	r3, [r7, #4]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d3c5      	bcc.n	8001b32 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
 8001bac:	797b      	ldrb	r3, [r7, #5]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d3ad      	bcc.n	8001b12 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <ssd1306_WriteChar+0x10c>)
 8001bb8:	881a      	ldrh	r2, [r3, #0]
 8001bba:	793b      	ldrb	r3, [r7, #4]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <ssd1306_WriteChar+0x10c>)
 8001bc4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3724      	adds	r7, #36	; 0x24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd90      	pop	{r4, r7, pc}
 8001bd0:	20000724 	.word	0x20000724

08001bd4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	1d38      	adds	r0, r7, #4
 8001bde:	e880 0006 	stmia.w	r0, {r1, r2}
 8001be2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001be4:	e012      	b.n	8001c0c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	7818      	ldrb	r0, [r3, #0]
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	1d3a      	adds	r2, r7, #4
 8001bee:	ca06      	ldmia	r2, {r1, r2}
 8001bf0:	f7ff ff68 	bl	8001ac4 <ssd1306_WriteChar>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d002      	beq.n	8001c06 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	e008      	b.n	8001c18 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e8      	bne.n	8001be6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	781b      	ldrb	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	460a      	mov	r2, r1
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <ssd1306_SetCursor+0x2c>)
 8001c36:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001c38:	79bb      	ldrb	r3, [r7, #6]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <ssd1306_SetCursor+0x2c>)
 8001c3e:	805a      	strh	r2, [r3, #2]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000724 	.word	0x20000724

08001c50 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b089      	sub	sp, #36	; 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4604      	mov	r4, r0
 8001c58:	4608      	mov	r0, r1
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4623      	mov	r3, r4
 8001c60:	71fb      	strb	r3, [r7, #7]
 8001c62:	4603      	mov	r3, r0
 8001c64:	71bb      	strb	r3, [r7, #6]
 8001c66:	460b      	mov	r3, r1
 8001c68:	717b      	strb	r3, [r7, #5]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8001c6e:	797a      	ldrb	r2, [r7, #5]
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bfb8      	it	lt
 8001c78:	425b      	neglt	r3, r3
 8001c7a:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8001c7c:	793a      	ldrb	r2, [r7, #4]
 8001c7e:	79bb      	ldrb	r3, [r7, #6]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	bfb8      	it	lt
 8001c86:	425b      	neglt	r3, r3
 8001c88:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8001c8a:	79fa      	ldrb	r2, [r7, #7]
 8001c8c:	797b      	ldrb	r3, [r7, #5]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d201      	bcs.n	8001c96 <ssd1306_Line+0x46>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e001      	b.n	8001c9a <ssd1306_Line+0x4a>
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8001c9c:	79ba      	ldrb	r2, [r7, #6]
 8001c9e:	793b      	ldrb	r3, [r7, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d201      	bcs.n	8001ca8 <ssd1306_Line+0x58>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e001      	b.n	8001cac <ssd1306_Line+0x5c>
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cac:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8001cb6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001cba:	7939      	ldrb	r1, [r7, #4]
 8001cbc:	797b      	ldrb	r3, [r7, #5]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff feae 	bl	8001a20 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8001cc4:	e024      	b.n	8001d10 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8001cc6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001cca:	79b9      	ldrb	r1, [r7, #6]
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fea6 	bl	8001a20 <ssd1306_DrawPixel>
    error2 = error * 2;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	425b      	negs	r3, r3
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dd08      	ble.n	8001cf6 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	da08      	bge.n	8001d10 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	4413      	add	r3, r2
 8001d04:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	79bb      	ldrb	r3, [r7, #6]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8001d10:	79fa      	ldrb	r2, [r7, #7]
 8001d12:	797b      	ldrb	r3, [r7, #5]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d1d6      	bne.n	8001cc6 <ssd1306_Line+0x76>
 8001d18:	79ba      	ldrb	r2, [r7, #6]
 8001d1a:	793b      	ldrb	r3, [r7, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d1d2      	bne.n	8001cc6 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8001d20:	bf00      	nop
}
 8001d22:	3724      	adds	r7, #36	; 0x24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd90      	pop	{r4, r7, pc}

08001d28 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001d32:	2381      	movs	r3, #129	; 0x81
 8001d34:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fd6f 	bl	800181c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fd6b 	bl	800181c <ssd1306_WriteCommand>
}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001d60:	23af      	movs	r3, #175	; 0xaf
 8001d62:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <ssd1306_SetDisplayOn+0x38>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	715a      	strb	r2, [r3, #5]
 8001d6a:	e004      	b.n	8001d76 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001d6c:	23ae      	movs	r3, #174	; 0xae
 8001d6e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <ssd1306_SetDisplayOn+0x38>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fd4f 	bl	800181c <ssd1306_WriteCommand>
}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000724 	.word	0x20000724

08001d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_MspInit+0x5c>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <HAL_MspInit+0x5c>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6193      	str	r3, [r2, #24]
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_MspInit+0x5c>)
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_MspInit+0x5c>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <HAL_MspInit+0x5c>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db4:	61d3      	str	r3, [r2, #28]
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <HAL_MspInit+0x5c>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_MspInit+0x60>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	4a04      	ldr	r2, [pc, #16]	; (8001dec <HAL_MspInit+0x60>)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40010000 	.word	0x40010000

08001df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <HardFault_Handler+0x4>

08001e02 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <MemManage_Handler+0x4>

08001e08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <BusFault_Handler+0x4>

08001e0e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <UsageFault_Handler+0x4>

08001e14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e3c:	f000 f9ec 	bl	8002218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001e48:	2004      	movs	r0, #4
 8001e4a:	f000 fe2f 	bl	8002aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <DMA1_Channel5_IRQHandler+0x10>)
 8001e5a:	f000 fb85 	bl	8002568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200002e0 	.word	0x200002e0

08001e68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
	return 1;
 8001e6c:	2301      	movs	r3, #1
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <_kill>:

int _kill(int pid, int sig)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e80:	f002 f996 	bl	80041b0 <__errno>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2216      	movs	r2, #22
 8001e88:	601a      	str	r2, [r3, #0]
	return -1;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_exit>:

void _exit (int status)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ffe7 	bl	8001e76 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ea8:	e7fe      	b.n	8001ea8 <_exit+0x12>

08001eaa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	e00a      	b.n	8001ed2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ebc:	f3af 8000 	nop.w
 8001ec0:	4601      	mov	r1, r0
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	60ba      	str	r2, [r7, #8]
 8001ec8:	b2ca      	uxtb	r2, r1
 8001eca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	dbf0      	blt.n	8001ebc <_read+0x12>
	}

return len;
 8001eda:	687b      	ldr	r3, [r7, #4]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	e009      	b.n	8001f0a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	60ba      	str	r2, [r7, #8]
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	dbf1      	blt.n	8001ef6 <_write+0x12>
	}
	return len;
 8001f12:	687b      	ldr	r3, [r7, #4]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_close>:

int _close(int file)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	return -1;
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f42:	605a      	str	r2, [r3, #4]
	return 0;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <_isatty>:

int _isatty(int file)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	return 1;
 8001f58:	2301      	movs	r3, #1
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f84:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <_sbrk+0x5c>)
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <_sbrk+0x60>)
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <_sbrk+0x64>)
 8001f9a:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <_sbrk+0x68>)
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d207      	bcs.n	8001fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fac:	f002 f900 	bl	80041b0 <__errno>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fba:	e009      	b.n	8001fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <_sbrk+0x64>)
 8001fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20005000 	.word	0x20005000
 8001fdc:	00000400 	.word	0x00000400
 8001fe0:	2000072c 	.word	0x2000072c
 8001fe4:	20000790 	.word	0x20000790

08001fe8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08c      	sub	sp, #48	; 0x30
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ffa:	f107 030c 	add.w	r3, r7, #12
 8001ffe:	2224      	movs	r2, #36	; 0x24
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f002 f926 	bl	8004254 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002010:	4b20      	ldr	r3, [pc, #128]	; (8002094 <MX_TIM3_Init+0xa0>)
 8002012:	4a21      	ldr	r2, [pc, #132]	; (8002098 <MX_TIM3_Init+0xa4>)
 8002014:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002016:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <MX_TIM3_Init+0xa0>)
 8002018:	2201      	movs	r2, #1
 800201a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <MX_TIM3_Init+0xa0>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002022:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <MX_TIM3_Init+0xa0>)
 8002024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002028:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <MX_TIM3_Init+0xa0>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <MX_TIM3_Init+0xa0>)
 8002032:	2280      	movs	r2, #128	; 0x80
 8002034:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002036:	2301      	movs	r3, #1
 8002038:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800203e:	2301      	movs	r3, #1
 8002040:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800204a:	2300      	movs	r3, #0
 800204c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800204e:	2301      	movs	r3, #1
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002052:	2300      	movs	r3, #0
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800205a:	f107 030c 	add.w	r3, r7, #12
 800205e:	4619      	mov	r1, r3
 8002060:	480c      	ldr	r0, [pc, #48]	; (8002094 <MX_TIM3_Init+0xa0>)
 8002062:	f001 fe91 	bl	8003d88 <HAL_TIM_Encoder_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800206c:	f7ff fa9f 	bl	80015ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002070:	2300      	movs	r3, #0
 8002072:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	4619      	mov	r1, r3
 800207c:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_TIM3_Init+0xa0>)
 800207e:	f002 f839 	bl	80040f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002088:	f7ff fa91 	bl	80015ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800208c:	bf00      	nop
 800208e:	3730      	adds	r7, #48	; 0x30
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000730 	.word	0x20000730
 8002098:	40000400 	.word	0x40000400

0800209c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1e      	ldr	r2, [pc, #120]	; (8002130 <HAL_TIM_Encoder_MspInit+0x94>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d135      	bne.n	8002128 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_TIM_Encoder_MspInit+0x98>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	4a1c      	ldr	r2, [pc, #112]	; (8002134 <HAL_TIM_Encoder_MspInit+0x98>)
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	61d3      	str	r3, [r2, #28]
 80020c8:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <HAL_TIM_Encoder_MspInit+0x98>)
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d4:	4b17      	ldr	r3, [pc, #92]	; (8002134 <HAL_TIM_Encoder_MspInit+0x98>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	4a16      	ldr	r2, [pc, #88]	; (8002134 <HAL_TIM_Encoder_MspInit+0x98>)
 80020da:	f043 0308 	orr.w	r3, r3, #8
 80020de:	6193      	str	r3, [r2, #24]
 80020e0:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_TIM_Encoder_MspInit+0x98>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020ec:	2330      	movs	r3, #48	; 0x30
 80020ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	4619      	mov	r1, r3
 80020fe:	480e      	ldr	r0, [pc, #56]	; (8002138 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002100:	f000 fb38 	bl	8002774 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002104:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_TIM_Encoder_MspInit+0xa0>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
 8002122:	4a06      	ldr	r2, [pc, #24]	; (800213c <HAL_TIM_Encoder_MspInit+0xa0>)
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }}
 8002128:	bf00      	nop
 800212a:	3728      	adds	r7, #40	; 0x28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40000400 	.word	0x40000400
 8002134:	40021000 	.word	0x40021000
 8002138:	40010c00 	.word	0x40010c00
 800213c:	40010000 	.word	0x40010000

08002140 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002140:	480c      	ldr	r0, [pc, #48]	; (8002174 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002142:	490d      	ldr	r1, [pc, #52]	; (8002178 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002144:	4a0d      	ldr	r2, [pc, #52]	; (800217c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002148:	e002      	b.n	8002150 <LoopCopyDataInit>

0800214a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800214a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800214c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214e:	3304      	adds	r3, #4

08002150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002154:	d3f9      	bcc.n	800214a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002158:	4c0a      	ldr	r4, [pc, #40]	; (8002184 <LoopFillZerobss+0x22>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800215c:	e001      	b.n	8002162 <LoopFillZerobss>

0800215e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002160:	3204      	adds	r2, #4

08002162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002164:	d3fb      	bcc.n	800215e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002166:	f7ff ff3f 	bl	8001fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800216a:	f002 f827 	bl	80041bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800216e:	f7ff f983 	bl	8001478 <main>
  bx lr
 8002172:	4770      	bx	lr
  ldr r0, =_sdata
 8002174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002178:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800217c:	08008164 	.word	0x08008164
  ldr r2, =_sbss
 8002180:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002184:	2000078c 	.word	0x2000078c

08002188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002188:	e7fe      	b.n	8002188 <ADC1_2_IRQHandler>
	...

0800218c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_Init+0x28>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <HAL_Init+0x28>)
 8002196:	f043 0310 	orr.w	r3, r3, #16
 800219a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219c:	2003      	movs	r0, #3
 800219e:	f000 f947 	bl	8002430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a2:	2000      	movs	r0, #0
 80021a4:	f000 f808 	bl	80021b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a8:	f7ff fdf0 	bl	8001d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40022000 	.word	0x40022000

080021b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_InitTick+0x54>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_InitTick+0x58>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f95f 	bl	800249a <HAL_SYSTICK_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00e      	b.n	8002204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b0f      	cmp	r3, #15
 80021ea:	d80a      	bhi.n	8002202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ec:	2200      	movs	r2, #0
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f000 f927 	bl	8002446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f8:	4a06      	ldr	r2, [pc, #24]	; (8002214 <HAL_InitTick+0x5c>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000010 	.word	0x20000010
 8002210:	20000018 	.word	0x20000018
 8002214:	20000014 	.word	0x20000014

08002218 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_IncTick+0x1c>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_IncTick+0x20>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4413      	add	r3, r2
 8002228:	4a03      	ldr	r2, [pc, #12]	; (8002238 <HAL_IncTick+0x20>)
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	20000018 	.word	0x20000018
 8002238:	20000778 	.word	0x20000778

0800223c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return uwTick;
 8002240:	4b02      	ldr	r3, [pc, #8]	; (800224c <HAL_GetTick+0x10>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	20000778 	.word	0x20000778

08002250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002258:	f7ff fff0 	bl	800223c <HAL_GetTick>
 800225c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002268:	d005      	beq.n	8002276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_Delay+0x44>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002276:	bf00      	nop
 8002278:	f7ff ffe0 	bl	800223c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	429a      	cmp	r2, r3
 8002286:	d8f7      	bhi.n	8002278 <HAL_Delay+0x28>
  {
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000018 	.word	0x20000018

08002298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b4:	4013      	ands	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ca:	4a04      	ldr	r2, [pc, #16]	; (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	60d3      	str	r3, [r2, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <__NVIC_GetPriorityGrouping+0x18>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	f003 0307 	and.w	r3, r3, #7
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	2b00      	cmp	r3, #0
 800230c:	db0b      	blt.n	8002326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	f003 021f 	and.w	r2, r3, #31
 8002314:	4906      	ldr	r1, [pc, #24]	; (8002330 <__NVIC_EnableIRQ+0x34>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	2001      	movs	r0, #1
 800231e:	fa00 f202 	lsl.w	r2, r0, r2
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db0a      	blt.n	800235e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	490c      	ldr	r1, [pc, #48]	; (8002380 <__NVIC_SetPriority+0x4c>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	0112      	lsls	r2, r2, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	440b      	add	r3, r1
 8002358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800235c:	e00a      	b.n	8002374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4908      	ldr	r1, [pc, #32]	; (8002384 <__NVIC_SetPriority+0x50>)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3b04      	subs	r3, #4
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	440b      	add	r3, r1
 8002372:	761a      	strb	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e100 	.word	0xe000e100
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f1c3 0307 	rsb	r3, r3, #7
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	bf28      	it	cs
 80023a6:	2304      	movcs	r3, #4
 80023a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d902      	bls.n	80023b8 <NVIC_EncodePriority+0x30>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3b03      	subs	r3, #3
 80023b6:	e000      	b.n	80023ba <NVIC_EncodePriority+0x32>
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	401a      	ands	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	43d9      	mvns	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	4313      	orrs	r3, r2
         );
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023fc:	d301      	bcc.n	8002402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fe:	2301      	movs	r3, #1
 8002400:	e00f      	b.n	8002422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <SysTick_Config+0x40>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240a:	210f      	movs	r1, #15
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f7ff ff90 	bl	8002334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <SysTick_Config+0x40>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <SysTick_Config+0x40>)
 800241c:	2207      	movs	r2, #7
 800241e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	e000e010 	.word	0xe000e010

08002430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff2d 	bl	8002298 <__NVIC_SetPriorityGrouping>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	4603      	mov	r3, r0
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002458:	f7ff ff42 	bl	80022e0 <__NVIC_GetPriorityGrouping>
 800245c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f7ff ff90 	bl	8002388 <NVIC_EncodePriority>
 8002468:	4602      	mov	r2, r0
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff5f 	bl	8002334 <__NVIC_SetPriority>
}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff35 	bl	80022fc <__NVIC_EnableIRQ>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ffa2 	bl	80023ec <SysTick_Config>
 80024a8:	4603      	mov	r3, r0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e043      	b.n	8002552 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b22      	ldr	r3, [pc, #136]	; (800255c <HAL_DMA_Init+0xa8>)
 80024d2:	4413      	add	r3, r2
 80024d4:	4a22      	ldr	r2, [pc, #136]	; (8002560 <HAL_DMA_Init+0xac>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	009a      	lsls	r2, r3, #2
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a1f      	ldr	r2, [pc, #124]	; (8002564 <HAL_DMA_Init+0xb0>)
 80024e6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002502:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800250c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002518:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002524:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	bffdfff8 	.word	0xbffdfff8
 8002560:	cccccccd 	.word	0xcccccccd
 8002564:	40020000 	.word	0x40020000

08002568 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	2204      	movs	r2, #4
 8002586:	409a      	lsls	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d04f      	beq.n	8002630 <HAL_DMA_IRQHandler+0xc8>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b00      	cmp	r3, #0
 8002598:	d04a      	beq.n	8002630 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0320 	and.w	r3, r3, #32
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d107      	bne.n	80025b8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0204 	bic.w	r2, r2, #4
 80025b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a66      	ldr	r2, [pc, #408]	; (8002758 <HAL_DMA_IRQHandler+0x1f0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d029      	beq.n	8002616 <HAL_DMA_IRQHandler+0xae>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a65      	ldr	r2, [pc, #404]	; (800275c <HAL_DMA_IRQHandler+0x1f4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d022      	beq.n	8002612 <HAL_DMA_IRQHandler+0xaa>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a63      	ldr	r2, [pc, #396]	; (8002760 <HAL_DMA_IRQHandler+0x1f8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01a      	beq.n	800260c <HAL_DMA_IRQHandler+0xa4>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a62      	ldr	r2, [pc, #392]	; (8002764 <HAL_DMA_IRQHandler+0x1fc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d012      	beq.n	8002606 <HAL_DMA_IRQHandler+0x9e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a60      	ldr	r2, [pc, #384]	; (8002768 <HAL_DMA_IRQHandler+0x200>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00a      	beq.n	8002600 <HAL_DMA_IRQHandler+0x98>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a5f      	ldr	r2, [pc, #380]	; (800276c <HAL_DMA_IRQHandler+0x204>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d102      	bne.n	80025fa <HAL_DMA_IRQHandler+0x92>
 80025f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025f8:	e00e      	b.n	8002618 <HAL_DMA_IRQHandler+0xb0>
 80025fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80025fe:	e00b      	b.n	8002618 <HAL_DMA_IRQHandler+0xb0>
 8002600:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002604:	e008      	b.n	8002618 <HAL_DMA_IRQHandler+0xb0>
 8002606:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800260a:	e005      	b.n	8002618 <HAL_DMA_IRQHandler+0xb0>
 800260c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002610:	e002      	b.n	8002618 <HAL_DMA_IRQHandler+0xb0>
 8002612:	2340      	movs	r3, #64	; 0x40
 8002614:	e000      	b.n	8002618 <HAL_DMA_IRQHandler+0xb0>
 8002616:	2304      	movs	r3, #4
 8002618:	4a55      	ldr	r2, [pc, #340]	; (8002770 <HAL_DMA_IRQHandler+0x208>)
 800261a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8094 	beq.w	800274e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800262e:	e08e      	b.n	800274e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	2202      	movs	r2, #2
 8002636:	409a      	lsls	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d056      	beq.n	80026ee <HAL_DMA_IRQHandler+0x186>
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d051      	beq.n	80026ee <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0320 	and.w	r3, r3, #32
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10b      	bne.n	8002670 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 020a 	bic.w	r2, r2, #10
 8002666:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a38      	ldr	r2, [pc, #224]	; (8002758 <HAL_DMA_IRQHandler+0x1f0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d029      	beq.n	80026ce <HAL_DMA_IRQHandler+0x166>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a37      	ldr	r2, [pc, #220]	; (800275c <HAL_DMA_IRQHandler+0x1f4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d022      	beq.n	80026ca <HAL_DMA_IRQHandler+0x162>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a35      	ldr	r2, [pc, #212]	; (8002760 <HAL_DMA_IRQHandler+0x1f8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01a      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x15c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a34      	ldr	r2, [pc, #208]	; (8002764 <HAL_DMA_IRQHandler+0x1fc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d012      	beq.n	80026be <HAL_DMA_IRQHandler+0x156>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a32      	ldr	r2, [pc, #200]	; (8002768 <HAL_DMA_IRQHandler+0x200>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00a      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x150>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a31      	ldr	r2, [pc, #196]	; (800276c <HAL_DMA_IRQHandler+0x204>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d102      	bne.n	80026b2 <HAL_DMA_IRQHandler+0x14a>
 80026ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026b0:	e00e      	b.n	80026d0 <HAL_DMA_IRQHandler+0x168>
 80026b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026b6:	e00b      	b.n	80026d0 <HAL_DMA_IRQHandler+0x168>
 80026b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026bc:	e008      	b.n	80026d0 <HAL_DMA_IRQHandler+0x168>
 80026be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026c2:	e005      	b.n	80026d0 <HAL_DMA_IRQHandler+0x168>
 80026c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c8:	e002      	b.n	80026d0 <HAL_DMA_IRQHandler+0x168>
 80026ca:	2320      	movs	r3, #32
 80026cc:	e000      	b.n	80026d0 <HAL_DMA_IRQHandler+0x168>
 80026ce:	2302      	movs	r3, #2
 80026d0:	4a27      	ldr	r2, [pc, #156]	; (8002770 <HAL_DMA_IRQHandler+0x208>)
 80026d2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d034      	beq.n	800274e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026ec:	e02f      	b.n	800274e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	2208      	movs	r2, #8
 80026f4:	409a      	lsls	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d028      	beq.n	8002750 <HAL_DMA_IRQHandler+0x1e8>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d023      	beq.n	8002750 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 020e 	bic.w	r2, r2, #14
 8002716:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002720:	2101      	movs	r1, #1
 8002722:	fa01 f202 	lsl.w	r2, r1, r2
 8002726:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	2b00      	cmp	r3, #0
 8002744:	d004      	beq.n	8002750 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	4798      	blx	r3
    }
  }
  return;
 800274e:	bf00      	nop
 8002750:	bf00      	nop
}
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40020008 	.word	0x40020008
 800275c:	4002001c 	.word	0x4002001c
 8002760:	40020030 	.word	0x40020030
 8002764:	40020044 	.word	0x40020044
 8002768:	40020058 	.word	0x40020058
 800276c:	4002006c 	.word	0x4002006c
 8002770:	40020000 	.word	0x40020000

08002774 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002774:	b480      	push	{r7}
 8002776:	b08b      	sub	sp, #44	; 0x2c
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800277e:	2300      	movs	r3, #0
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002782:	2300      	movs	r3, #0
 8002784:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002786:	e169      	b.n	8002a5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002788:	2201      	movs	r2, #1
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	f040 8158 	bne.w	8002a56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4a9a      	ldr	r2, [pc, #616]	; (8002a14 <HAL_GPIO_Init+0x2a0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d05e      	beq.n	800286e <HAL_GPIO_Init+0xfa>
 80027b0:	4a98      	ldr	r2, [pc, #608]	; (8002a14 <HAL_GPIO_Init+0x2a0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d875      	bhi.n	80028a2 <HAL_GPIO_Init+0x12e>
 80027b6:	4a98      	ldr	r2, [pc, #608]	; (8002a18 <HAL_GPIO_Init+0x2a4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d058      	beq.n	800286e <HAL_GPIO_Init+0xfa>
 80027bc:	4a96      	ldr	r2, [pc, #600]	; (8002a18 <HAL_GPIO_Init+0x2a4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d86f      	bhi.n	80028a2 <HAL_GPIO_Init+0x12e>
 80027c2:	4a96      	ldr	r2, [pc, #600]	; (8002a1c <HAL_GPIO_Init+0x2a8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d052      	beq.n	800286e <HAL_GPIO_Init+0xfa>
 80027c8:	4a94      	ldr	r2, [pc, #592]	; (8002a1c <HAL_GPIO_Init+0x2a8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d869      	bhi.n	80028a2 <HAL_GPIO_Init+0x12e>
 80027ce:	4a94      	ldr	r2, [pc, #592]	; (8002a20 <HAL_GPIO_Init+0x2ac>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d04c      	beq.n	800286e <HAL_GPIO_Init+0xfa>
 80027d4:	4a92      	ldr	r2, [pc, #584]	; (8002a20 <HAL_GPIO_Init+0x2ac>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d863      	bhi.n	80028a2 <HAL_GPIO_Init+0x12e>
 80027da:	4a92      	ldr	r2, [pc, #584]	; (8002a24 <HAL_GPIO_Init+0x2b0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d046      	beq.n	800286e <HAL_GPIO_Init+0xfa>
 80027e0:	4a90      	ldr	r2, [pc, #576]	; (8002a24 <HAL_GPIO_Init+0x2b0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d85d      	bhi.n	80028a2 <HAL_GPIO_Init+0x12e>
 80027e6:	2b12      	cmp	r3, #18
 80027e8:	d82a      	bhi.n	8002840 <HAL_GPIO_Init+0xcc>
 80027ea:	2b12      	cmp	r3, #18
 80027ec:	d859      	bhi.n	80028a2 <HAL_GPIO_Init+0x12e>
 80027ee:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <HAL_GPIO_Init+0x80>)
 80027f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f4:	0800286f 	.word	0x0800286f
 80027f8:	08002849 	.word	0x08002849
 80027fc:	0800285b 	.word	0x0800285b
 8002800:	0800289d 	.word	0x0800289d
 8002804:	080028a3 	.word	0x080028a3
 8002808:	080028a3 	.word	0x080028a3
 800280c:	080028a3 	.word	0x080028a3
 8002810:	080028a3 	.word	0x080028a3
 8002814:	080028a3 	.word	0x080028a3
 8002818:	080028a3 	.word	0x080028a3
 800281c:	080028a3 	.word	0x080028a3
 8002820:	080028a3 	.word	0x080028a3
 8002824:	080028a3 	.word	0x080028a3
 8002828:	080028a3 	.word	0x080028a3
 800282c:	080028a3 	.word	0x080028a3
 8002830:	080028a3 	.word	0x080028a3
 8002834:	080028a3 	.word	0x080028a3
 8002838:	08002851 	.word	0x08002851
 800283c:	08002865 	.word	0x08002865
 8002840:	4a79      	ldr	r2, [pc, #484]	; (8002a28 <HAL_GPIO_Init+0x2b4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d013      	beq.n	800286e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002846:	e02c      	b.n	80028a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	623b      	str	r3, [r7, #32]
          break;
 800284e:	e029      	b.n	80028a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	3304      	adds	r3, #4
 8002856:	623b      	str	r3, [r7, #32]
          break;
 8002858:	e024      	b.n	80028a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	3308      	adds	r3, #8
 8002860:	623b      	str	r3, [r7, #32]
          break;
 8002862:	e01f      	b.n	80028a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	330c      	adds	r3, #12
 800286a:	623b      	str	r3, [r7, #32]
          break;
 800286c:	e01a      	b.n	80028a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002876:	2304      	movs	r3, #4
 8002878:	623b      	str	r3, [r7, #32]
          break;
 800287a:	e013      	b.n	80028a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d105      	bne.n	8002890 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002884:	2308      	movs	r3, #8
 8002886:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	611a      	str	r2, [r3, #16]
          break;
 800288e:	e009      	b.n	80028a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002890:	2308      	movs	r3, #8
 8002892:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	615a      	str	r2, [r3, #20]
          break;
 800289a:	e003      	b.n	80028a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800289c:	2300      	movs	r3, #0
 800289e:	623b      	str	r3, [r7, #32]
          break;
 80028a0:	e000      	b.n	80028a4 <HAL_GPIO_Init+0x130>
          break;
 80028a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2bff      	cmp	r3, #255	; 0xff
 80028a8:	d801      	bhi.n	80028ae <HAL_GPIO_Init+0x13a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	e001      	b.n	80028b2 <HAL_GPIO_Init+0x13e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3304      	adds	r3, #4
 80028b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2bff      	cmp	r3, #255	; 0xff
 80028b8:	d802      	bhi.n	80028c0 <HAL_GPIO_Init+0x14c>
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	e002      	b.n	80028c6 <HAL_GPIO_Init+0x152>
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	3b08      	subs	r3, #8
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	210f      	movs	r1, #15
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	401a      	ands	r2, r3
 80028d8:	6a39      	ldr	r1, [r7, #32]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	431a      	orrs	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 80b1 	beq.w	8002a56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028f4:	4b4d      	ldr	r3, [pc, #308]	; (8002a2c <HAL_GPIO_Init+0x2b8>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	4a4c      	ldr	r2, [pc, #304]	; (8002a2c <HAL_GPIO_Init+0x2b8>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6193      	str	r3, [r2, #24]
 8002900:	4b4a      	ldr	r3, [pc, #296]	; (8002a2c <HAL_GPIO_Init+0x2b8>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800290c:	4a48      	ldr	r2, [pc, #288]	; (8002a30 <HAL_GPIO_Init+0x2bc>)
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	089b      	lsrs	r3, r3, #2
 8002912:	3302      	adds	r3, #2
 8002914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002918:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	220f      	movs	r2, #15
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4013      	ands	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a40      	ldr	r2, [pc, #256]	; (8002a34 <HAL_GPIO_Init+0x2c0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d013      	beq.n	8002960 <HAL_GPIO_Init+0x1ec>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a3f      	ldr	r2, [pc, #252]	; (8002a38 <HAL_GPIO_Init+0x2c4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00d      	beq.n	800295c <HAL_GPIO_Init+0x1e8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a3e      	ldr	r2, [pc, #248]	; (8002a3c <HAL_GPIO_Init+0x2c8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d007      	beq.n	8002958 <HAL_GPIO_Init+0x1e4>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a3d      	ldr	r2, [pc, #244]	; (8002a40 <HAL_GPIO_Init+0x2cc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d101      	bne.n	8002954 <HAL_GPIO_Init+0x1e0>
 8002950:	2303      	movs	r3, #3
 8002952:	e006      	b.n	8002962 <HAL_GPIO_Init+0x1ee>
 8002954:	2304      	movs	r3, #4
 8002956:	e004      	b.n	8002962 <HAL_GPIO_Init+0x1ee>
 8002958:	2302      	movs	r3, #2
 800295a:	e002      	b.n	8002962 <HAL_GPIO_Init+0x1ee>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_GPIO_Init+0x1ee>
 8002960:	2300      	movs	r3, #0
 8002962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002964:	f002 0203 	and.w	r2, r2, #3
 8002968:	0092      	lsls	r2, r2, #2
 800296a:	4093      	lsls	r3, r2
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002972:	492f      	ldr	r1, [pc, #188]	; (8002a30 <HAL_GPIO_Init+0x2bc>)
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	3302      	adds	r3, #2
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d006      	beq.n	800299a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800298c:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	492c      	ldr	r1, [pc, #176]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	600b      	str	r3, [r1, #0]
 8002998:	e006      	b.n	80029a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800299a:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	4928      	ldr	r1, [pc, #160]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d006      	beq.n	80029c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	4922      	ldr	r1, [pc, #136]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]
 80029c0:	e006      	b.n	80029d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	491e      	ldr	r1, [pc, #120]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d006      	beq.n	80029ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	4918      	ldr	r1, [pc, #96]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	608b      	str	r3, [r1, #8]
 80029e8:	e006      	b.n	80029f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029ea:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	4914      	ldr	r1, [pc, #80]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d021      	beq.n	8002a48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	490e      	ldr	r1, [pc, #56]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60cb      	str	r3, [r1, #12]
 8002a10:	e021      	b.n	8002a56 <HAL_GPIO_Init+0x2e2>
 8002a12:	bf00      	nop
 8002a14:	10320000 	.word	0x10320000
 8002a18:	10310000 	.word	0x10310000
 8002a1c:	10220000 	.word	0x10220000
 8002a20:	10210000 	.word	0x10210000
 8002a24:	10120000 	.word	0x10120000
 8002a28:	10110000 	.word	0x10110000
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40010000 	.word	0x40010000
 8002a34:	40010800 	.word	0x40010800
 8002a38:	40010c00 	.word	0x40010c00
 8002a3c:	40011000 	.word	0x40011000
 8002a40:	40011400 	.word	0x40011400
 8002a44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_GPIO_Init+0x304>)
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	4909      	ldr	r1, [pc, #36]	; (8002a78 <HAL_GPIO_Init+0x304>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	3301      	adds	r3, #1
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	fa22 f303 	lsr.w	r3, r2, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f47f ae8e 	bne.w	8002788 <HAL_GPIO_Init+0x14>
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	372c      	adds	r7, #44	; 0x2c
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	40010400 	.word	0x40010400

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a98:	e003      	b.n	8002aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	041a      	lsls	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	611a      	str	r2, [r3, #16]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ac2:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fd61 	bl	8001592 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40010400 	.word	0x40010400

08002adc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e272      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8087 	beq.w	8002c0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002afc:	4b92      	ldr	r3, [pc, #584]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d00c      	beq.n	8002b22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b08:	4b8f      	ldr	r3, [pc, #572]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d112      	bne.n	8002b3a <HAL_RCC_OscConfig+0x5e>
 8002b14:	4b8c      	ldr	r3, [pc, #560]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b20:	d10b      	bne.n	8002b3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b22:	4b89      	ldr	r3, [pc, #548]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d06c      	beq.n	8002c08 <HAL_RCC_OscConfig+0x12c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d168      	bne.n	8002c08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e24c      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x76>
 8002b44:	4b80      	ldr	r3, [pc, #512]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a7f      	ldr	r2, [pc, #508]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	e02e      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd4>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x98>
 8002b5a:	4b7b      	ldr	r3, [pc, #492]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a7a      	ldr	r2, [pc, #488]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b78      	ldr	r3, [pc, #480]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a77      	ldr	r2, [pc, #476]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e01d      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd4>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0xbc>
 8002b7e:	4b72      	ldr	r3, [pc, #456]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a71      	ldr	r2, [pc, #452]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b6f      	ldr	r3, [pc, #444]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a6e      	ldr	r2, [pc, #440]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd4>
 8002b98:	4b6b      	ldr	r3, [pc, #428]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a6a      	ldr	r2, [pc, #424]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	4b68      	ldr	r3, [pc, #416]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a67      	ldr	r2, [pc, #412]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d013      	beq.n	8002be0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7ff fb40 	bl	800223c <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7ff fb3c 	bl	800223c <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	; 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e200      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd2:	4b5d      	ldr	r3, [pc, #372]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0xe4>
 8002bde:	e014      	b.n	8002c0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7ff fb2c 	bl	800223c <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7ff fb28 	bl	800223c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e1ec      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfa:	4b53      	ldr	r3, [pc, #332]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x10c>
 8002c06:	e000      	b.n	8002c0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d063      	beq.n	8002cde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c16:	4b4c      	ldr	r3, [pc, #304]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00b      	beq.n	8002c3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c22:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d11c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x18c>
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d116      	bne.n	8002c68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3a:	4b43      	ldr	r3, [pc, #268]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_RCC_OscConfig+0x176>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e1c0      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c52:	4b3d      	ldr	r3, [pc, #244]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4939      	ldr	r1, [pc, #228]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c66:	e03a      	b.n	8002cde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d020      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c70:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <HAL_RCC_OscConfig+0x270>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7ff fae1 	bl	800223c <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c7e:	f7ff fadd 	bl	800223c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e1a1      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c90:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9c:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4927      	ldr	r1, [pc, #156]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	600b      	str	r3, [r1, #0]
 8002cb0:	e015      	b.n	8002cde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cb2:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <HAL_RCC_OscConfig+0x270>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7ff fac0 	bl	800223c <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc0:	f7ff fabc 	bl	800223c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e180      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd2:	4b1d      	ldr	r3, [pc, #116]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d03a      	beq.n	8002d60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d019      	beq.n	8002d26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cf2:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf8:	f7ff faa0 	bl	800223c <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d00:	f7ff fa9c 	bl	800223c <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e160      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d1e:	2001      	movs	r0, #1
 8002d20:	f000 faa8 	bl	8003274 <RCC_Delay>
 8002d24:	e01c      	b.n	8002d60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <HAL_RCC_OscConfig+0x274>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2c:	f7ff fa86 	bl	800223c <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d32:	e00f      	b.n	8002d54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d34:	f7ff fa82 	bl	800223c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d908      	bls.n	8002d54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e146      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4f8>
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	42420000 	.word	0x42420000
 8002d50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d54:	4b92      	ldr	r3, [pc, #584]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1e9      	bne.n	8002d34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80a6 	beq.w	8002eba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d72:	4b8b      	ldr	r3, [pc, #556]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10d      	bne.n	8002d9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7e:	4b88      	ldr	r3, [pc, #544]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	4a87      	ldr	r2, [pc, #540]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d88:	61d3      	str	r3, [r2, #28]
 8002d8a:	4b85      	ldr	r3, [pc, #532]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d96:	2301      	movs	r3, #1
 8002d98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9a:	4b82      	ldr	r3, [pc, #520]	; (8002fa4 <HAL_RCC_OscConfig+0x4c8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d118      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002da6:	4b7f      	ldr	r3, [pc, #508]	; (8002fa4 <HAL_RCC_OscConfig+0x4c8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a7e      	ldr	r2, [pc, #504]	; (8002fa4 <HAL_RCC_OscConfig+0x4c8>)
 8002dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db2:	f7ff fa43 	bl	800223c <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dba:	f7ff fa3f 	bl	800223c <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b64      	cmp	r3, #100	; 0x64
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e103      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dcc:	4b75      	ldr	r3, [pc, #468]	; (8002fa4 <HAL_RCC_OscConfig+0x4c8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d106      	bne.n	8002dee <HAL_RCC_OscConfig+0x312>
 8002de0:	4b6f      	ldr	r3, [pc, #444]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	4a6e      	ldr	r2, [pc, #440]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	6213      	str	r3, [r2, #32]
 8002dec:	e02d      	b.n	8002e4a <HAL_RCC_OscConfig+0x36e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x334>
 8002df6:	4b6a      	ldr	r3, [pc, #424]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	4a69      	ldr	r2, [pc, #420]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6213      	str	r3, [r2, #32]
 8002e02:	4b67      	ldr	r3, [pc, #412]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	4a66      	ldr	r2, [pc, #408]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	6213      	str	r3, [r2, #32]
 8002e0e:	e01c      	b.n	8002e4a <HAL_RCC_OscConfig+0x36e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b05      	cmp	r3, #5
 8002e16:	d10c      	bne.n	8002e32 <HAL_RCC_OscConfig+0x356>
 8002e18:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	4a60      	ldr	r2, [pc, #384]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002e1e:	f043 0304 	orr.w	r3, r3, #4
 8002e22:	6213      	str	r3, [r2, #32]
 8002e24:	4b5e      	ldr	r3, [pc, #376]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4a5d      	ldr	r2, [pc, #372]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6213      	str	r3, [r2, #32]
 8002e30:	e00b      	b.n	8002e4a <HAL_RCC_OscConfig+0x36e>
 8002e32:	4b5b      	ldr	r3, [pc, #364]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	4a5a      	ldr	r2, [pc, #360]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6213      	str	r3, [r2, #32]
 8002e3e:	4b58      	ldr	r3, [pc, #352]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	4a57      	ldr	r2, [pc, #348]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	f023 0304 	bic.w	r3, r3, #4
 8002e48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d015      	beq.n	8002e7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e52:	f7ff f9f3 	bl	800223c <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e58:	e00a      	b.n	8002e70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7ff f9ef 	bl	800223c <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e0b1      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e70:	4b4b      	ldr	r3, [pc, #300]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0ee      	beq.n	8002e5a <HAL_RCC_OscConfig+0x37e>
 8002e7c:	e014      	b.n	8002ea8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7e:	f7ff f9dd 	bl	800223c <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e84:	e00a      	b.n	8002e9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e86:	f7ff f9d9 	bl	800223c <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e09b      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9c:	4b40      	ldr	r3, [pc, #256]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1ee      	bne.n	8002e86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d105      	bne.n	8002eba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eae:	4b3c      	ldr	r3, [pc, #240]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4a3b      	ldr	r2, [pc, #236]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 8087 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ec4:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d061      	beq.n	8002f94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d146      	bne.n	8002f66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed8:	4b33      	ldr	r3, [pc, #204]	; (8002fa8 <HAL_RCC_OscConfig+0x4cc>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7ff f9ad 	bl	800223c <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee6:	f7ff f9a9 	bl	800223c <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e06d      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef8:	4b29      	ldr	r3, [pc, #164]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f0      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0c:	d108      	bne.n	8002f20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f0e:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	4921      	ldr	r1, [pc, #132]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f20:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a19      	ldr	r1, [r3, #32]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	430b      	orrs	r3, r1
 8002f32:	491b      	ldr	r1, [pc, #108]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <HAL_RCC_OscConfig+0x4cc>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3e:	f7ff f97d 	bl	800223c <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f46:	f7ff f979 	bl	800223c <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e03d      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x46a>
 8002f64:	e035      	b.n	8002fd2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <HAL_RCC_OscConfig+0x4cc>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7ff f966 	bl	800223c <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f74:	f7ff f962 	bl	800223c <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e026      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x498>
 8002f92:	e01e      	b.n	8002fd2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d107      	bne.n	8002fac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e019      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4f8>
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_RCC_OscConfig+0x500>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d106      	bne.n	8002fce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40021000 	.word	0x40021000

08002fe0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0d0      	b.n	8003196 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff4:	4b6a      	ldr	r3, [pc, #424]	; (80031a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d910      	bls.n	8003024 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003002:	4b67      	ldr	r3, [pc, #412]	; (80031a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 0207 	bic.w	r2, r3, #7
 800300a:	4965      	ldr	r1, [pc, #404]	; (80031a0 <HAL_RCC_ClockConfig+0x1c0>)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003012:	4b63      	ldr	r3, [pc, #396]	; (80031a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0b8      	b.n	8003196 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d020      	beq.n	8003072 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800303c:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4a58      	ldr	r2, [pc, #352]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003046:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003054:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a52      	ldr	r2, [pc, #328]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800305e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003060:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	494d      	ldr	r1, [pc, #308]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d040      	beq.n	8003100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	4b47      	ldr	r3, [pc, #284]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d115      	bne.n	80030be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e07f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309e:	4b41      	ldr	r3, [pc, #260]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e073      	b.n	8003196 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ae:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e06b      	b.n	8003196 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030be:	4b39      	ldr	r3, [pc, #228]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f023 0203 	bic.w	r2, r3, #3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4936      	ldr	r1, [pc, #216]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d0:	f7ff f8b4 	bl	800223c <HAL_GetTick>
 80030d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d8:	f7ff f8b0 	bl	800223c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e053      	b.n	8003196 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 020c 	and.w	r2, r3, #12
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d1eb      	bne.n	80030d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003100:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d210      	bcs.n	8003130 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310e:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 0207 	bic.w	r2, r3, #7
 8003116:	4922      	ldr	r1, [pc, #136]	; (80031a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	4313      	orrs	r3, r2
 800311c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e032      	b.n	8003196 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4916      	ldr	r1, [pc, #88]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	4313      	orrs	r3, r2
 800314c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	490e      	ldr	r1, [pc, #56]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 800316a:	4313      	orrs	r3, r2
 800316c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800316e:	f000 f821 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003172:	4602      	mov	r2, r0
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	490a      	ldr	r1, [pc, #40]	; (80031a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003180:	5ccb      	ldrb	r3, [r1, r3]
 8003182:	fa22 f303 	lsr.w	r3, r2, r3
 8003186:	4a09      	ldr	r2, [pc, #36]	; (80031ac <HAL_RCC_ClockConfig+0x1cc>)
 8003188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_RCC_ClockConfig+0x1d0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff f812 	bl	80021b8 <HAL_InitTick>

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40022000 	.word	0x40022000
 80031a4:	40021000 	.word	0x40021000
 80031a8:	08007d70 	.word	0x08007d70
 80031ac:	20000010 	.word	0x20000010
 80031b0:	20000014 	.word	0x20000014

080031b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	b490      	push	{r4, r7}
 80031b6:	b08a      	sub	sp, #40	; 0x28
 80031b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031ba:	4b29      	ldr	r3, [pc, #164]	; (8003260 <HAL_RCC_GetSysClockFreq+0xac>)
 80031bc:	1d3c      	adds	r4, r7, #4
 80031be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031c4:	f240 2301 	movw	r3, #513	; 0x201
 80031c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	2300      	movs	r3, #0
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	2300      	movs	r3, #0
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031de:	4b21      	ldr	r3, [pc, #132]	; (8003264 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d002      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x40>
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d003      	beq.n	80031fa <HAL_RCC_GetSysClockFreq+0x46>
 80031f2:	e02b      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031f4:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031f6:	623b      	str	r3, [r7, #32]
      break;
 80031f8:	e02b      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	0c9b      	lsrs	r3, r3, #18
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	3328      	adds	r3, #40	; 0x28
 8003204:	443b      	add	r3, r7
 8003206:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800320a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d012      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003216:	4b13      	ldr	r3, [pc, #76]	; (8003264 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	0c5b      	lsrs	r3, r3, #17
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	3328      	adds	r3, #40	; 0x28
 8003222:	443b      	add	r3, r7
 8003224:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003228:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <HAL_RCC_GetSysClockFreq+0xb4>)
 800322e:	fb03 f202 	mul.w	r2, r3, r2
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
 800323a:	e004      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	4a0b      	ldr	r2, [pc, #44]	; (800326c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003240:	fb02 f303 	mul.w	r3, r2, r3
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	623b      	str	r3, [r7, #32]
      break;
 800324a:	e002      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800324c:	4b08      	ldr	r3, [pc, #32]	; (8003270 <HAL_RCC_GetSysClockFreq+0xbc>)
 800324e:	623b      	str	r3, [r7, #32]
      break;
 8003250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003252:	6a3b      	ldr	r3, [r7, #32]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3728      	adds	r7, #40	; 0x28
 8003258:	46bd      	mov	sp, r7
 800325a:	bc90      	pop	{r4, r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	08007004 	.word	0x08007004
 8003264:	40021000 	.word	0x40021000
 8003268:	00f42400 	.word	0x00f42400
 800326c:	003d0900 	.word	0x003d0900
 8003270:	007a1200 	.word	0x007a1200

08003274 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <RCC_Delay+0x34>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <RCC_Delay+0x38>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	0a5b      	lsrs	r3, r3, #9
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003290:	bf00      	nop
  }
  while (Delay --);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1e5a      	subs	r2, r3, #1
 8003296:	60fa      	str	r2, [r7, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f9      	bne.n	8003290 <RCC_Delay+0x1c>
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr
 80032a8:	20000010 	.word	0x20000010
 80032ac:	10624dd3 	.word	0x10624dd3

080032b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e076      	b.n	80033b0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d108      	bne.n	80032dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032d2:	d009      	beq.n	80032e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	61da      	str	r2, [r3, #28]
 80032da:	e005      	b.n	80032e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fe f9c8 	bl	8001698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336c:	ea42 0103 	orr.w	r1, r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	0c1a      	lsrs	r2, r3, #16
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f002 0204 	and.w	r2, r2, #4
 800338e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800339e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_SPI_Transmit+0x22>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e126      	b.n	8003628 <HAL_SPI_Transmit+0x270>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033e2:	f7fe ff2b 	bl	800223c <HAL_GetTick>
 80033e6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d002      	beq.n	80033fe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
 80033fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033fc:	e10b      	b.n	8003616 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_SPI_Transmit+0x52>
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d102      	bne.n	8003410 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800340e:	e102      	b.n	8003616 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2203      	movs	r2, #3
 8003414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	88fa      	ldrh	r2, [r7, #6]
 8003428:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	88fa      	ldrh	r2, [r7, #6]
 800342e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003456:	d10f      	bne.n	8003478 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003466:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003476:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	2b40      	cmp	r3, #64	; 0x40
 8003484:	d007      	beq.n	8003496 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003494:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800349e:	d14b      	bne.n	8003538 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_SPI_Transmit+0xf6>
 80034a8:	8afb      	ldrh	r3, [r7, #22]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d13e      	bne.n	800352c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	881a      	ldrh	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	1c9a      	adds	r2, r3, #2
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034d2:	e02b      	b.n	800352c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d112      	bne.n	8003508 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	881a      	ldrh	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	1c9a      	adds	r2, r3, #2
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	86da      	strh	r2, [r3, #54]	; 0x36
 8003506:	e011      	b.n	800352c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003508:	f7fe fe98 	bl	800223c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d803      	bhi.n	8003520 <HAL_SPI_Transmit+0x168>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351e:	d102      	bne.n	8003526 <HAL_SPI_Transmit+0x16e>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	77fb      	strb	r3, [r7, #31]
          goto error;
 800352a:	e074      	b.n	8003616 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1ce      	bne.n	80034d4 <HAL_SPI_Transmit+0x11c>
 8003536:	e04c      	b.n	80035d2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <HAL_SPI_Transmit+0x18e>
 8003540:	8afb      	ldrh	r3, [r7, #22]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d140      	bne.n	80035c8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	330c      	adds	r3, #12
 8003550:	7812      	ldrb	r2, [r2, #0]
 8003552:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800356c:	e02c      	b.n	80035c8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b02      	cmp	r3, #2
 800357a:	d113      	bne.n	80035a4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	330c      	adds	r3, #12
 8003586:	7812      	ldrb	r2, [r2, #0]
 8003588:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80035a2:	e011      	b.n	80035c8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035a4:	f7fe fe4a 	bl	800223c <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d803      	bhi.n	80035bc <HAL_SPI_Transmit+0x204>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d102      	bne.n	80035c2 <HAL_SPI_Transmit+0x20a>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035c6:	e026      	b.n	8003616 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1cd      	bne.n	800356e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	6839      	ldr	r1, [r7, #0]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 fbb8 	bl	8003d4c <SPI_EndRxTxTransaction>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10a      	bne.n	8003606 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035f0:	2300      	movs	r3, #0
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	77fb      	strb	r3, [r7, #31]
 8003612:	e000      	b.n	8003616 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003614:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003626:	7ffb      	ldrb	r3, [r7, #31]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3720      	adds	r7, #32
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	4613      	mov	r3, r2
 800363e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800364c:	d112      	bne.n	8003674 <HAL_SPI_Receive+0x44>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10e      	bne.n	8003674 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2204      	movs	r2, #4
 800365a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800365e:	88fa      	ldrh	r2, [r7, #6]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f8f1 	bl	8003852 <HAL_SPI_TransmitReceive>
 8003670:	4603      	mov	r3, r0
 8003672:	e0ea      	b.n	800384a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_SPI_Receive+0x52>
 800367e:	2302      	movs	r3, #2
 8003680:	e0e3      	b.n	800384a <HAL_SPI_Receive+0x21a>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800368a:	f7fe fdd7 	bl	800223c <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d002      	beq.n	80036a2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800369c:	2302      	movs	r3, #2
 800369e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036a0:	e0ca      	b.n	8003838 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_SPI_Receive+0x7e>
 80036a8:	88fb      	ldrh	r3, [r7, #6]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036b2:	e0c1      	b.n	8003838 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2204      	movs	r2, #4
 80036b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	88fa      	ldrh	r2, [r7, #6]
 80036cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	88fa      	ldrh	r2, [r7, #6]
 80036d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fa:	d10f      	bne.n	800371c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800370a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800371a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d007      	beq.n	800373a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003738:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d162      	bne.n	8003808 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003742:	e02e      	b.n	80037a2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b01      	cmp	r3, #1
 8003750:	d115      	bne.n	800377e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f103 020c 	add.w	r2, r3, #12
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	7812      	ldrb	r2, [r2, #0]
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800377c:	e011      	b.n	80037a2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800377e:	f7fe fd5d 	bl	800223c <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d803      	bhi.n	8003796 <HAL_SPI_Receive+0x166>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d102      	bne.n	800379c <HAL_SPI_Receive+0x16c>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80037a0:	e04a      	b.n	8003838 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1cb      	bne.n	8003744 <HAL_SPI_Receive+0x114>
 80037ac:	e031      	b.n	8003812 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d113      	bne.n	80037e4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	b292      	uxth	r2, r2
 80037c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	1c9a      	adds	r2, r3, #2
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037e2:	e011      	b.n	8003808 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037e4:	f7fe fd2a 	bl	800223c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d803      	bhi.n	80037fc <HAL_SPI_Receive+0x1cc>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fa:	d102      	bne.n	8003802 <HAL_SPI_Receive+0x1d2>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d102      	bne.n	8003808 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003806:	e017      	b.n	8003838 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1cd      	bne.n	80037ae <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 fa46 	bl	8003ca8 <SPI_EndRxTransaction>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	75fb      	strb	r3, [r7, #23]
 8003834:	e000      	b.n	8003838 <HAL_SPI_Receive+0x208>
  }

error :
 8003836:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003848:	7dfb      	ldrb	r3, [r7, #23]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b08c      	sub	sp, #48	; 0x30
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003860:	2301      	movs	r3, #1
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_SPI_TransmitReceive+0x26>
 8003874:	2302      	movs	r3, #2
 8003876:	e18a      	b.n	8003b8e <HAL_SPI_TransmitReceive+0x33c>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003880:	f7fe fcdc 	bl	800223c <HAL_GetTick>
 8003884:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800388c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003896:	887b      	ldrh	r3, [r7, #2]
 8003898:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800389a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d00f      	beq.n	80038c2 <HAL_SPI_TransmitReceive+0x70>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038a8:	d107      	bne.n	80038ba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <HAL_SPI_TransmitReceive+0x68>
 80038b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d003      	beq.n	80038c2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80038ba:	2302      	movs	r3, #2
 80038bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038c0:	e15b      	b.n	8003b7a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_SPI_TransmitReceive+0x82>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_SPI_TransmitReceive+0x82>
 80038ce:	887b      	ldrh	r3, [r7, #2]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d103      	bne.n	80038dc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038da:	e14e      	b.n	8003b7a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d003      	beq.n	80038f0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2205      	movs	r2, #5
 80038ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	887a      	ldrh	r2, [r7, #2]
 8003900:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	887a      	ldrh	r2, [r7, #2]
 8003906:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	887a      	ldrh	r2, [r7, #2]
 8003912:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	887a      	ldrh	r2, [r7, #2]
 8003918:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d007      	beq.n	8003944 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003942:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800394c:	d178      	bne.n	8003a40 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <HAL_SPI_TransmitReceive+0x10a>
 8003956:	8b7b      	ldrh	r3, [r7, #26]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d166      	bne.n	8003a2a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	881a      	ldrh	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	1c9a      	adds	r2, r3, #2
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003980:	e053      	b.n	8003a2a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b02      	cmp	r3, #2
 800398e:	d11b      	bne.n	80039c8 <HAL_SPI_TransmitReceive+0x176>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d016      	beq.n	80039c8 <HAL_SPI_TransmitReceive+0x176>
 800399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399c:	2b01      	cmp	r3, #1
 800399e:	d113      	bne.n	80039c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	881a      	ldrh	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	1c9a      	adds	r2, r3, #2
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d119      	bne.n	8003a0a <HAL_SPI_TransmitReceive+0x1b8>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d014      	beq.n	8003a0a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	b292      	uxth	r2, r2
 80039ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	1c9a      	adds	r2, r3, #2
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a06:	2301      	movs	r3, #1
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a0a:	f7fe fc17 	bl	800223c <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d807      	bhi.n	8003a2a <HAL_SPI_TransmitReceive+0x1d8>
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d003      	beq.n	8003a2a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a28:	e0a7      	b.n	8003b7a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1a6      	bne.n	8003982 <HAL_SPI_TransmitReceive+0x130>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1a1      	bne.n	8003982 <HAL_SPI_TransmitReceive+0x130>
 8003a3e:	e07c      	b.n	8003b3a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <HAL_SPI_TransmitReceive+0x1fc>
 8003a48:	8b7b      	ldrh	r3, [r7, #26]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d16b      	bne.n	8003b26 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	330c      	adds	r3, #12
 8003a58:	7812      	ldrb	r2, [r2, #0]
 8003a5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a74:	e057      	b.n	8003b26 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d11c      	bne.n	8003abe <HAL_SPI_TransmitReceive+0x26c>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d017      	beq.n	8003abe <HAL_SPI_TransmitReceive+0x26c>
 8003a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d114      	bne.n	8003abe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	7812      	ldrb	r2, [r2, #0]
 8003aa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d119      	bne.n	8003b00 <HAL_SPI_TransmitReceive+0x2ae>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d014      	beq.n	8003b00 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003afc:	2301      	movs	r3, #1
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b00:	f7fe fb9c 	bl	800223c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d803      	bhi.n	8003b18 <HAL_SPI_TransmitReceive+0x2c6>
 8003b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b16:	d102      	bne.n	8003b1e <HAL_SPI_TransmitReceive+0x2cc>
 8003b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b24:	e029      	b.n	8003b7a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1a2      	bne.n	8003a76 <HAL_SPI_TransmitReceive+0x224>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d19d      	bne.n	8003a76 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f904 	bl	8003d4c <SPI_EndRxTxTransaction>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d006      	beq.n	8003b58 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003b56:	e010      	b.n	8003b7a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	e000      	b.n	8003b7a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003b78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3730      	adds	r7, #48	; 0x30
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ba8:	f7fe fb48 	bl	800223c <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bb8:	f7fe fb40 	bl	800223c <HAL_GetTick>
 8003bbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bbe:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	015b      	lsls	r3, r3, #5
 8003bc4:	0d1b      	lsrs	r3, r3, #20
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	fb02 f303 	mul.w	r3, r2, r3
 8003bcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bce:	e054      	b.n	8003c7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd6:	d050      	beq.n	8003c7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bd8:	f7fe fb30 	bl	800223c <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d902      	bls.n	8003bee <SPI_WaitFlagStateUntilTimeout+0x56>
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d13d      	bne.n	8003c6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c06:	d111      	bne.n	8003c2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c10:	d004      	beq.n	8003c1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1a:	d107      	bne.n	8003c2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c34:	d10f      	bne.n	8003c56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e017      	b.n	8003c9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4013      	ands	r3, r2
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	bf0c      	ite	eq
 8003c8a:	2301      	moveq	r3, #1
 8003c8c:	2300      	movne	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d19b      	bne.n	8003bd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3720      	adds	r7, #32
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000010 	.word	0x20000010

08003ca8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cbc:	d111      	bne.n	8003ce2 <SPI_EndRxTransaction+0x3a>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc6:	d004      	beq.n	8003cd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd0:	d107      	bne.n	8003ce2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cea:	d117      	bne.n	8003d1c <SPI_EndRxTransaction+0x74>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf4:	d112      	bne.n	8003d1c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2101      	movs	r1, #1
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f7ff ff49 	bl	8003b98 <SPI_WaitFlagStateUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01a      	beq.n	8003d42 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e013      	b.n	8003d44 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	2180      	movs	r1, #128	; 0x80
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff ff36 	bl	8003b98 <SPI_WaitFlagStateUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d007      	beq.n	8003d42 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e000      	b.n	8003d44 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2180      	movs	r1, #128	; 0x80
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f7ff ff18 	bl	8003b98 <SPI_WaitFlagStateUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d72:	f043 0220 	orr.w	r2, r3, #32
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e000      	b.n	8003d80 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e093      	b.n	8003ec4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d106      	bne.n	8003db6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7fe f973 	bl	800209c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2202      	movs	r2, #2
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dcc:	f023 0307 	bic.w	r3, r3, #7
 8003dd0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	f000 f903 	bl	8003fe8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0a:	f023 0303 	bic.w	r3, r3, #3
 8003e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e28:	f023 030c 	bic.w	r3, r3, #12
 8003e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	4313      	orrs	r3, r2
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	011a      	lsls	r2, r3, #4
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	031b      	lsls	r3, r3, #12
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	4313      	orrs	r3, r2
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003edc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ee4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ef4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d110      	bne.n	8003f1e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d102      	bne.n	8003f08 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f02:	7b7b      	ldrb	r3, [r7, #13]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d001      	beq.n	8003f0c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e069      	b.n	8003fe0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f1c:	e031      	b.n	8003f82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d110      	bne.n	8003f46 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f24:	7bbb      	ldrb	r3, [r7, #14]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d102      	bne.n	8003f30 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f2a:	7b3b      	ldrb	r3, [r7, #12]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d001      	beq.n	8003f34 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e055      	b.n	8003fe0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f44:	e01d      	b.n	8003f82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d108      	bne.n	8003f5e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f4c:	7bbb      	ldrb	r3, [r7, #14]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d105      	bne.n	8003f5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f52:	7b7b      	ldrb	r3, [r7, #13]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d102      	bne.n	8003f5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f58:	7b3b      	ldrb	r3, [r7, #12]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d001      	beq.n	8003f62 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e03e      	b.n	8003fe0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2202      	movs	r2, #2
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2202      	movs	r2, #2
 8003f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_TIM_Encoder_Start+0xc4>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d008      	beq.n	8003fa0 <HAL_TIM_Encoder_Start+0xd4>
 8003f8e:	e00f      	b.n	8003fb0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2201      	movs	r2, #1
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 f887 	bl	80040ac <TIM_CCxChannelCmd>
      break;
 8003f9e:	e016      	b.n	8003fce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	2104      	movs	r1, #4
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 f87f 	bl	80040ac <TIM_CCxChannelCmd>
      break;
 8003fae:	e00e      	b.n	8003fce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 f877 	bl	80040ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	2104      	movs	r1, #4
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f870 	bl	80040ac <TIM_CCxChannelCmd>
      break;
 8003fcc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0201 	orr.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a29      	ldr	r2, [pc, #164]	; (80040a0 <TIM_Base_SetConfig+0xb8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00b      	beq.n	8004018 <TIM_Base_SetConfig+0x30>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004006:	d007      	beq.n	8004018 <TIM_Base_SetConfig+0x30>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a26      	ldr	r2, [pc, #152]	; (80040a4 <TIM_Base_SetConfig+0xbc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_Base_SetConfig+0x30>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a25      	ldr	r2, [pc, #148]	; (80040a8 <TIM_Base_SetConfig+0xc0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d108      	bne.n	800402a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <TIM_Base_SetConfig+0xb8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00b      	beq.n	800404a <TIM_Base_SetConfig+0x62>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004038:	d007      	beq.n	800404a <TIM_Base_SetConfig+0x62>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a19      	ldr	r2, [pc, #100]	; (80040a4 <TIM_Base_SetConfig+0xbc>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d003      	beq.n	800404a <TIM_Base_SetConfig+0x62>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a18      	ldr	r2, [pc, #96]	; (80040a8 <TIM_Base_SetConfig+0xc0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d108      	bne.n	800405c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4313      	orrs	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a07      	ldr	r2, [pc, #28]	; (80040a0 <TIM_Base_SetConfig+0xb8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d103      	bne.n	8004090 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	615a      	str	r2, [r3, #20]
}
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40000800 	.word	0x40000800

080040ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	2201      	movs	r2, #1
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a1a      	ldr	r2, [r3, #32]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	43db      	mvns	r3, r3
 80040ce:	401a      	ands	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1a      	ldr	r2, [r3, #32]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	fa01 f303 	lsl.w	r3, r1, r3
 80040e4:	431a      	orrs	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004108:	2302      	movs	r3, #2
 800410a:	e046      	b.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00e      	beq.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004158:	d009      	beq.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a12      	ldr	r2, [pc, #72]	; (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a10      	ldr	r2, [pc, #64]	; (80041ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d10c      	bne.n	8004188 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	4313      	orrs	r3, r2
 800417e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800

080041b0 <__errno>:
 80041b0:	4b01      	ldr	r3, [pc, #4]	; (80041b8 <__errno+0x8>)
 80041b2:	6818      	ldr	r0, [r3, #0]
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	2000001c 	.word	0x2000001c

080041bc <__libc_init_array>:
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	2600      	movs	r6, #0
 80041c0:	4d0c      	ldr	r5, [pc, #48]	; (80041f4 <__libc_init_array+0x38>)
 80041c2:	4c0d      	ldr	r4, [pc, #52]	; (80041f8 <__libc_init_array+0x3c>)
 80041c4:	1b64      	subs	r4, r4, r5
 80041c6:	10a4      	asrs	r4, r4, #2
 80041c8:	42a6      	cmp	r6, r4
 80041ca:	d109      	bne.n	80041e0 <__libc_init_array+0x24>
 80041cc:	f002 fefc 	bl	8006fc8 <_init>
 80041d0:	2600      	movs	r6, #0
 80041d2:	4d0a      	ldr	r5, [pc, #40]	; (80041fc <__libc_init_array+0x40>)
 80041d4:	4c0a      	ldr	r4, [pc, #40]	; (8004200 <__libc_init_array+0x44>)
 80041d6:	1b64      	subs	r4, r4, r5
 80041d8:	10a4      	asrs	r4, r4, #2
 80041da:	42a6      	cmp	r6, r4
 80041dc:	d105      	bne.n	80041ea <__libc_init_array+0x2e>
 80041de:	bd70      	pop	{r4, r5, r6, pc}
 80041e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e4:	4798      	blx	r3
 80041e6:	3601      	adds	r6, #1
 80041e8:	e7ee      	b.n	80041c8 <__libc_init_array+0xc>
 80041ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ee:	4798      	blx	r3
 80041f0:	3601      	adds	r6, #1
 80041f2:	e7f2      	b.n	80041da <__libc_init_array+0x1e>
 80041f4:	0800815c 	.word	0x0800815c
 80041f8:	0800815c 	.word	0x0800815c
 80041fc:	0800815c 	.word	0x0800815c
 8004200:	08008160 	.word	0x08008160

08004204 <memcpy>:
 8004204:	440a      	add	r2, r1
 8004206:	4291      	cmp	r1, r2
 8004208:	f100 33ff 	add.w	r3, r0, #4294967295
 800420c:	d100      	bne.n	8004210 <memcpy+0xc>
 800420e:	4770      	bx	lr
 8004210:	b510      	push	{r4, lr}
 8004212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004216:	4291      	cmp	r1, r2
 8004218:	f803 4f01 	strb.w	r4, [r3, #1]!
 800421c:	d1f9      	bne.n	8004212 <memcpy+0xe>
 800421e:	bd10      	pop	{r4, pc}

08004220 <memmove>:
 8004220:	4288      	cmp	r0, r1
 8004222:	b510      	push	{r4, lr}
 8004224:	eb01 0402 	add.w	r4, r1, r2
 8004228:	d902      	bls.n	8004230 <memmove+0x10>
 800422a:	4284      	cmp	r4, r0
 800422c:	4623      	mov	r3, r4
 800422e:	d807      	bhi.n	8004240 <memmove+0x20>
 8004230:	1e43      	subs	r3, r0, #1
 8004232:	42a1      	cmp	r1, r4
 8004234:	d008      	beq.n	8004248 <memmove+0x28>
 8004236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800423a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800423e:	e7f8      	b.n	8004232 <memmove+0x12>
 8004240:	4601      	mov	r1, r0
 8004242:	4402      	add	r2, r0
 8004244:	428a      	cmp	r2, r1
 8004246:	d100      	bne.n	800424a <memmove+0x2a>
 8004248:	bd10      	pop	{r4, pc}
 800424a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800424e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004252:	e7f7      	b.n	8004244 <memmove+0x24>

08004254 <memset>:
 8004254:	4603      	mov	r3, r0
 8004256:	4402      	add	r2, r0
 8004258:	4293      	cmp	r3, r2
 800425a:	d100      	bne.n	800425e <memset+0xa>
 800425c:	4770      	bx	lr
 800425e:	f803 1b01 	strb.w	r1, [r3], #1
 8004262:	e7f9      	b.n	8004258 <memset+0x4>

08004264 <__cvt>:
 8004264:	2b00      	cmp	r3, #0
 8004266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800426a:	461f      	mov	r7, r3
 800426c:	bfbb      	ittet	lt
 800426e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004272:	461f      	movlt	r7, r3
 8004274:	2300      	movge	r3, #0
 8004276:	232d      	movlt	r3, #45	; 0x2d
 8004278:	b088      	sub	sp, #32
 800427a:	4614      	mov	r4, r2
 800427c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800427e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004280:	7013      	strb	r3, [r2, #0]
 8004282:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004284:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004288:	f023 0820 	bic.w	r8, r3, #32
 800428c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004290:	d005      	beq.n	800429e <__cvt+0x3a>
 8004292:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004296:	d100      	bne.n	800429a <__cvt+0x36>
 8004298:	3501      	adds	r5, #1
 800429a:	2302      	movs	r3, #2
 800429c:	e000      	b.n	80042a0 <__cvt+0x3c>
 800429e:	2303      	movs	r3, #3
 80042a0:	aa07      	add	r2, sp, #28
 80042a2:	9204      	str	r2, [sp, #16]
 80042a4:	aa06      	add	r2, sp, #24
 80042a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80042aa:	e9cd 3500 	strd	r3, r5, [sp]
 80042ae:	4622      	mov	r2, r4
 80042b0:	463b      	mov	r3, r7
 80042b2:	f000 fce5 	bl	8004c80 <_dtoa_r>
 80042b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042ba:	4606      	mov	r6, r0
 80042bc:	d102      	bne.n	80042c4 <__cvt+0x60>
 80042be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042c0:	07db      	lsls	r3, r3, #31
 80042c2:	d522      	bpl.n	800430a <__cvt+0xa6>
 80042c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042c8:	eb06 0905 	add.w	r9, r6, r5
 80042cc:	d110      	bne.n	80042f0 <__cvt+0x8c>
 80042ce:	7833      	ldrb	r3, [r6, #0]
 80042d0:	2b30      	cmp	r3, #48	; 0x30
 80042d2:	d10a      	bne.n	80042ea <__cvt+0x86>
 80042d4:	2200      	movs	r2, #0
 80042d6:	2300      	movs	r3, #0
 80042d8:	4620      	mov	r0, r4
 80042da:	4639      	mov	r1, r7
 80042dc:	f7fc fb64 	bl	80009a8 <__aeabi_dcmpeq>
 80042e0:	b918      	cbnz	r0, 80042ea <__cvt+0x86>
 80042e2:	f1c5 0501 	rsb	r5, r5, #1
 80042e6:	f8ca 5000 	str.w	r5, [sl]
 80042ea:	f8da 3000 	ldr.w	r3, [sl]
 80042ee:	4499      	add	r9, r3
 80042f0:	2200      	movs	r2, #0
 80042f2:	2300      	movs	r3, #0
 80042f4:	4620      	mov	r0, r4
 80042f6:	4639      	mov	r1, r7
 80042f8:	f7fc fb56 	bl	80009a8 <__aeabi_dcmpeq>
 80042fc:	b108      	cbz	r0, 8004302 <__cvt+0x9e>
 80042fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8004302:	2230      	movs	r2, #48	; 0x30
 8004304:	9b07      	ldr	r3, [sp, #28]
 8004306:	454b      	cmp	r3, r9
 8004308:	d307      	bcc.n	800431a <__cvt+0xb6>
 800430a:	4630      	mov	r0, r6
 800430c:	9b07      	ldr	r3, [sp, #28]
 800430e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004310:	1b9b      	subs	r3, r3, r6
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	b008      	add	sp, #32
 8004316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800431a:	1c59      	adds	r1, r3, #1
 800431c:	9107      	str	r1, [sp, #28]
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e7f0      	b.n	8004304 <__cvt+0xa0>

08004322 <__exponent>:
 8004322:	4603      	mov	r3, r0
 8004324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004326:	2900      	cmp	r1, #0
 8004328:	f803 2b02 	strb.w	r2, [r3], #2
 800432c:	bfb6      	itet	lt
 800432e:	222d      	movlt	r2, #45	; 0x2d
 8004330:	222b      	movge	r2, #43	; 0x2b
 8004332:	4249      	neglt	r1, r1
 8004334:	2909      	cmp	r1, #9
 8004336:	7042      	strb	r2, [r0, #1]
 8004338:	dd2b      	ble.n	8004392 <__exponent+0x70>
 800433a:	f10d 0407 	add.w	r4, sp, #7
 800433e:	46a4      	mov	ip, r4
 8004340:	270a      	movs	r7, #10
 8004342:	fb91 f6f7 	sdiv	r6, r1, r7
 8004346:	460a      	mov	r2, r1
 8004348:	46a6      	mov	lr, r4
 800434a:	fb07 1516 	mls	r5, r7, r6, r1
 800434e:	2a63      	cmp	r2, #99	; 0x63
 8004350:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004354:	4631      	mov	r1, r6
 8004356:	f104 34ff 	add.w	r4, r4, #4294967295
 800435a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800435e:	dcf0      	bgt.n	8004342 <__exponent+0x20>
 8004360:	3130      	adds	r1, #48	; 0x30
 8004362:	f1ae 0502 	sub.w	r5, lr, #2
 8004366:	f804 1c01 	strb.w	r1, [r4, #-1]
 800436a:	4629      	mov	r1, r5
 800436c:	1c44      	adds	r4, r0, #1
 800436e:	4561      	cmp	r1, ip
 8004370:	d30a      	bcc.n	8004388 <__exponent+0x66>
 8004372:	f10d 0209 	add.w	r2, sp, #9
 8004376:	eba2 020e 	sub.w	r2, r2, lr
 800437a:	4565      	cmp	r5, ip
 800437c:	bf88      	it	hi
 800437e:	2200      	movhi	r2, #0
 8004380:	4413      	add	r3, r2
 8004382:	1a18      	subs	r0, r3, r0
 8004384:	b003      	add	sp, #12
 8004386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004388:	f811 2b01 	ldrb.w	r2, [r1], #1
 800438c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004390:	e7ed      	b.n	800436e <__exponent+0x4c>
 8004392:	2330      	movs	r3, #48	; 0x30
 8004394:	3130      	adds	r1, #48	; 0x30
 8004396:	7083      	strb	r3, [r0, #2]
 8004398:	70c1      	strb	r1, [r0, #3]
 800439a:	1d03      	adds	r3, r0, #4
 800439c:	e7f1      	b.n	8004382 <__exponent+0x60>
	...

080043a0 <_printf_float>:
 80043a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a4:	b091      	sub	sp, #68	; 0x44
 80043a6:	460c      	mov	r4, r1
 80043a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80043ac:	4616      	mov	r6, r2
 80043ae:	461f      	mov	r7, r3
 80043b0:	4605      	mov	r5, r0
 80043b2:	f001 fa53 	bl	800585c <_localeconv_r>
 80043b6:	6803      	ldr	r3, [r0, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	9309      	str	r3, [sp, #36]	; 0x24
 80043bc:	f7fb fec8 	bl	8000150 <strlen>
 80043c0:	2300      	movs	r3, #0
 80043c2:	930e      	str	r3, [sp, #56]	; 0x38
 80043c4:	f8d8 3000 	ldr.w	r3, [r8]
 80043c8:	900a      	str	r0, [sp, #40]	; 0x28
 80043ca:	3307      	adds	r3, #7
 80043cc:	f023 0307 	bic.w	r3, r3, #7
 80043d0:	f103 0208 	add.w	r2, r3, #8
 80043d4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80043d8:	f8d4 b000 	ldr.w	fp, [r4]
 80043dc:	f8c8 2000 	str.w	r2, [r8]
 80043e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80043e8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80043ec:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80043f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80043f2:	f04f 32ff 	mov.w	r2, #4294967295
 80043f6:	4640      	mov	r0, r8
 80043f8:	4b9c      	ldr	r3, [pc, #624]	; (800466c <_printf_float+0x2cc>)
 80043fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80043fc:	f7fc fb06 	bl	8000a0c <__aeabi_dcmpun>
 8004400:	bb70      	cbnz	r0, 8004460 <_printf_float+0xc0>
 8004402:	f04f 32ff 	mov.w	r2, #4294967295
 8004406:	4640      	mov	r0, r8
 8004408:	4b98      	ldr	r3, [pc, #608]	; (800466c <_printf_float+0x2cc>)
 800440a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800440c:	f7fc fae0 	bl	80009d0 <__aeabi_dcmple>
 8004410:	bb30      	cbnz	r0, 8004460 <_printf_float+0xc0>
 8004412:	2200      	movs	r2, #0
 8004414:	2300      	movs	r3, #0
 8004416:	4640      	mov	r0, r8
 8004418:	4651      	mov	r1, sl
 800441a:	f7fc facf 	bl	80009bc <__aeabi_dcmplt>
 800441e:	b110      	cbz	r0, 8004426 <_printf_float+0x86>
 8004420:	232d      	movs	r3, #45	; 0x2d
 8004422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004426:	4b92      	ldr	r3, [pc, #584]	; (8004670 <_printf_float+0x2d0>)
 8004428:	4892      	ldr	r0, [pc, #584]	; (8004674 <_printf_float+0x2d4>)
 800442a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800442e:	bf94      	ite	ls
 8004430:	4698      	movls	r8, r3
 8004432:	4680      	movhi	r8, r0
 8004434:	2303      	movs	r3, #3
 8004436:	f04f 0a00 	mov.w	sl, #0
 800443a:	6123      	str	r3, [r4, #16]
 800443c:	f02b 0304 	bic.w	r3, fp, #4
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	4633      	mov	r3, r6
 8004444:	4621      	mov	r1, r4
 8004446:	4628      	mov	r0, r5
 8004448:	9700      	str	r7, [sp, #0]
 800444a:	aa0f      	add	r2, sp, #60	; 0x3c
 800444c:	f000 f9d4 	bl	80047f8 <_printf_common>
 8004450:	3001      	adds	r0, #1
 8004452:	f040 8090 	bne.w	8004576 <_printf_float+0x1d6>
 8004456:	f04f 30ff 	mov.w	r0, #4294967295
 800445a:	b011      	add	sp, #68	; 0x44
 800445c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004460:	4642      	mov	r2, r8
 8004462:	4653      	mov	r3, sl
 8004464:	4640      	mov	r0, r8
 8004466:	4651      	mov	r1, sl
 8004468:	f7fc fad0 	bl	8000a0c <__aeabi_dcmpun>
 800446c:	b148      	cbz	r0, 8004482 <_printf_float+0xe2>
 800446e:	f1ba 0f00 	cmp.w	sl, #0
 8004472:	bfb8      	it	lt
 8004474:	232d      	movlt	r3, #45	; 0x2d
 8004476:	4880      	ldr	r0, [pc, #512]	; (8004678 <_printf_float+0x2d8>)
 8004478:	bfb8      	it	lt
 800447a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800447e:	4b7f      	ldr	r3, [pc, #508]	; (800467c <_printf_float+0x2dc>)
 8004480:	e7d3      	b.n	800442a <_printf_float+0x8a>
 8004482:	6863      	ldr	r3, [r4, #4]
 8004484:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	d142      	bne.n	8004512 <_printf_float+0x172>
 800448c:	2306      	movs	r3, #6
 800448e:	6063      	str	r3, [r4, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	9206      	str	r2, [sp, #24]
 8004494:	aa0e      	add	r2, sp, #56	; 0x38
 8004496:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800449a:	aa0d      	add	r2, sp, #52	; 0x34
 800449c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80044a0:	9203      	str	r2, [sp, #12]
 80044a2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80044a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80044aa:	6023      	str	r3, [r4, #0]
 80044ac:	6863      	ldr	r3, [r4, #4]
 80044ae:	4642      	mov	r2, r8
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	4628      	mov	r0, r5
 80044b4:	4653      	mov	r3, sl
 80044b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80044b8:	f7ff fed4 	bl	8004264 <__cvt>
 80044bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044be:	4680      	mov	r8, r0
 80044c0:	2947      	cmp	r1, #71	; 0x47
 80044c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044c4:	d108      	bne.n	80044d8 <_printf_float+0x138>
 80044c6:	1cc8      	adds	r0, r1, #3
 80044c8:	db02      	blt.n	80044d0 <_printf_float+0x130>
 80044ca:	6863      	ldr	r3, [r4, #4]
 80044cc:	4299      	cmp	r1, r3
 80044ce:	dd40      	ble.n	8004552 <_printf_float+0x1b2>
 80044d0:	f1a9 0902 	sub.w	r9, r9, #2
 80044d4:	fa5f f989 	uxtb.w	r9, r9
 80044d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80044dc:	d81f      	bhi.n	800451e <_printf_float+0x17e>
 80044de:	464a      	mov	r2, r9
 80044e0:	3901      	subs	r1, #1
 80044e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044e6:	910d      	str	r1, [sp, #52]	; 0x34
 80044e8:	f7ff ff1b 	bl	8004322 <__exponent>
 80044ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044ee:	4682      	mov	sl, r0
 80044f0:	1813      	adds	r3, r2, r0
 80044f2:	2a01      	cmp	r2, #1
 80044f4:	6123      	str	r3, [r4, #16]
 80044f6:	dc02      	bgt.n	80044fe <_printf_float+0x15e>
 80044f8:	6822      	ldr	r2, [r4, #0]
 80044fa:	07d2      	lsls	r2, r2, #31
 80044fc:	d501      	bpl.n	8004502 <_printf_float+0x162>
 80044fe:	3301      	adds	r3, #1
 8004500:	6123      	str	r3, [r4, #16]
 8004502:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004506:	2b00      	cmp	r3, #0
 8004508:	d09b      	beq.n	8004442 <_printf_float+0xa2>
 800450a:	232d      	movs	r3, #45	; 0x2d
 800450c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004510:	e797      	b.n	8004442 <_printf_float+0xa2>
 8004512:	2947      	cmp	r1, #71	; 0x47
 8004514:	d1bc      	bne.n	8004490 <_printf_float+0xf0>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1ba      	bne.n	8004490 <_printf_float+0xf0>
 800451a:	2301      	movs	r3, #1
 800451c:	e7b7      	b.n	800448e <_printf_float+0xee>
 800451e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004522:	d118      	bne.n	8004556 <_printf_float+0x1b6>
 8004524:	2900      	cmp	r1, #0
 8004526:	6863      	ldr	r3, [r4, #4]
 8004528:	dd0b      	ble.n	8004542 <_printf_float+0x1a2>
 800452a:	6121      	str	r1, [r4, #16]
 800452c:	b913      	cbnz	r3, 8004534 <_printf_float+0x194>
 800452e:	6822      	ldr	r2, [r4, #0]
 8004530:	07d0      	lsls	r0, r2, #31
 8004532:	d502      	bpl.n	800453a <_printf_float+0x19a>
 8004534:	3301      	adds	r3, #1
 8004536:	440b      	add	r3, r1
 8004538:	6123      	str	r3, [r4, #16]
 800453a:	f04f 0a00 	mov.w	sl, #0
 800453e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004540:	e7df      	b.n	8004502 <_printf_float+0x162>
 8004542:	b913      	cbnz	r3, 800454a <_printf_float+0x1aa>
 8004544:	6822      	ldr	r2, [r4, #0]
 8004546:	07d2      	lsls	r2, r2, #31
 8004548:	d501      	bpl.n	800454e <_printf_float+0x1ae>
 800454a:	3302      	adds	r3, #2
 800454c:	e7f4      	b.n	8004538 <_printf_float+0x198>
 800454e:	2301      	movs	r3, #1
 8004550:	e7f2      	b.n	8004538 <_printf_float+0x198>
 8004552:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004558:	4299      	cmp	r1, r3
 800455a:	db05      	blt.n	8004568 <_printf_float+0x1c8>
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	6121      	str	r1, [r4, #16]
 8004560:	07d8      	lsls	r0, r3, #31
 8004562:	d5ea      	bpl.n	800453a <_printf_float+0x19a>
 8004564:	1c4b      	adds	r3, r1, #1
 8004566:	e7e7      	b.n	8004538 <_printf_float+0x198>
 8004568:	2900      	cmp	r1, #0
 800456a:	bfcc      	ite	gt
 800456c:	2201      	movgt	r2, #1
 800456e:	f1c1 0202 	rsble	r2, r1, #2
 8004572:	4413      	add	r3, r2
 8004574:	e7e0      	b.n	8004538 <_printf_float+0x198>
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	055a      	lsls	r2, r3, #21
 800457a:	d407      	bmi.n	800458c <_printf_float+0x1ec>
 800457c:	6923      	ldr	r3, [r4, #16]
 800457e:	4642      	mov	r2, r8
 8004580:	4631      	mov	r1, r6
 8004582:	4628      	mov	r0, r5
 8004584:	47b8      	blx	r7
 8004586:	3001      	adds	r0, #1
 8004588:	d12b      	bne.n	80045e2 <_printf_float+0x242>
 800458a:	e764      	b.n	8004456 <_printf_float+0xb6>
 800458c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004590:	f240 80dd 	bls.w	800474e <_printf_float+0x3ae>
 8004594:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004598:	2200      	movs	r2, #0
 800459a:	2300      	movs	r3, #0
 800459c:	f7fc fa04 	bl	80009a8 <__aeabi_dcmpeq>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	d033      	beq.n	800460c <_printf_float+0x26c>
 80045a4:	2301      	movs	r3, #1
 80045a6:	4631      	mov	r1, r6
 80045a8:	4628      	mov	r0, r5
 80045aa:	4a35      	ldr	r2, [pc, #212]	; (8004680 <_printf_float+0x2e0>)
 80045ac:	47b8      	blx	r7
 80045ae:	3001      	adds	r0, #1
 80045b0:	f43f af51 	beq.w	8004456 <_printf_float+0xb6>
 80045b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80045b8:	429a      	cmp	r2, r3
 80045ba:	db02      	blt.n	80045c2 <_printf_float+0x222>
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	07d8      	lsls	r0, r3, #31
 80045c0:	d50f      	bpl.n	80045e2 <_printf_float+0x242>
 80045c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045c6:	4631      	mov	r1, r6
 80045c8:	4628      	mov	r0, r5
 80045ca:	47b8      	blx	r7
 80045cc:	3001      	adds	r0, #1
 80045ce:	f43f af42 	beq.w	8004456 <_printf_float+0xb6>
 80045d2:	f04f 0800 	mov.w	r8, #0
 80045d6:	f104 091a 	add.w	r9, r4, #26
 80045da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045dc:	3b01      	subs	r3, #1
 80045de:	4543      	cmp	r3, r8
 80045e0:	dc09      	bgt.n	80045f6 <_printf_float+0x256>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	079b      	lsls	r3, r3, #30
 80045e6:	f100 8102 	bmi.w	80047ee <_printf_float+0x44e>
 80045ea:	68e0      	ldr	r0, [r4, #12]
 80045ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045ee:	4298      	cmp	r0, r3
 80045f0:	bfb8      	it	lt
 80045f2:	4618      	movlt	r0, r3
 80045f4:	e731      	b.n	800445a <_printf_float+0xba>
 80045f6:	2301      	movs	r3, #1
 80045f8:	464a      	mov	r2, r9
 80045fa:	4631      	mov	r1, r6
 80045fc:	4628      	mov	r0, r5
 80045fe:	47b8      	blx	r7
 8004600:	3001      	adds	r0, #1
 8004602:	f43f af28 	beq.w	8004456 <_printf_float+0xb6>
 8004606:	f108 0801 	add.w	r8, r8, #1
 800460a:	e7e6      	b.n	80045da <_printf_float+0x23a>
 800460c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800460e:	2b00      	cmp	r3, #0
 8004610:	dc38      	bgt.n	8004684 <_printf_float+0x2e4>
 8004612:	2301      	movs	r3, #1
 8004614:	4631      	mov	r1, r6
 8004616:	4628      	mov	r0, r5
 8004618:	4a19      	ldr	r2, [pc, #100]	; (8004680 <_printf_float+0x2e0>)
 800461a:	47b8      	blx	r7
 800461c:	3001      	adds	r0, #1
 800461e:	f43f af1a 	beq.w	8004456 <_printf_float+0xb6>
 8004622:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004626:	4313      	orrs	r3, r2
 8004628:	d102      	bne.n	8004630 <_printf_float+0x290>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	07d9      	lsls	r1, r3, #31
 800462e:	d5d8      	bpl.n	80045e2 <_printf_float+0x242>
 8004630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004634:	4631      	mov	r1, r6
 8004636:	4628      	mov	r0, r5
 8004638:	47b8      	blx	r7
 800463a:	3001      	adds	r0, #1
 800463c:	f43f af0b 	beq.w	8004456 <_printf_float+0xb6>
 8004640:	f04f 0900 	mov.w	r9, #0
 8004644:	f104 0a1a 	add.w	sl, r4, #26
 8004648:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800464a:	425b      	negs	r3, r3
 800464c:	454b      	cmp	r3, r9
 800464e:	dc01      	bgt.n	8004654 <_printf_float+0x2b4>
 8004650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004652:	e794      	b.n	800457e <_printf_float+0x1de>
 8004654:	2301      	movs	r3, #1
 8004656:	4652      	mov	r2, sl
 8004658:	4631      	mov	r1, r6
 800465a:	4628      	mov	r0, r5
 800465c:	47b8      	blx	r7
 800465e:	3001      	adds	r0, #1
 8004660:	f43f aef9 	beq.w	8004456 <_printf_float+0xb6>
 8004664:	f109 0901 	add.w	r9, r9, #1
 8004668:	e7ee      	b.n	8004648 <_printf_float+0x2a8>
 800466a:	bf00      	nop
 800466c:	7fefffff 	.word	0x7fefffff
 8004670:	08007d84 	.word	0x08007d84
 8004674:	08007d88 	.word	0x08007d88
 8004678:	08007d90 	.word	0x08007d90
 800467c:	08007d8c 	.word	0x08007d8c
 8004680:	08007d94 	.word	0x08007d94
 8004684:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004688:	429a      	cmp	r2, r3
 800468a:	bfa8      	it	ge
 800468c:	461a      	movge	r2, r3
 800468e:	2a00      	cmp	r2, #0
 8004690:	4691      	mov	r9, r2
 8004692:	dc37      	bgt.n	8004704 <_printf_float+0x364>
 8004694:	f04f 0b00 	mov.w	fp, #0
 8004698:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800469c:	f104 021a 	add.w	r2, r4, #26
 80046a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80046a4:	ebaa 0309 	sub.w	r3, sl, r9
 80046a8:	455b      	cmp	r3, fp
 80046aa:	dc33      	bgt.n	8004714 <_printf_float+0x374>
 80046ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046b0:	429a      	cmp	r2, r3
 80046b2:	db3b      	blt.n	800472c <_printf_float+0x38c>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	07da      	lsls	r2, r3, #31
 80046b8:	d438      	bmi.n	800472c <_printf_float+0x38c>
 80046ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80046be:	eba3 020a 	sub.w	r2, r3, sl
 80046c2:	eba3 0901 	sub.w	r9, r3, r1
 80046c6:	4591      	cmp	r9, r2
 80046c8:	bfa8      	it	ge
 80046ca:	4691      	movge	r9, r2
 80046cc:	f1b9 0f00 	cmp.w	r9, #0
 80046d0:	dc34      	bgt.n	800473c <_printf_float+0x39c>
 80046d2:	f04f 0800 	mov.w	r8, #0
 80046d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046da:	f104 0a1a 	add.w	sl, r4, #26
 80046de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	eba3 0309 	sub.w	r3, r3, r9
 80046e8:	4543      	cmp	r3, r8
 80046ea:	f77f af7a 	ble.w	80045e2 <_printf_float+0x242>
 80046ee:	2301      	movs	r3, #1
 80046f0:	4652      	mov	r2, sl
 80046f2:	4631      	mov	r1, r6
 80046f4:	4628      	mov	r0, r5
 80046f6:	47b8      	blx	r7
 80046f8:	3001      	adds	r0, #1
 80046fa:	f43f aeac 	beq.w	8004456 <_printf_float+0xb6>
 80046fe:	f108 0801 	add.w	r8, r8, #1
 8004702:	e7ec      	b.n	80046de <_printf_float+0x33e>
 8004704:	4613      	mov	r3, r2
 8004706:	4631      	mov	r1, r6
 8004708:	4642      	mov	r2, r8
 800470a:	4628      	mov	r0, r5
 800470c:	47b8      	blx	r7
 800470e:	3001      	adds	r0, #1
 8004710:	d1c0      	bne.n	8004694 <_printf_float+0x2f4>
 8004712:	e6a0      	b.n	8004456 <_printf_float+0xb6>
 8004714:	2301      	movs	r3, #1
 8004716:	4631      	mov	r1, r6
 8004718:	4628      	mov	r0, r5
 800471a:	920b      	str	r2, [sp, #44]	; 0x2c
 800471c:	47b8      	blx	r7
 800471e:	3001      	adds	r0, #1
 8004720:	f43f ae99 	beq.w	8004456 <_printf_float+0xb6>
 8004724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004726:	f10b 0b01 	add.w	fp, fp, #1
 800472a:	e7b9      	b.n	80046a0 <_printf_float+0x300>
 800472c:	4631      	mov	r1, r6
 800472e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004732:	4628      	mov	r0, r5
 8004734:	47b8      	blx	r7
 8004736:	3001      	adds	r0, #1
 8004738:	d1bf      	bne.n	80046ba <_printf_float+0x31a>
 800473a:	e68c      	b.n	8004456 <_printf_float+0xb6>
 800473c:	464b      	mov	r3, r9
 800473e:	4631      	mov	r1, r6
 8004740:	4628      	mov	r0, r5
 8004742:	eb08 020a 	add.w	r2, r8, sl
 8004746:	47b8      	blx	r7
 8004748:	3001      	adds	r0, #1
 800474a:	d1c2      	bne.n	80046d2 <_printf_float+0x332>
 800474c:	e683      	b.n	8004456 <_printf_float+0xb6>
 800474e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004750:	2a01      	cmp	r2, #1
 8004752:	dc01      	bgt.n	8004758 <_printf_float+0x3b8>
 8004754:	07db      	lsls	r3, r3, #31
 8004756:	d537      	bpl.n	80047c8 <_printf_float+0x428>
 8004758:	2301      	movs	r3, #1
 800475a:	4642      	mov	r2, r8
 800475c:	4631      	mov	r1, r6
 800475e:	4628      	mov	r0, r5
 8004760:	47b8      	blx	r7
 8004762:	3001      	adds	r0, #1
 8004764:	f43f ae77 	beq.w	8004456 <_printf_float+0xb6>
 8004768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800476c:	4631      	mov	r1, r6
 800476e:	4628      	mov	r0, r5
 8004770:	47b8      	blx	r7
 8004772:	3001      	adds	r0, #1
 8004774:	f43f ae6f 	beq.w	8004456 <_printf_float+0xb6>
 8004778:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800477c:	2200      	movs	r2, #0
 800477e:	2300      	movs	r3, #0
 8004780:	f7fc f912 	bl	80009a8 <__aeabi_dcmpeq>
 8004784:	b9d8      	cbnz	r0, 80047be <_printf_float+0x41e>
 8004786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004788:	f108 0201 	add.w	r2, r8, #1
 800478c:	3b01      	subs	r3, #1
 800478e:	4631      	mov	r1, r6
 8004790:	4628      	mov	r0, r5
 8004792:	47b8      	blx	r7
 8004794:	3001      	adds	r0, #1
 8004796:	d10e      	bne.n	80047b6 <_printf_float+0x416>
 8004798:	e65d      	b.n	8004456 <_printf_float+0xb6>
 800479a:	2301      	movs	r3, #1
 800479c:	464a      	mov	r2, r9
 800479e:	4631      	mov	r1, r6
 80047a0:	4628      	mov	r0, r5
 80047a2:	47b8      	blx	r7
 80047a4:	3001      	adds	r0, #1
 80047a6:	f43f ae56 	beq.w	8004456 <_printf_float+0xb6>
 80047aa:	f108 0801 	add.w	r8, r8, #1
 80047ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047b0:	3b01      	subs	r3, #1
 80047b2:	4543      	cmp	r3, r8
 80047b4:	dcf1      	bgt.n	800479a <_printf_float+0x3fa>
 80047b6:	4653      	mov	r3, sl
 80047b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047bc:	e6e0      	b.n	8004580 <_printf_float+0x1e0>
 80047be:	f04f 0800 	mov.w	r8, #0
 80047c2:	f104 091a 	add.w	r9, r4, #26
 80047c6:	e7f2      	b.n	80047ae <_printf_float+0x40e>
 80047c8:	2301      	movs	r3, #1
 80047ca:	4642      	mov	r2, r8
 80047cc:	e7df      	b.n	800478e <_printf_float+0x3ee>
 80047ce:	2301      	movs	r3, #1
 80047d0:	464a      	mov	r2, r9
 80047d2:	4631      	mov	r1, r6
 80047d4:	4628      	mov	r0, r5
 80047d6:	47b8      	blx	r7
 80047d8:	3001      	adds	r0, #1
 80047da:	f43f ae3c 	beq.w	8004456 <_printf_float+0xb6>
 80047de:	f108 0801 	add.w	r8, r8, #1
 80047e2:	68e3      	ldr	r3, [r4, #12]
 80047e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80047e6:	1a5b      	subs	r3, r3, r1
 80047e8:	4543      	cmp	r3, r8
 80047ea:	dcf0      	bgt.n	80047ce <_printf_float+0x42e>
 80047ec:	e6fd      	b.n	80045ea <_printf_float+0x24a>
 80047ee:	f04f 0800 	mov.w	r8, #0
 80047f2:	f104 0919 	add.w	r9, r4, #25
 80047f6:	e7f4      	b.n	80047e2 <_printf_float+0x442>

080047f8 <_printf_common>:
 80047f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047fc:	4616      	mov	r6, r2
 80047fe:	4699      	mov	r9, r3
 8004800:	688a      	ldr	r2, [r1, #8]
 8004802:	690b      	ldr	r3, [r1, #16]
 8004804:	4607      	mov	r7, r0
 8004806:	4293      	cmp	r3, r2
 8004808:	bfb8      	it	lt
 800480a:	4613      	movlt	r3, r2
 800480c:	6033      	str	r3, [r6, #0]
 800480e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004812:	460c      	mov	r4, r1
 8004814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004818:	b10a      	cbz	r2, 800481e <_printf_common+0x26>
 800481a:	3301      	adds	r3, #1
 800481c:	6033      	str	r3, [r6, #0]
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	0699      	lsls	r1, r3, #26
 8004822:	bf42      	ittt	mi
 8004824:	6833      	ldrmi	r3, [r6, #0]
 8004826:	3302      	addmi	r3, #2
 8004828:	6033      	strmi	r3, [r6, #0]
 800482a:	6825      	ldr	r5, [r4, #0]
 800482c:	f015 0506 	ands.w	r5, r5, #6
 8004830:	d106      	bne.n	8004840 <_printf_common+0x48>
 8004832:	f104 0a19 	add.w	sl, r4, #25
 8004836:	68e3      	ldr	r3, [r4, #12]
 8004838:	6832      	ldr	r2, [r6, #0]
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	42ab      	cmp	r3, r5
 800483e:	dc28      	bgt.n	8004892 <_printf_common+0x9a>
 8004840:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004844:	1e13      	subs	r3, r2, #0
 8004846:	6822      	ldr	r2, [r4, #0]
 8004848:	bf18      	it	ne
 800484a:	2301      	movne	r3, #1
 800484c:	0692      	lsls	r2, r2, #26
 800484e:	d42d      	bmi.n	80048ac <_printf_common+0xb4>
 8004850:	4649      	mov	r1, r9
 8004852:	4638      	mov	r0, r7
 8004854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004858:	47c0      	blx	r8
 800485a:	3001      	adds	r0, #1
 800485c:	d020      	beq.n	80048a0 <_printf_common+0xa8>
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	68e5      	ldr	r5, [r4, #12]
 8004862:	f003 0306 	and.w	r3, r3, #6
 8004866:	2b04      	cmp	r3, #4
 8004868:	bf18      	it	ne
 800486a:	2500      	movne	r5, #0
 800486c:	6832      	ldr	r2, [r6, #0]
 800486e:	f04f 0600 	mov.w	r6, #0
 8004872:	68a3      	ldr	r3, [r4, #8]
 8004874:	bf08      	it	eq
 8004876:	1aad      	subeq	r5, r5, r2
 8004878:	6922      	ldr	r2, [r4, #16]
 800487a:	bf08      	it	eq
 800487c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004880:	4293      	cmp	r3, r2
 8004882:	bfc4      	itt	gt
 8004884:	1a9b      	subgt	r3, r3, r2
 8004886:	18ed      	addgt	r5, r5, r3
 8004888:	341a      	adds	r4, #26
 800488a:	42b5      	cmp	r5, r6
 800488c:	d11a      	bne.n	80048c4 <_printf_common+0xcc>
 800488e:	2000      	movs	r0, #0
 8004890:	e008      	b.n	80048a4 <_printf_common+0xac>
 8004892:	2301      	movs	r3, #1
 8004894:	4652      	mov	r2, sl
 8004896:	4649      	mov	r1, r9
 8004898:	4638      	mov	r0, r7
 800489a:	47c0      	blx	r8
 800489c:	3001      	adds	r0, #1
 800489e:	d103      	bne.n	80048a8 <_printf_common+0xb0>
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a8:	3501      	adds	r5, #1
 80048aa:	e7c4      	b.n	8004836 <_printf_common+0x3e>
 80048ac:	2030      	movs	r0, #48	; 0x30
 80048ae:	18e1      	adds	r1, r4, r3
 80048b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048ba:	4422      	add	r2, r4
 80048bc:	3302      	adds	r3, #2
 80048be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048c2:	e7c5      	b.n	8004850 <_printf_common+0x58>
 80048c4:	2301      	movs	r3, #1
 80048c6:	4622      	mov	r2, r4
 80048c8:	4649      	mov	r1, r9
 80048ca:	4638      	mov	r0, r7
 80048cc:	47c0      	blx	r8
 80048ce:	3001      	adds	r0, #1
 80048d0:	d0e6      	beq.n	80048a0 <_printf_common+0xa8>
 80048d2:	3601      	adds	r6, #1
 80048d4:	e7d9      	b.n	800488a <_printf_common+0x92>
	...

080048d8 <_printf_i>:
 80048d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048dc:	7e0f      	ldrb	r7, [r1, #24]
 80048de:	4691      	mov	r9, r2
 80048e0:	2f78      	cmp	r7, #120	; 0x78
 80048e2:	4680      	mov	r8, r0
 80048e4:	460c      	mov	r4, r1
 80048e6:	469a      	mov	sl, r3
 80048e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048ee:	d807      	bhi.n	8004900 <_printf_i+0x28>
 80048f0:	2f62      	cmp	r7, #98	; 0x62
 80048f2:	d80a      	bhi.n	800490a <_printf_i+0x32>
 80048f4:	2f00      	cmp	r7, #0
 80048f6:	f000 80d9 	beq.w	8004aac <_printf_i+0x1d4>
 80048fa:	2f58      	cmp	r7, #88	; 0x58
 80048fc:	f000 80a4 	beq.w	8004a48 <_printf_i+0x170>
 8004900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004908:	e03a      	b.n	8004980 <_printf_i+0xa8>
 800490a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800490e:	2b15      	cmp	r3, #21
 8004910:	d8f6      	bhi.n	8004900 <_printf_i+0x28>
 8004912:	a101      	add	r1, pc, #4	; (adr r1, 8004918 <_printf_i+0x40>)
 8004914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004918:	08004971 	.word	0x08004971
 800491c:	08004985 	.word	0x08004985
 8004920:	08004901 	.word	0x08004901
 8004924:	08004901 	.word	0x08004901
 8004928:	08004901 	.word	0x08004901
 800492c:	08004901 	.word	0x08004901
 8004930:	08004985 	.word	0x08004985
 8004934:	08004901 	.word	0x08004901
 8004938:	08004901 	.word	0x08004901
 800493c:	08004901 	.word	0x08004901
 8004940:	08004901 	.word	0x08004901
 8004944:	08004a93 	.word	0x08004a93
 8004948:	080049b5 	.word	0x080049b5
 800494c:	08004a75 	.word	0x08004a75
 8004950:	08004901 	.word	0x08004901
 8004954:	08004901 	.word	0x08004901
 8004958:	08004ab5 	.word	0x08004ab5
 800495c:	08004901 	.word	0x08004901
 8004960:	080049b5 	.word	0x080049b5
 8004964:	08004901 	.word	0x08004901
 8004968:	08004901 	.word	0x08004901
 800496c:	08004a7d 	.word	0x08004a7d
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	1d1a      	adds	r2, r3, #4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	602a      	str	r2, [r5, #0]
 8004978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800497c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004980:	2301      	movs	r3, #1
 8004982:	e0a4      	b.n	8004ace <_printf_i+0x1f6>
 8004984:	6820      	ldr	r0, [r4, #0]
 8004986:	6829      	ldr	r1, [r5, #0]
 8004988:	0606      	lsls	r6, r0, #24
 800498a:	f101 0304 	add.w	r3, r1, #4
 800498e:	d50a      	bpl.n	80049a6 <_printf_i+0xce>
 8004990:	680e      	ldr	r6, [r1, #0]
 8004992:	602b      	str	r3, [r5, #0]
 8004994:	2e00      	cmp	r6, #0
 8004996:	da03      	bge.n	80049a0 <_printf_i+0xc8>
 8004998:	232d      	movs	r3, #45	; 0x2d
 800499a:	4276      	negs	r6, r6
 800499c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049a0:	230a      	movs	r3, #10
 80049a2:	485e      	ldr	r0, [pc, #376]	; (8004b1c <_printf_i+0x244>)
 80049a4:	e019      	b.n	80049da <_printf_i+0x102>
 80049a6:	680e      	ldr	r6, [r1, #0]
 80049a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049ac:	602b      	str	r3, [r5, #0]
 80049ae:	bf18      	it	ne
 80049b0:	b236      	sxthne	r6, r6
 80049b2:	e7ef      	b.n	8004994 <_printf_i+0xbc>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	6820      	ldr	r0, [r4, #0]
 80049b8:	1d19      	adds	r1, r3, #4
 80049ba:	6029      	str	r1, [r5, #0]
 80049bc:	0601      	lsls	r1, r0, #24
 80049be:	d501      	bpl.n	80049c4 <_printf_i+0xec>
 80049c0:	681e      	ldr	r6, [r3, #0]
 80049c2:	e002      	b.n	80049ca <_printf_i+0xf2>
 80049c4:	0646      	lsls	r6, r0, #25
 80049c6:	d5fb      	bpl.n	80049c0 <_printf_i+0xe8>
 80049c8:	881e      	ldrh	r6, [r3, #0]
 80049ca:	2f6f      	cmp	r7, #111	; 0x6f
 80049cc:	bf0c      	ite	eq
 80049ce:	2308      	moveq	r3, #8
 80049d0:	230a      	movne	r3, #10
 80049d2:	4852      	ldr	r0, [pc, #328]	; (8004b1c <_printf_i+0x244>)
 80049d4:	2100      	movs	r1, #0
 80049d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049da:	6865      	ldr	r5, [r4, #4]
 80049dc:	2d00      	cmp	r5, #0
 80049de:	bfa8      	it	ge
 80049e0:	6821      	ldrge	r1, [r4, #0]
 80049e2:	60a5      	str	r5, [r4, #8]
 80049e4:	bfa4      	itt	ge
 80049e6:	f021 0104 	bicge.w	r1, r1, #4
 80049ea:	6021      	strge	r1, [r4, #0]
 80049ec:	b90e      	cbnz	r6, 80049f2 <_printf_i+0x11a>
 80049ee:	2d00      	cmp	r5, #0
 80049f0:	d04d      	beq.n	8004a8e <_printf_i+0x1b6>
 80049f2:	4615      	mov	r5, r2
 80049f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80049f8:	fb03 6711 	mls	r7, r3, r1, r6
 80049fc:	5dc7      	ldrb	r7, [r0, r7]
 80049fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a02:	4637      	mov	r7, r6
 8004a04:	42bb      	cmp	r3, r7
 8004a06:	460e      	mov	r6, r1
 8004a08:	d9f4      	bls.n	80049f4 <_printf_i+0x11c>
 8004a0a:	2b08      	cmp	r3, #8
 8004a0c:	d10b      	bne.n	8004a26 <_printf_i+0x14e>
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	07de      	lsls	r6, r3, #31
 8004a12:	d508      	bpl.n	8004a26 <_printf_i+0x14e>
 8004a14:	6923      	ldr	r3, [r4, #16]
 8004a16:	6861      	ldr	r1, [r4, #4]
 8004a18:	4299      	cmp	r1, r3
 8004a1a:	bfde      	ittt	le
 8004a1c:	2330      	movle	r3, #48	; 0x30
 8004a1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a26:	1b52      	subs	r2, r2, r5
 8004a28:	6122      	str	r2, [r4, #16]
 8004a2a:	464b      	mov	r3, r9
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	4640      	mov	r0, r8
 8004a30:	f8cd a000 	str.w	sl, [sp]
 8004a34:	aa03      	add	r2, sp, #12
 8004a36:	f7ff fedf 	bl	80047f8 <_printf_common>
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	d14c      	bne.n	8004ad8 <_printf_i+0x200>
 8004a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a42:	b004      	add	sp, #16
 8004a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a48:	4834      	ldr	r0, [pc, #208]	; (8004b1c <_printf_i+0x244>)
 8004a4a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a4e:	6829      	ldr	r1, [r5, #0]
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a56:	6029      	str	r1, [r5, #0]
 8004a58:	061d      	lsls	r5, r3, #24
 8004a5a:	d514      	bpl.n	8004a86 <_printf_i+0x1ae>
 8004a5c:	07df      	lsls	r7, r3, #31
 8004a5e:	bf44      	itt	mi
 8004a60:	f043 0320 	orrmi.w	r3, r3, #32
 8004a64:	6023      	strmi	r3, [r4, #0]
 8004a66:	b91e      	cbnz	r6, 8004a70 <_printf_i+0x198>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	f023 0320 	bic.w	r3, r3, #32
 8004a6e:	6023      	str	r3, [r4, #0]
 8004a70:	2310      	movs	r3, #16
 8004a72:	e7af      	b.n	80049d4 <_printf_i+0xfc>
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	f043 0320 	orr.w	r3, r3, #32
 8004a7a:	6023      	str	r3, [r4, #0]
 8004a7c:	2378      	movs	r3, #120	; 0x78
 8004a7e:	4828      	ldr	r0, [pc, #160]	; (8004b20 <_printf_i+0x248>)
 8004a80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a84:	e7e3      	b.n	8004a4e <_printf_i+0x176>
 8004a86:	0659      	lsls	r1, r3, #25
 8004a88:	bf48      	it	mi
 8004a8a:	b2b6      	uxthmi	r6, r6
 8004a8c:	e7e6      	b.n	8004a5c <_printf_i+0x184>
 8004a8e:	4615      	mov	r5, r2
 8004a90:	e7bb      	b.n	8004a0a <_printf_i+0x132>
 8004a92:	682b      	ldr	r3, [r5, #0]
 8004a94:	6826      	ldr	r6, [r4, #0]
 8004a96:	1d18      	adds	r0, r3, #4
 8004a98:	6961      	ldr	r1, [r4, #20]
 8004a9a:	6028      	str	r0, [r5, #0]
 8004a9c:	0635      	lsls	r5, r6, #24
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	d501      	bpl.n	8004aa6 <_printf_i+0x1ce>
 8004aa2:	6019      	str	r1, [r3, #0]
 8004aa4:	e002      	b.n	8004aac <_printf_i+0x1d4>
 8004aa6:	0670      	lsls	r0, r6, #25
 8004aa8:	d5fb      	bpl.n	8004aa2 <_printf_i+0x1ca>
 8004aaa:	8019      	strh	r1, [r3, #0]
 8004aac:	2300      	movs	r3, #0
 8004aae:	4615      	mov	r5, r2
 8004ab0:	6123      	str	r3, [r4, #16]
 8004ab2:	e7ba      	b.n	8004a2a <_printf_i+0x152>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	1d1a      	adds	r2, r3, #4
 8004aba:	602a      	str	r2, [r5, #0]
 8004abc:	681d      	ldr	r5, [r3, #0]
 8004abe:	6862      	ldr	r2, [r4, #4]
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	f000 fed7 	bl	8005874 <memchr>
 8004ac6:	b108      	cbz	r0, 8004acc <_printf_i+0x1f4>
 8004ac8:	1b40      	subs	r0, r0, r5
 8004aca:	6060      	str	r0, [r4, #4]
 8004acc:	6863      	ldr	r3, [r4, #4]
 8004ace:	6123      	str	r3, [r4, #16]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad6:	e7a8      	b.n	8004a2a <_printf_i+0x152>
 8004ad8:	462a      	mov	r2, r5
 8004ada:	4649      	mov	r1, r9
 8004adc:	4640      	mov	r0, r8
 8004ade:	6923      	ldr	r3, [r4, #16]
 8004ae0:	47d0      	blx	sl
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	d0ab      	beq.n	8004a3e <_printf_i+0x166>
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	079b      	lsls	r3, r3, #30
 8004aea:	d413      	bmi.n	8004b14 <_printf_i+0x23c>
 8004aec:	68e0      	ldr	r0, [r4, #12]
 8004aee:	9b03      	ldr	r3, [sp, #12]
 8004af0:	4298      	cmp	r0, r3
 8004af2:	bfb8      	it	lt
 8004af4:	4618      	movlt	r0, r3
 8004af6:	e7a4      	b.n	8004a42 <_printf_i+0x16a>
 8004af8:	2301      	movs	r3, #1
 8004afa:	4632      	mov	r2, r6
 8004afc:	4649      	mov	r1, r9
 8004afe:	4640      	mov	r0, r8
 8004b00:	47d0      	blx	sl
 8004b02:	3001      	adds	r0, #1
 8004b04:	d09b      	beq.n	8004a3e <_printf_i+0x166>
 8004b06:	3501      	adds	r5, #1
 8004b08:	68e3      	ldr	r3, [r4, #12]
 8004b0a:	9903      	ldr	r1, [sp, #12]
 8004b0c:	1a5b      	subs	r3, r3, r1
 8004b0e:	42ab      	cmp	r3, r5
 8004b10:	dcf2      	bgt.n	8004af8 <_printf_i+0x220>
 8004b12:	e7eb      	b.n	8004aec <_printf_i+0x214>
 8004b14:	2500      	movs	r5, #0
 8004b16:	f104 0619 	add.w	r6, r4, #25
 8004b1a:	e7f5      	b.n	8004b08 <_printf_i+0x230>
 8004b1c:	08007d96 	.word	0x08007d96
 8004b20:	08007da7 	.word	0x08007da7

08004b24 <siprintf>:
 8004b24:	b40e      	push	{r1, r2, r3}
 8004b26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b2a:	b500      	push	{lr}
 8004b2c:	b09c      	sub	sp, #112	; 0x70
 8004b2e:	ab1d      	add	r3, sp, #116	; 0x74
 8004b30:	9002      	str	r0, [sp, #8]
 8004b32:	9006      	str	r0, [sp, #24]
 8004b34:	9107      	str	r1, [sp, #28]
 8004b36:	9104      	str	r1, [sp, #16]
 8004b38:	4808      	ldr	r0, [pc, #32]	; (8004b5c <siprintf+0x38>)
 8004b3a:	4909      	ldr	r1, [pc, #36]	; (8004b60 <siprintf+0x3c>)
 8004b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b40:	9105      	str	r1, [sp, #20]
 8004b42:	6800      	ldr	r0, [r0, #0]
 8004b44:	a902      	add	r1, sp, #8
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	f001 fb70 	bl	800622c <_svfiprintf_r>
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	9b02      	ldr	r3, [sp, #8]
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	b01c      	add	sp, #112	; 0x70
 8004b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b58:	b003      	add	sp, #12
 8004b5a:	4770      	bx	lr
 8004b5c:	2000001c 	.word	0x2000001c
 8004b60:	ffff0208 	.word	0xffff0208

08004b64 <quorem>:
 8004b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b68:	6903      	ldr	r3, [r0, #16]
 8004b6a:	690c      	ldr	r4, [r1, #16]
 8004b6c:	4607      	mov	r7, r0
 8004b6e:	42a3      	cmp	r3, r4
 8004b70:	f2c0 8082 	blt.w	8004c78 <quorem+0x114>
 8004b74:	3c01      	subs	r4, #1
 8004b76:	f100 0514 	add.w	r5, r0, #20
 8004b7a:	f101 0814 	add.w	r8, r1, #20
 8004b7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b9c:	d331      	bcc.n	8004c02 <quorem+0x9e>
 8004b9e:	f04f 0e00 	mov.w	lr, #0
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	46ac      	mov	ip, r5
 8004ba6:	46f2      	mov	sl, lr
 8004ba8:	f850 2b04 	ldr.w	r2, [r0], #4
 8004bac:	b293      	uxth	r3, r2
 8004bae:	fb06 e303 	mla	r3, r6, r3, lr
 8004bb2:	0c12      	lsrs	r2, r2, #16
 8004bb4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	fb06 e202 	mla	r2, r6, r2, lr
 8004bbe:	ebaa 0303 	sub.w	r3, sl, r3
 8004bc2:	f8dc a000 	ldr.w	sl, [ip]
 8004bc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004bca:	fa1f fa8a 	uxth.w	sl, sl
 8004bce:	4453      	add	r3, sl
 8004bd0:	f8dc a000 	ldr.w	sl, [ip]
 8004bd4:	b292      	uxth	r2, r2
 8004bd6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004bda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004be4:	4581      	cmp	r9, r0
 8004be6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bea:	f84c 3b04 	str.w	r3, [ip], #4
 8004bee:	d2db      	bcs.n	8004ba8 <quorem+0x44>
 8004bf0:	f855 300b 	ldr.w	r3, [r5, fp]
 8004bf4:	b92b      	cbnz	r3, 8004c02 <quorem+0x9e>
 8004bf6:	9b01      	ldr	r3, [sp, #4]
 8004bf8:	3b04      	subs	r3, #4
 8004bfa:	429d      	cmp	r5, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	d32f      	bcc.n	8004c60 <quorem+0xfc>
 8004c00:	613c      	str	r4, [r7, #16]
 8004c02:	4638      	mov	r0, r7
 8004c04:	f001 f8c2 	bl	8005d8c <__mcmp>
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	db25      	blt.n	8004c58 <quorem+0xf4>
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	f04f 0c00 	mov.w	ip, #0
 8004c12:	3601      	adds	r6, #1
 8004c14:	f858 1b04 	ldr.w	r1, [r8], #4
 8004c18:	f8d0 e000 	ldr.w	lr, [r0]
 8004c1c:	b28b      	uxth	r3, r1
 8004c1e:	ebac 0303 	sub.w	r3, ip, r3
 8004c22:	fa1f f28e 	uxth.w	r2, lr
 8004c26:	4413      	add	r3, r2
 8004c28:	0c0a      	lsrs	r2, r1, #16
 8004c2a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c38:	45c1      	cmp	r9, r8
 8004c3a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c3e:	f840 3b04 	str.w	r3, [r0], #4
 8004c42:	d2e7      	bcs.n	8004c14 <quorem+0xb0>
 8004c44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c4c:	b922      	cbnz	r2, 8004c58 <quorem+0xf4>
 8004c4e:	3b04      	subs	r3, #4
 8004c50:	429d      	cmp	r5, r3
 8004c52:	461a      	mov	r2, r3
 8004c54:	d30a      	bcc.n	8004c6c <quorem+0x108>
 8004c56:	613c      	str	r4, [r7, #16]
 8004c58:	4630      	mov	r0, r6
 8004c5a:	b003      	add	sp, #12
 8004c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	3b04      	subs	r3, #4
 8004c64:	2a00      	cmp	r2, #0
 8004c66:	d1cb      	bne.n	8004c00 <quorem+0x9c>
 8004c68:	3c01      	subs	r4, #1
 8004c6a:	e7c6      	b.n	8004bfa <quorem+0x96>
 8004c6c:	6812      	ldr	r2, [r2, #0]
 8004c6e:	3b04      	subs	r3, #4
 8004c70:	2a00      	cmp	r2, #0
 8004c72:	d1f0      	bne.n	8004c56 <quorem+0xf2>
 8004c74:	3c01      	subs	r4, #1
 8004c76:	e7eb      	b.n	8004c50 <quorem+0xec>
 8004c78:	2000      	movs	r0, #0
 8004c7a:	e7ee      	b.n	8004c5a <quorem+0xf6>
 8004c7c:	0000      	movs	r0, r0
	...

08004c80 <_dtoa_r>:
 8004c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c84:	4616      	mov	r6, r2
 8004c86:	461f      	mov	r7, r3
 8004c88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004c8a:	b099      	sub	sp, #100	; 0x64
 8004c8c:	4605      	mov	r5, r0
 8004c8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c92:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004c96:	b974      	cbnz	r4, 8004cb6 <_dtoa_r+0x36>
 8004c98:	2010      	movs	r0, #16
 8004c9a:	f000 fde3 	bl	8005864 <malloc>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	6268      	str	r0, [r5, #36]	; 0x24
 8004ca2:	b920      	cbnz	r0, 8004cae <_dtoa_r+0x2e>
 8004ca4:	21ea      	movs	r1, #234	; 0xea
 8004ca6:	4ba8      	ldr	r3, [pc, #672]	; (8004f48 <_dtoa_r+0x2c8>)
 8004ca8:	48a8      	ldr	r0, [pc, #672]	; (8004f4c <_dtoa_r+0x2cc>)
 8004caa:	f001 fbcf 	bl	800644c <__assert_func>
 8004cae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004cb2:	6004      	str	r4, [r0, #0]
 8004cb4:	60c4      	str	r4, [r0, #12]
 8004cb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cb8:	6819      	ldr	r1, [r3, #0]
 8004cba:	b151      	cbz	r1, 8004cd2 <_dtoa_r+0x52>
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	4093      	lsls	r3, r2
 8004cc2:	604a      	str	r2, [r1, #4]
 8004cc4:	608b      	str	r3, [r1, #8]
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f000 fe22 	bl	8005910 <_Bfree>
 8004ccc:	2200      	movs	r2, #0
 8004cce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	1e3b      	subs	r3, r7, #0
 8004cd4:	bfaf      	iteee	ge
 8004cd6:	2300      	movge	r3, #0
 8004cd8:	2201      	movlt	r2, #1
 8004cda:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004cde:	9305      	strlt	r3, [sp, #20]
 8004ce0:	bfa8      	it	ge
 8004ce2:	f8c8 3000 	strge.w	r3, [r8]
 8004ce6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004cea:	4b99      	ldr	r3, [pc, #612]	; (8004f50 <_dtoa_r+0x2d0>)
 8004cec:	bfb8      	it	lt
 8004cee:	f8c8 2000 	strlt.w	r2, [r8]
 8004cf2:	ea33 0309 	bics.w	r3, r3, r9
 8004cf6:	d119      	bne.n	8004d2c <_dtoa_r+0xac>
 8004cf8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cfc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d04:	4333      	orrs	r3, r6
 8004d06:	f000 857f 	beq.w	8005808 <_dtoa_r+0xb88>
 8004d0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d0c:	b953      	cbnz	r3, 8004d24 <_dtoa_r+0xa4>
 8004d0e:	4b91      	ldr	r3, [pc, #580]	; (8004f54 <_dtoa_r+0x2d4>)
 8004d10:	e022      	b.n	8004d58 <_dtoa_r+0xd8>
 8004d12:	4b91      	ldr	r3, [pc, #580]	; (8004f58 <_dtoa_r+0x2d8>)
 8004d14:	9303      	str	r3, [sp, #12]
 8004d16:	3308      	adds	r3, #8
 8004d18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	9803      	ldr	r0, [sp, #12]
 8004d1e:	b019      	add	sp, #100	; 0x64
 8004d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d24:	4b8b      	ldr	r3, [pc, #556]	; (8004f54 <_dtoa_r+0x2d4>)
 8004d26:	9303      	str	r3, [sp, #12]
 8004d28:	3303      	adds	r3, #3
 8004d2a:	e7f5      	b.n	8004d18 <_dtoa_r+0x98>
 8004d2c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004d34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f7fb fe34 	bl	80009a8 <__aeabi_dcmpeq>
 8004d40:	4680      	mov	r8, r0
 8004d42:	b158      	cbz	r0, 8004d5c <_dtoa_r+0xdc>
 8004d44:	2301      	movs	r3, #1
 8004d46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 8558 	beq.w	8005802 <_dtoa_r+0xb82>
 8004d52:	4882      	ldr	r0, [pc, #520]	; (8004f5c <_dtoa_r+0x2dc>)
 8004d54:	6018      	str	r0, [r3, #0]
 8004d56:	1e43      	subs	r3, r0, #1
 8004d58:	9303      	str	r3, [sp, #12]
 8004d5a:	e7df      	b.n	8004d1c <_dtoa_r+0x9c>
 8004d5c:	ab16      	add	r3, sp, #88	; 0x58
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	ab17      	add	r3, sp, #92	; 0x5c
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	4628      	mov	r0, r5
 8004d66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d6a:	f001 f8b7 	bl	8005edc <__d2b>
 8004d6e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004d72:	4683      	mov	fp, r0
 8004d74:	2c00      	cmp	r4, #0
 8004d76:	d07f      	beq.n	8004e78 <_dtoa_r+0x1f8>
 8004d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d7e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004d82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d86:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004d8a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004d8e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004d92:	2200      	movs	r2, #0
 8004d94:	4b72      	ldr	r3, [pc, #456]	; (8004f60 <_dtoa_r+0x2e0>)
 8004d96:	f7fb f9e7 	bl	8000168 <__aeabi_dsub>
 8004d9a:	a365      	add	r3, pc, #404	; (adr r3, 8004f30 <_dtoa_r+0x2b0>)
 8004d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da0:	f7fb fb9a 	bl	80004d8 <__aeabi_dmul>
 8004da4:	a364      	add	r3, pc, #400	; (adr r3, 8004f38 <_dtoa_r+0x2b8>)
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f7fb f9df 	bl	800016c <__adddf3>
 8004dae:	4606      	mov	r6, r0
 8004db0:	4620      	mov	r0, r4
 8004db2:	460f      	mov	r7, r1
 8004db4:	f7fb fb26 	bl	8000404 <__aeabi_i2d>
 8004db8:	a361      	add	r3, pc, #388	; (adr r3, 8004f40 <_dtoa_r+0x2c0>)
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f7fb fb8b 	bl	80004d8 <__aeabi_dmul>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	4639      	mov	r1, r7
 8004dca:	f7fb f9cf 	bl	800016c <__adddf3>
 8004dce:	4606      	mov	r6, r0
 8004dd0:	460f      	mov	r7, r1
 8004dd2:	f7fb fe31 	bl	8000a38 <__aeabi_d2iz>
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	4682      	mov	sl, r0
 8004dda:	2300      	movs	r3, #0
 8004ddc:	4630      	mov	r0, r6
 8004dde:	4639      	mov	r1, r7
 8004de0:	f7fb fdec 	bl	80009bc <__aeabi_dcmplt>
 8004de4:	b148      	cbz	r0, 8004dfa <_dtoa_r+0x17a>
 8004de6:	4650      	mov	r0, sl
 8004de8:	f7fb fb0c 	bl	8000404 <__aeabi_i2d>
 8004dec:	4632      	mov	r2, r6
 8004dee:	463b      	mov	r3, r7
 8004df0:	f7fb fdda 	bl	80009a8 <__aeabi_dcmpeq>
 8004df4:	b908      	cbnz	r0, 8004dfa <_dtoa_r+0x17a>
 8004df6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dfa:	f1ba 0f16 	cmp.w	sl, #22
 8004dfe:	d858      	bhi.n	8004eb2 <_dtoa_r+0x232>
 8004e00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e04:	4b57      	ldr	r3, [pc, #348]	; (8004f64 <_dtoa_r+0x2e4>)
 8004e06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	f7fb fdd5 	bl	80009bc <__aeabi_dcmplt>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d04f      	beq.n	8004eb6 <_dtoa_r+0x236>
 8004e16:	2300      	movs	r3, #0
 8004e18:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e20:	1b1c      	subs	r4, r3, r4
 8004e22:	1e63      	subs	r3, r4, #1
 8004e24:	9309      	str	r3, [sp, #36]	; 0x24
 8004e26:	bf49      	itett	mi
 8004e28:	f1c4 0301 	rsbmi	r3, r4, #1
 8004e2c:	2300      	movpl	r3, #0
 8004e2e:	9306      	strmi	r3, [sp, #24]
 8004e30:	2300      	movmi	r3, #0
 8004e32:	bf54      	ite	pl
 8004e34:	9306      	strpl	r3, [sp, #24]
 8004e36:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004e38:	f1ba 0f00 	cmp.w	sl, #0
 8004e3c:	db3d      	blt.n	8004eba <_dtoa_r+0x23a>
 8004e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e40:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e44:	4453      	add	r3, sl
 8004e46:	9309      	str	r3, [sp, #36]	; 0x24
 8004e48:	2300      	movs	r3, #0
 8004e4a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e4e:	2b09      	cmp	r3, #9
 8004e50:	f200 808c 	bhi.w	8004f6c <_dtoa_r+0x2ec>
 8004e54:	2b05      	cmp	r3, #5
 8004e56:	bfc4      	itt	gt
 8004e58:	3b04      	subgt	r3, #4
 8004e5a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004e5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e5e:	bfc8      	it	gt
 8004e60:	2400      	movgt	r4, #0
 8004e62:	f1a3 0302 	sub.w	r3, r3, #2
 8004e66:	bfd8      	it	le
 8004e68:	2401      	movle	r4, #1
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	f200 808a 	bhi.w	8004f84 <_dtoa_r+0x304>
 8004e70:	e8df f003 	tbb	[pc, r3]
 8004e74:	5b4d4f2d 	.word	0x5b4d4f2d
 8004e78:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004e7c:	441c      	add	r4, r3
 8004e7e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	bfc3      	ittte	gt
 8004e86:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e8a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004e8e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e92:	f1c3 0320 	rsble	r3, r3, #32
 8004e96:	bfc6      	itte	gt
 8004e98:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e9c:	4318      	orrgt	r0, r3
 8004e9e:	fa06 f003 	lslle.w	r0, r6, r3
 8004ea2:	f7fb fa9f 	bl	80003e4 <__aeabi_ui2d>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004eac:	3c01      	subs	r4, #1
 8004eae:	9313      	str	r3, [sp, #76]	; 0x4c
 8004eb0:	e76f      	b.n	8004d92 <_dtoa_r+0x112>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e7b2      	b.n	8004e1c <_dtoa_r+0x19c>
 8004eb6:	900f      	str	r0, [sp, #60]	; 0x3c
 8004eb8:	e7b1      	b.n	8004e1e <_dtoa_r+0x19e>
 8004eba:	9b06      	ldr	r3, [sp, #24]
 8004ebc:	eba3 030a 	sub.w	r3, r3, sl
 8004ec0:	9306      	str	r3, [sp, #24]
 8004ec2:	f1ca 0300 	rsb	r3, sl, #0
 8004ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ec8:	2300      	movs	r3, #0
 8004eca:	930e      	str	r3, [sp, #56]	; 0x38
 8004ecc:	e7be      	b.n	8004e4c <_dtoa_r+0x1cc>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ed2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	dc58      	bgt.n	8004f8a <_dtoa_r+0x30a>
 8004ed8:	f04f 0901 	mov.w	r9, #1
 8004edc:	464b      	mov	r3, r9
 8004ede:	f8cd 9020 	str.w	r9, [sp, #32]
 8004ee2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004eea:	6042      	str	r2, [r0, #4]
 8004eec:	2204      	movs	r2, #4
 8004eee:	f102 0614 	add.w	r6, r2, #20
 8004ef2:	429e      	cmp	r6, r3
 8004ef4:	6841      	ldr	r1, [r0, #4]
 8004ef6:	d94e      	bls.n	8004f96 <_dtoa_r+0x316>
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f000 fcc9 	bl	8005890 <_Balloc>
 8004efe:	9003      	str	r0, [sp, #12]
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d14c      	bne.n	8004f9e <_dtoa_r+0x31e>
 8004f04:	4602      	mov	r2, r0
 8004f06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004f0a:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <_dtoa_r+0x2e8>)
 8004f0c:	e6cc      	b.n	8004ca8 <_dtoa_r+0x28>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e7de      	b.n	8004ed0 <_dtoa_r+0x250>
 8004f12:	2300      	movs	r3, #0
 8004f14:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f18:	eb0a 0903 	add.w	r9, sl, r3
 8004f1c:	f109 0301 	add.w	r3, r9, #1
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	9308      	str	r3, [sp, #32]
 8004f24:	bfb8      	it	lt
 8004f26:	2301      	movlt	r3, #1
 8004f28:	e7dd      	b.n	8004ee6 <_dtoa_r+0x266>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e7f2      	b.n	8004f14 <_dtoa_r+0x294>
 8004f2e:	bf00      	nop
 8004f30:	636f4361 	.word	0x636f4361
 8004f34:	3fd287a7 	.word	0x3fd287a7
 8004f38:	8b60c8b3 	.word	0x8b60c8b3
 8004f3c:	3fc68a28 	.word	0x3fc68a28
 8004f40:	509f79fb 	.word	0x509f79fb
 8004f44:	3fd34413 	.word	0x3fd34413
 8004f48:	08007dc5 	.word	0x08007dc5
 8004f4c:	08007ddc 	.word	0x08007ddc
 8004f50:	7ff00000 	.word	0x7ff00000
 8004f54:	08007dc1 	.word	0x08007dc1
 8004f58:	08007db8 	.word	0x08007db8
 8004f5c:	08007d95 	.word	0x08007d95
 8004f60:	3ff80000 	.word	0x3ff80000
 8004f64:	08007ed0 	.word	0x08007ed0
 8004f68:	08007e37 	.word	0x08007e37
 8004f6c:	2401      	movs	r4, #1
 8004f6e:	2300      	movs	r3, #0
 8004f70:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f72:	9322      	str	r3, [sp, #136]	; 0x88
 8004f74:	f04f 39ff 	mov.w	r9, #4294967295
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2312      	movs	r3, #18
 8004f7c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f80:	9223      	str	r2, [sp, #140]	; 0x8c
 8004f82:	e7b0      	b.n	8004ee6 <_dtoa_r+0x266>
 8004f84:	2301      	movs	r3, #1
 8004f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f88:	e7f4      	b.n	8004f74 <_dtoa_r+0x2f4>
 8004f8a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004f8e:	464b      	mov	r3, r9
 8004f90:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f94:	e7a7      	b.n	8004ee6 <_dtoa_r+0x266>
 8004f96:	3101      	adds	r1, #1
 8004f98:	6041      	str	r1, [r0, #4]
 8004f9a:	0052      	lsls	r2, r2, #1
 8004f9c:	e7a7      	b.n	8004eee <_dtoa_r+0x26e>
 8004f9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004fa0:	9a03      	ldr	r2, [sp, #12]
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	9b08      	ldr	r3, [sp, #32]
 8004fa6:	2b0e      	cmp	r3, #14
 8004fa8:	f200 80a8 	bhi.w	80050fc <_dtoa_r+0x47c>
 8004fac:	2c00      	cmp	r4, #0
 8004fae:	f000 80a5 	beq.w	80050fc <_dtoa_r+0x47c>
 8004fb2:	f1ba 0f00 	cmp.w	sl, #0
 8004fb6:	dd34      	ble.n	8005022 <_dtoa_r+0x3a2>
 8004fb8:	4a9a      	ldr	r2, [pc, #616]	; (8005224 <_dtoa_r+0x5a4>)
 8004fba:	f00a 030f 	and.w	r3, sl, #15
 8004fbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004fc2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004fc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004fce:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004fd2:	d016      	beq.n	8005002 <_dtoa_r+0x382>
 8004fd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fd8:	4b93      	ldr	r3, [pc, #588]	; (8005228 <_dtoa_r+0x5a8>)
 8004fda:	2703      	movs	r7, #3
 8004fdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fe0:	f7fb fba4 	bl	800072c <__aeabi_ddiv>
 8004fe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fe8:	f004 040f 	and.w	r4, r4, #15
 8004fec:	4e8e      	ldr	r6, [pc, #568]	; (8005228 <_dtoa_r+0x5a8>)
 8004fee:	b954      	cbnz	r4, 8005006 <_dtoa_r+0x386>
 8004ff0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ff8:	f7fb fb98 	bl	800072c <__aeabi_ddiv>
 8004ffc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005000:	e029      	b.n	8005056 <_dtoa_r+0x3d6>
 8005002:	2702      	movs	r7, #2
 8005004:	e7f2      	b.n	8004fec <_dtoa_r+0x36c>
 8005006:	07e1      	lsls	r1, r4, #31
 8005008:	d508      	bpl.n	800501c <_dtoa_r+0x39c>
 800500a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800500e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005012:	f7fb fa61 	bl	80004d8 <__aeabi_dmul>
 8005016:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800501a:	3701      	adds	r7, #1
 800501c:	1064      	asrs	r4, r4, #1
 800501e:	3608      	adds	r6, #8
 8005020:	e7e5      	b.n	8004fee <_dtoa_r+0x36e>
 8005022:	f000 80a5 	beq.w	8005170 <_dtoa_r+0x4f0>
 8005026:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800502a:	f1ca 0400 	rsb	r4, sl, #0
 800502e:	4b7d      	ldr	r3, [pc, #500]	; (8005224 <_dtoa_r+0x5a4>)
 8005030:	f004 020f 	and.w	r2, r4, #15
 8005034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f7fb fa4c 	bl	80004d8 <__aeabi_dmul>
 8005040:	2702      	movs	r7, #2
 8005042:	2300      	movs	r3, #0
 8005044:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005048:	4e77      	ldr	r6, [pc, #476]	; (8005228 <_dtoa_r+0x5a8>)
 800504a:	1124      	asrs	r4, r4, #4
 800504c:	2c00      	cmp	r4, #0
 800504e:	f040 8084 	bne.w	800515a <_dtoa_r+0x4da>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1d2      	bne.n	8004ffc <_dtoa_r+0x37c>
 8005056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 808b 	beq.w	8005174 <_dtoa_r+0x4f4>
 800505e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005062:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005066:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800506a:	2200      	movs	r2, #0
 800506c:	4b6f      	ldr	r3, [pc, #444]	; (800522c <_dtoa_r+0x5ac>)
 800506e:	f7fb fca5 	bl	80009bc <__aeabi_dcmplt>
 8005072:	2800      	cmp	r0, #0
 8005074:	d07e      	beq.n	8005174 <_dtoa_r+0x4f4>
 8005076:	9b08      	ldr	r3, [sp, #32]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d07b      	beq.n	8005174 <_dtoa_r+0x4f4>
 800507c:	f1b9 0f00 	cmp.w	r9, #0
 8005080:	dd38      	ble.n	80050f4 <_dtoa_r+0x474>
 8005082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005086:	2200      	movs	r2, #0
 8005088:	4b69      	ldr	r3, [pc, #420]	; (8005230 <_dtoa_r+0x5b0>)
 800508a:	f7fb fa25 	bl	80004d8 <__aeabi_dmul>
 800508e:	464c      	mov	r4, r9
 8005090:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005094:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005098:	3701      	adds	r7, #1
 800509a:	4638      	mov	r0, r7
 800509c:	f7fb f9b2 	bl	8000404 <__aeabi_i2d>
 80050a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050a4:	f7fb fa18 	bl	80004d8 <__aeabi_dmul>
 80050a8:	2200      	movs	r2, #0
 80050aa:	4b62      	ldr	r3, [pc, #392]	; (8005234 <_dtoa_r+0x5b4>)
 80050ac:	f7fb f85e 	bl	800016c <__adddf3>
 80050b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80050b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050b8:	9611      	str	r6, [sp, #68]	; 0x44
 80050ba:	2c00      	cmp	r4, #0
 80050bc:	d15d      	bne.n	800517a <_dtoa_r+0x4fa>
 80050be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050c2:	2200      	movs	r2, #0
 80050c4:	4b5c      	ldr	r3, [pc, #368]	; (8005238 <_dtoa_r+0x5b8>)
 80050c6:	f7fb f84f 	bl	8000168 <__aeabi_dsub>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050d2:	4633      	mov	r3, r6
 80050d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050d6:	f7fb fc8f 	bl	80009f8 <__aeabi_dcmpgt>
 80050da:	2800      	cmp	r0, #0
 80050dc:	f040 829c 	bne.w	8005618 <_dtoa_r+0x998>
 80050e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80050ea:	f7fb fc67 	bl	80009bc <__aeabi_dcmplt>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	f040 8290 	bne.w	8005614 <_dtoa_r+0x994>
 80050f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80050f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80050fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f2c0 8152 	blt.w	80053a8 <_dtoa_r+0x728>
 8005104:	f1ba 0f0e 	cmp.w	sl, #14
 8005108:	f300 814e 	bgt.w	80053a8 <_dtoa_r+0x728>
 800510c:	4b45      	ldr	r3, [pc, #276]	; (8005224 <_dtoa_r+0x5a4>)
 800510e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005112:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005116:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800511a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800511c:	2b00      	cmp	r3, #0
 800511e:	f280 80db 	bge.w	80052d8 <_dtoa_r+0x658>
 8005122:	9b08      	ldr	r3, [sp, #32]
 8005124:	2b00      	cmp	r3, #0
 8005126:	f300 80d7 	bgt.w	80052d8 <_dtoa_r+0x658>
 800512a:	f040 8272 	bne.w	8005612 <_dtoa_r+0x992>
 800512e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005132:	2200      	movs	r2, #0
 8005134:	4b40      	ldr	r3, [pc, #256]	; (8005238 <_dtoa_r+0x5b8>)
 8005136:	f7fb f9cf 	bl	80004d8 <__aeabi_dmul>
 800513a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800513e:	f7fb fc51 	bl	80009e4 <__aeabi_dcmpge>
 8005142:	9c08      	ldr	r4, [sp, #32]
 8005144:	4626      	mov	r6, r4
 8005146:	2800      	cmp	r0, #0
 8005148:	f040 8248 	bne.w	80055dc <_dtoa_r+0x95c>
 800514c:	2331      	movs	r3, #49	; 0x31
 800514e:	9f03      	ldr	r7, [sp, #12]
 8005150:	f10a 0a01 	add.w	sl, sl, #1
 8005154:	f807 3b01 	strb.w	r3, [r7], #1
 8005158:	e244      	b.n	80055e4 <_dtoa_r+0x964>
 800515a:	07e2      	lsls	r2, r4, #31
 800515c:	d505      	bpl.n	800516a <_dtoa_r+0x4ea>
 800515e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005162:	f7fb f9b9 	bl	80004d8 <__aeabi_dmul>
 8005166:	2301      	movs	r3, #1
 8005168:	3701      	adds	r7, #1
 800516a:	1064      	asrs	r4, r4, #1
 800516c:	3608      	adds	r6, #8
 800516e:	e76d      	b.n	800504c <_dtoa_r+0x3cc>
 8005170:	2702      	movs	r7, #2
 8005172:	e770      	b.n	8005056 <_dtoa_r+0x3d6>
 8005174:	46d0      	mov	r8, sl
 8005176:	9c08      	ldr	r4, [sp, #32]
 8005178:	e78f      	b.n	800509a <_dtoa_r+0x41a>
 800517a:	9903      	ldr	r1, [sp, #12]
 800517c:	4b29      	ldr	r3, [pc, #164]	; (8005224 <_dtoa_r+0x5a4>)
 800517e:	4421      	add	r1, r4
 8005180:	9112      	str	r1, [sp, #72]	; 0x48
 8005182:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005184:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005188:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800518c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005190:	2900      	cmp	r1, #0
 8005192:	d055      	beq.n	8005240 <_dtoa_r+0x5c0>
 8005194:	2000      	movs	r0, #0
 8005196:	4929      	ldr	r1, [pc, #164]	; (800523c <_dtoa_r+0x5bc>)
 8005198:	f7fb fac8 	bl	800072c <__aeabi_ddiv>
 800519c:	463b      	mov	r3, r7
 800519e:	4632      	mov	r2, r6
 80051a0:	f7fa ffe2 	bl	8000168 <__aeabi_dsub>
 80051a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051a8:	9f03      	ldr	r7, [sp, #12]
 80051aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051ae:	f7fb fc43 	bl	8000a38 <__aeabi_d2iz>
 80051b2:	4604      	mov	r4, r0
 80051b4:	f7fb f926 	bl	8000404 <__aeabi_i2d>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051c0:	f7fa ffd2 	bl	8000168 <__aeabi_dsub>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	3430      	adds	r4, #48	; 0x30
 80051ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051d2:	f807 4b01 	strb.w	r4, [r7], #1
 80051d6:	f7fb fbf1 	bl	80009bc <__aeabi_dcmplt>
 80051da:	2800      	cmp	r0, #0
 80051dc:	d174      	bne.n	80052c8 <_dtoa_r+0x648>
 80051de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051e2:	2000      	movs	r0, #0
 80051e4:	4911      	ldr	r1, [pc, #68]	; (800522c <_dtoa_r+0x5ac>)
 80051e6:	f7fa ffbf 	bl	8000168 <__aeabi_dsub>
 80051ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051ee:	f7fb fbe5 	bl	80009bc <__aeabi_dcmplt>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	f040 80b7 	bne.w	8005366 <_dtoa_r+0x6e6>
 80051f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051fa:	429f      	cmp	r7, r3
 80051fc:	f43f af7a 	beq.w	80050f4 <_dtoa_r+0x474>
 8005200:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005204:	2200      	movs	r2, #0
 8005206:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <_dtoa_r+0x5b0>)
 8005208:	f7fb f966 	bl	80004d8 <__aeabi_dmul>
 800520c:	2200      	movs	r2, #0
 800520e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005212:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <_dtoa_r+0x5b0>)
 8005218:	f7fb f95e 	bl	80004d8 <__aeabi_dmul>
 800521c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005220:	e7c3      	b.n	80051aa <_dtoa_r+0x52a>
 8005222:	bf00      	nop
 8005224:	08007ed0 	.word	0x08007ed0
 8005228:	08007ea8 	.word	0x08007ea8
 800522c:	3ff00000 	.word	0x3ff00000
 8005230:	40240000 	.word	0x40240000
 8005234:	401c0000 	.word	0x401c0000
 8005238:	40140000 	.word	0x40140000
 800523c:	3fe00000 	.word	0x3fe00000
 8005240:	4630      	mov	r0, r6
 8005242:	4639      	mov	r1, r7
 8005244:	f7fb f948 	bl	80004d8 <__aeabi_dmul>
 8005248:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800524a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800524e:	9c03      	ldr	r4, [sp, #12]
 8005250:	9314      	str	r3, [sp, #80]	; 0x50
 8005252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005256:	f7fb fbef 	bl	8000a38 <__aeabi_d2iz>
 800525a:	9015      	str	r0, [sp, #84]	; 0x54
 800525c:	f7fb f8d2 	bl	8000404 <__aeabi_i2d>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005268:	f7fa ff7e 	bl	8000168 <__aeabi_dsub>
 800526c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800526e:	4606      	mov	r6, r0
 8005270:	3330      	adds	r3, #48	; 0x30
 8005272:	f804 3b01 	strb.w	r3, [r4], #1
 8005276:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005278:	460f      	mov	r7, r1
 800527a:	429c      	cmp	r4, r3
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	d124      	bne.n	80052cc <_dtoa_r+0x64c>
 8005282:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005286:	4bb0      	ldr	r3, [pc, #704]	; (8005548 <_dtoa_r+0x8c8>)
 8005288:	f7fa ff70 	bl	800016c <__adddf3>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4630      	mov	r0, r6
 8005292:	4639      	mov	r1, r7
 8005294:	f7fb fbb0 	bl	80009f8 <__aeabi_dcmpgt>
 8005298:	2800      	cmp	r0, #0
 800529a:	d163      	bne.n	8005364 <_dtoa_r+0x6e4>
 800529c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052a0:	2000      	movs	r0, #0
 80052a2:	49a9      	ldr	r1, [pc, #676]	; (8005548 <_dtoa_r+0x8c8>)
 80052a4:	f7fa ff60 	bl	8000168 <__aeabi_dsub>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4630      	mov	r0, r6
 80052ae:	4639      	mov	r1, r7
 80052b0:	f7fb fb84 	bl	80009bc <__aeabi_dcmplt>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	f43f af1d 	beq.w	80050f4 <_dtoa_r+0x474>
 80052ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80052bc:	1e7b      	subs	r3, r7, #1
 80052be:	9314      	str	r3, [sp, #80]	; 0x50
 80052c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80052c4:	2b30      	cmp	r3, #48	; 0x30
 80052c6:	d0f8      	beq.n	80052ba <_dtoa_r+0x63a>
 80052c8:	46c2      	mov	sl, r8
 80052ca:	e03b      	b.n	8005344 <_dtoa_r+0x6c4>
 80052cc:	4b9f      	ldr	r3, [pc, #636]	; (800554c <_dtoa_r+0x8cc>)
 80052ce:	f7fb f903 	bl	80004d8 <__aeabi_dmul>
 80052d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052d6:	e7bc      	b.n	8005252 <_dtoa_r+0x5d2>
 80052d8:	9f03      	ldr	r7, [sp, #12]
 80052da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80052de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052e2:	4640      	mov	r0, r8
 80052e4:	4649      	mov	r1, r9
 80052e6:	f7fb fa21 	bl	800072c <__aeabi_ddiv>
 80052ea:	f7fb fba5 	bl	8000a38 <__aeabi_d2iz>
 80052ee:	4604      	mov	r4, r0
 80052f0:	f7fb f888 	bl	8000404 <__aeabi_i2d>
 80052f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052f8:	f7fb f8ee 	bl	80004d8 <__aeabi_dmul>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4640      	mov	r0, r8
 8005302:	4649      	mov	r1, r9
 8005304:	f7fa ff30 	bl	8000168 <__aeabi_dsub>
 8005308:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800530c:	f807 6b01 	strb.w	r6, [r7], #1
 8005310:	9e03      	ldr	r6, [sp, #12]
 8005312:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005316:	1bbe      	subs	r6, r7, r6
 8005318:	45b4      	cmp	ip, r6
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	d136      	bne.n	800538e <_dtoa_r+0x70e>
 8005320:	f7fa ff24 	bl	800016c <__adddf3>
 8005324:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005328:	4680      	mov	r8, r0
 800532a:	4689      	mov	r9, r1
 800532c:	f7fb fb64 	bl	80009f8 <__aeabi_dcmpgt>
 8005330:	bb58      	cbnz	r0, 800538a <_dtoa_r+0x70a>
 8005332:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005336:	4640      	mov	r0, r8
 8005338:	4649      	mov	r1, r9
 800533a:	f7fb fb35 	bl	80009a8 <__aeabi_dcmpeq>
 800533e:	b108      	cbz	r0, 8005344 <_dtoa_r+0x6c4>
 8005340:	07e1      	lsls	r1, r4, #31
 8005342:	d422      	bmi.n	800538a <_dtoa_r+0x70a>
 8005344:	4628      	mov	r0, r5
 8005346:	4659      	mov	r1, fp
 8005348:	f000 fae2 	bl	8005910 <_Bfree>
 800534c:	2300      	movs	r3, #0
 800534e:	703b      	strb	r3, [r7, #0]
 8005350:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005352:	f10a 0001 	add.w	r0, sl, #1
 8005356:	6018      	str	r0, [r3, #0]
 8005358:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800535a:	2b00      	cmp	r3, #0
 800535c:	f43f acde 	beq.w	8004d1c <_dtoa_r+0x9c>
 8005360:	601f      	str	r7, [r3, #0]
 8005362:	e4db      	b.n	8004d1c <_dtoa_r+0x9c>
 8005364:	4627      	mov	r7, r4
 8005366:	463b      	mov	r3, r7
 8005368:	461f      	mov	r7, r3
 800536a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800536e:	2a39      	cmp	r2, #57	; 0x39
 8005370:	d107      	bne.n	8005382 <_dtoa_r+0x702>
 8005372:	9a03      	ldr	r2, [sp, #12]
 8005374:	429a      	cmp	r2, r3
 8005376:	d1f7      	bne.n	8005368 <_dtoa_r+0x6e8>
 8005378:	2230      	movs	r2, #48	; 0x30
 800537a:	9903      	ldr	r1, [sp, #12]
 800537c:	f108 0801 	add.w	r8, r8, #1
 8005380:	700a      	strb	r2, [r1, #0]
 8005382:	781a      	ldrb	r2, [r3, #0]
 8005384:	3201      	adds	r2, #1
 8005386:	701a      	strb	r2, [r3, #0]
 8005388:	e79e      	b.n	80052c8 <_dtoa_r+0x648>
 800538a:	46d0      	mov	r8, sl
 800538c:	e7eb      	b.n	8005366 <_dtoa_r+0x6e6>
 800538e:	2200      	movs	r2, #0
 8005390:	4b6e      	ldr	r3, [pc, #440]	; (800554c <_dtoa_r+0x8cc>)
 8005392:	f7fb f8a1 	bl	80004d8 <__aeabi_dmul>
 8005396:	2200      	movs	r2, #0
 8005398:	2300      	movs	r3, #0
 800539a:	4680      	mov	r8, r0
 800539c:	4689      	mov	r9, r1
 800539e:	f7fb fb03 	bl	80009a8 <__aeabi_dcmpeq>
 80053a2:	2800      	cmp	r0, #0
 80053a4:	d09b      	beq.n	80052de <_dtoa_r+0x65e>
 80053a6:	e7cd      	b.n	8005344 <_dtoa_r+0x6c4>
 80053a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053aa:	2a00      	cmp	r2, #0
 80053ac:	f000 80d0 	beq.w	8005550 <_dtoa_r+0x8d0>
 80053b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80053b2:	2a01      	cmp	r2, #1
 80053b4:	f300 80ae 	bgt.w	8005514 <_dtoa_r+0x894>
 80053b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053ba:	2a00      	cmp	r2, #0
 80053bc:	f000 80a6 	beq.w	800550c <_dtoa_r+0x88c>
 80053c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80053c6:	9f06      	ldr	r7, [sp, #24]
 80053c8:	9a06      	ldr	r2, [sp, #24]
 80053ca:	2101      	movs	r1, #1
 80053cc:	441a      	add	r2, r3
 80053ce:	9206      	str	r2, [sp, #24]
 80053d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053d2:	4628      	mov	r0, r5
 80053d4:	441a      	add	r2, r3
 80053d6:	9209      	str	r2, [sp, #36]	; 0x24
 80053d8:	f000 fb50 	bl	8005a7c <__i2b>
 80053dc:	4606      	mov	r6, r0
 80053de:	2f00      	cmp	r7, #0
 80053e0:	dd0c      	ble.n	80053fc <_dtoa_r+0x77c>
 80053e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	dd09      	ble.n	80053fc <_dtoa_r+0x77c>
 80053e8:	42bb      	cmp	r3, r7
 80053ea:	bfa8      	it	ge
 80053ec:	463b      	movge	r3, r7
 80053ee:	9a06      	ldr	r2, [sp, #24]
 80053f0:	1aff      	subs	r7, r7, r3
 80053f2:	1ad2      	subs	r2, r2, r3
 80053f4:	9206      	str	r2, [sp, #24]
 80053f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	9309      	str	r3, [sp, #36]	; 0x24
 80053fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053fe:	b1f3      	cbz	r3, 800543e <_dtoa_r+0x7be>
 8005400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 80a8 	beq.w	8005558 <_dtoa_r+0x8d8>
 8005408:	2c00      	cmp	r4, #0
 800540a:	dd10      	ble.n	800542e <_dtoa_r+0x7ae>
 800540c:	4631      	mov	r1, r6
 800540e:	4622      	mov	r2, r4
 8005410:	4628      	mov	r0, r5
 8005412:	f000 fbf1 	bl	8005bf8 <__pow5mult>
 8005416:	465a      	mov	r2, fp
 8005418:	4601      	mov	r1, r0
 800541a:	4606      	mov	r6, r0
 800541c:	4628      	mov	r0, r5
 800541e:	f000 fb43 	bl	8005aa8 <__multiply>
 8005422:	4680      	mov	r8, r0
 8005424:	4659      	mov	r1, fp
 8005426:	4628      	mov	r0, r5
 8005428:	f000 fa72 	bl	8005910 <_Bfree>
 800542c:	46c3      	mov	fp, r8
 800542e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005430:	1b1a      	subs	r2, r3, r4
 8005432:	d004      	beq.n	800543e <_dtoa_r+0x7be>
 8005434:	4659      	mov	r1, fp
 8005436:	4628      	mov	r0, r5
 8005438:	f000 fbde 	bl	8005bf8 <__pow5mult>
 800543c:	4683      	mov	fp, r0
 800543e:	2101      	movs	r1, #1
 8005440:	4628      	mov	r0, r5
 8005442:	f000 fb1b 	bl	8005a7c <__i2b>
 8005446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005448:	4604      	mov	r4, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	f340 8086 	ble.w	800555c <_dtoa_r+0x8dc>
 8005450:	461a      	mov	r2, r3
 8005452:	4601      	mov	r1, r0
 8005454:	4628      	mov	r0, r5
 8005456:	f000 fbcf 	bl	8005bf8 <__pow5mult>
 800545a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800545c:	4604      	mov	r4, r0
 800545e:	2b01      	cmp	r3, #1
 8005460:	dd7f      	ble.n	8005562 <_dtoa_r+0x8e2>
 8005462:	f04f 0800 	mov.w	r8, #0
 8005466:	6923      	ldr	r3, [r4, #16]
 8005468:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800546c:	6918      	ldr	r0, [r3, #16]
 800546e:	f000 fab7 	bl	80059e0 <__hi0bits>
 8005472:	f1c0 0020 	rsb	r0, r0, #32
 8005476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005478:	4418      	add	r0, r3
 800547a:	f010 001f 	ands.w	r0, r0, #31
 800547e:	f000 8092 	beq.w	80055a6 <_dtoa_r+0x926>
 8005482:	f1c0 0320 	rsb	r3, r0, #32
 8005486:	2b04      	cmp	r3, #4
 8005488:	f340 808a 	ble.w	80055a0 <_dtoa_r+0x920>
 800548c:	f1c0 001c 	rsb	r0, r0, #28
 8005490:	9b06      	ldr	r3, [sp, #24]
 8005492:	4407      	add	r7, r0
 8005494:	4403      	add	r3, r0
 8005496:	9306      	str	r3, [sp, #24]
 8005498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800549a:	4403      	add	r3, r0
 800549c:	9309      	str	r3, [sp, #36]	; 0x24
 800549e:	9b06      	ldr	r3, [sp, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	dd05      	ble.n	80054b0 <_dtoa_r+0x830>
 80054a4:	4659      	mov	r1, fp
 80054a6:	461a      	mov	r2, r3
 80054a8:	4628      	mov	r0, r5
 80054aa:	f000 fbff 	bl	8005cac <__lshift>
 80054ae:	4683      	mov	fp, r0
 80054b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	dd05      	ble.n	80054c2 <_dtoa_r+0x842>
 80054b6:	4621      	mov	r1, r4
 80054b8:	461a      	mov	r2, r3
 80054ba:	4628      	mov	r0, r5
 80054bc:	f000 fbf6 	bl	8005cac <__lshift>
 80054c0:	4604      	mov	r4, r0
 80054c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d070      	beq.n	80055aa <_dtoa_r+0x92a>
 80054c8:	4621      	mov	r1, r4
 80054ca:	4658      	mov	r0, fp
 80054cc:	f000 fc5e 	bl	8005d8c <__mcmp>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	da6a      	bge.n	80055aa <_dtoa_r+0x92a>
 80054d4:	2300      	movs	r3, #0
 80054d6:	4659      	mov	r1, fp
 80054d8:	220a      	movs	r2, #10
 80054da:	4628      	mov	r0, r5
 80054dc:	f000 fa3a 	bl	8005954 <__multadd>
 80054e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054e2:	4683      	mov	fp, r0
 80054e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8194 	beq.w	8005816 <_dtoa_r+0xb96>
 80054ee:	4631      	mov	r1, r6
 80054f0:	2300      	movs	r3, #0
 80054f2:	220a      	movs	r2, #10
 80054f4:	4628      	mov	r0, r5
 80054f6:	f000 fa2d 	bl	8005954 <__multadd>
 80054fa:	f1b9 0f00 	cmp.w	r9, #0
 80054fe:	4606      	mov	r6, r0
 8005500:	f300 8093 	bgt.w	800562a <_dtoa_r+0x9aa>
 8005504:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005506:	2b02      	cmp	r3, #2
 8005508:	dc57      	bgt.n	80055ba <_dtoa_r+0x93a>
 800550a:	e08e      	b.n	800562a <_dtoa_r+0x9aa>
 800550c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800550e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005512:	e757      	b.n	80053c4 <_dtoa_r+0x744>
 8005514:	9b08      	ldr	r3, [sp, #32]
 8005516:	1e5c      	subs	r4, r3, #1
 8005518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800551a:	42a3      	cmp	r3, r4
 800551c:	bfb7      	itett	lt
 800551e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005520:	1b1c      	subge	r4, r3, r4
 8005522:	1ae2      	sublt	r2, r4, r3
 8005524:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005526:	bfbe      	ittt	lt
 8005528:	940a      	strlt	r4, [sp, #40]	; 0x28
 800552a:	189b      	addlt	r3, r3, r2
 800552c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800552e:	9b08      	ldr	r3, [sp, #32]
 8005530:	bfb8      	it	lt
 8005532:	2400      	movlt	r4, #0
 8005534:	2b00      	cmp	r3, #0
 8005536:	bfbb      	ittet	lt
 8005538:	9b06      	ldrlt	r3, [sp, #24]
 800553a:	9a08      	ldrlt	r2, [sp, #32]
 800553c:	9f06      	ldrge	r7, [sp, #24]
 800553e:	1a9f      	sublt	r7, r3, r2
 8005540:	bfac      	ite	ge
 8005542:	9b08      	ldrge	r3, [sp, #32]
 8005544:	2300      	movlt	r3, #0
 8005546:	e73f      	b.n	80053c8 <_dtoa_r+0x748>
 8005548:	3fe00000 	.word	0x3fe00000
 800554c:	40240000 	.word	0x40240000
 8005550:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005552:	9f06      	ldr	r7, [sp, #24]
 8005554:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005556:	e742      	b.n	80053de <_dtoa_r+0x75e>
 8005558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800555a:	e76b      	b.n	8005434 <_dtoa_r+0x7b4>
 800555c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800555e:	2b01      	cmp	r3, #1
 8005560:	dc19      	bgt.n	8005596 <_dtoa_r+0x916>
 8005562:	9b04      	ldr	r3, [sp, #16]
 8005564:	b9bb      	cbnz	r3, 8005596 <_dtoa_r+0x916>
 8005566:	9b05      	ldr	r3, [sp, #20]
 8005568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800556c:	b99b      	cbnz	r3, 8005596 <_dtoa_r+0x916>
 800556e:	9b05      	ldr	r3, [sp, #20]
 8005570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005574:	0d1b      	lsrs	r3, r3, #20
 8005576:	051b      	lsls	r3, r3, #20
 8005578:	b183      	cbz	r3, 800559c <_dtoa_r+0x91c>
 800557a:	f04f 0801 	mov.w	r8, #1
 800557e:	9b06      	ldr	r3, [sp, #24]
 8005580:	3301      	adds	r3, #1
 8005582:	9306      	str	r3, [sp, #24]
 8005584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005586:	3301      	adds	r3, #1
 8005588:	9309      	str	r3, [sp, #36]	; 0x24
 800558a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800558c:	2b00      	cmp	r3, #0
 800558e:	f47f af6a 	bne.w	8005466 <_dtoa_r+0x7e6>
 8005592:	2001      	movs	r0, #1
 8005594:	e76f      	b.n	8005476 <_dtoa_r+0x7f6>
 8005596:	f04f 0800 	mov.w	r8, #0
 800559a:	e7f6      	b.n	800558a <_dtoa_r+0x90a>
 800559c:	4698      	mov	r8, r3
 800559e:	e7f4      	b.n	800558a <_dtoa_r+0x90a>
 80055a0:	f43f af7d 	beq.w	800549e <_dtoa_r+0x81e>
 80055a4:	4618      	mov	r0, r3
 80055a6:	301c      	adds	r0, #28
 80055a8:	e772      	b.n	8005490 <_dtoa_r+0x810>
 80055aa:	9b08      	ldr	r3, [sp, #32]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	dc36      	bgt.n	800561e <_dtoa_r+0x99e>
 80055b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	dd33      	ble.n	800561e <_dtoa_r+0x99e>
 80055b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055ba:	f1b9 0f00 	cmp.w	r9, #0
 80055be:	d10d      	bne.n	80055dc <_dtoa_r+0x95c>
 80055c0:	4621      	mov	r1, r4
 80055c2:	464b      	mov	r3, r9
 80055c4:	2205      	movs	r2, #5
 80055c6:	4628      	mov	r0, r5
 80055c8:	f000 f9c4 	bl	8005954 <__multadd>
 80055cc:	4601      	mov	r1, r0
 80055ce:	4604      	mov	r4, r0
 80055d0:	4658      	mov	r0, fp
 80055d2:	f000 fbdb 	bl	8005d8c <__mcmp>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	f73f adb8 	bgt.w	800514c <_dtoa_r+0x4cc>
 80055dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055de:	9f03      	ldr	r7, [sp, #12]
 80055e0:	ea6f 0a03 	mvn.w	sl, r3
 80055e4:	f04f 0800 	mov.w	r8, #0
 80055e8:	4621      	mov	r1, r4
 80055ea:	4628      	mov	r0, r5
 80055ec:	f000 f990 	bl	8005910 <_Bfree>
 80055f0:	2e00      	cmp	r6, #0
 80055f2:	f43f aea7 	beq.w	8005344 <_dtoa_r+0x6c4>
 80055f6:	f1b8 0f00 	cmp.w	r8, #0
 80055fa:	d005      	beq.n	8005608 <_dtoa_r+0x988>
 80055fc:	45b0      	cmp	r8, r6
 80055fe:	d003      	beq.n	8005608 <_dtoa_r+0x988>
 8005600:	4641      	mov	r1, r8
 8005602:	4628      	mov	r0, r5
 8005604:	f000 f984 	bl	8005910 <_Bfree>
 8005608:	4631      	mov	r1, r6
 800560a:	4628      	mov	r0, r5
 800560c:	f000 f980 	bl	8005910 <_Bfree>
 8005610:	e698      	b.n	8005344 <_dtoa_r+0x6c4>
 8005612:	2400      	movs	r4, #0
 8005614:	4626      	mov	r6, r4
 8005616:	e7e1      	b.n	80055dc <_dtoa_r+0x95c>
 8005618:	46c2      	mov	sl, r8
 800561a:	4626      	mov	r6, r4
 800561c:	e596      	b.n	800514c <_dtoa_r+0x4cc>
 800561e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005620:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80fd 	beq.w	8005824 <_dtoa_r+0xba4>
 800562a:	2f00      	cmp	r7, #0
 800562c:	dd05      	ble.n	800563a <_dtoa_r+0x9ba>
 800562e:	4631      	mov	r1, r6
 8005630:	463a      	mov	r2, r7
 8005632:	4628      	mov	r0, r5
 8005634:	f000 fb3a 	bl	8005cac <__lshift>
 8005638:	4606      	mov	r6, r0
 800563a:	f1b8 0f00 	cmp.w	r8, #0
 800563e:	d05c      	beq.n	80056fa <_dtoa_r+0xa7a>
 8005640:	4628      	mov	r0, r5
 8005642:	6871      	ldr	r1, [r6, #4]
 8005644:	f000 f924 	bl	8005890 <_Balloc>
 8005648:	4607      	mov	r7, r0
 800564a:	b928      	cbnz	r0, 8005658 <_dtoa_r+0x9d8>
 800564c:	4602      	mov	r2, r0
 800564e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005652:	4b7f      	ldr	r3, [pc, #508]	; (8005850 <_dtoa_r+0xbd0>)
 8005654:	f7ff bb28 	b.w	8004ca8 <_dtoa_r+0x28>
 8005658:	6932      	ldr	r2, [r6, #16]
 800565a:	f106 010c 	add.w	r1, r6, #12
 800565e:	3202      	adds	r2, #2
 8005660:	0092      	lsls	r2, r2, #2
 8005662:	300c      	adds	r0, #12
 8005664:	f7fe fdce 	bl	8004204 <memcpy>
 8005668:	2201      	movs	r2, #1
 800566a:	4639      	mov	r1, r7
 800566c:	4628      	mov	r0, r5
 800566e:	f000 fb1d 	bl	8005cac <__lshift>
 8005672:	46b0      	mov	r8, r6
 8005674:	4606      	mov	r6, r0
 8005676:	9b03      	ldr	r3, [sp, #12]
 8005678:	3301      	adds	r3, #1
 800567a:	9308      	str	r3, [sp, #32]
 800567c:	9b03      	ldr	r3, [sp, #12]
 800567e:	444b      	add	r3, r9
 8005680:	930a      	str	r3, [sp, #40]	; 0x28
 8005682:	9b04      	ldr	r3, [sp, #16]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	9309      	str	r3, [sp, #36]	; 0x24
 800568a:	9b08      	ldr	r3, [sp, #32]
 800568c:	4621      	mov	r1, r4
 800568e:	3b01      	subs	r3, #1
 8005690:	4658      	mov	r0, fp
 8005692:	9304      	str	r3, [sp, #16]
 8005694:	f7ff fa66 	bl	8004b64 <quorem>
 8005698:	4603      	mov	r3, r0
 800569a:	4641      	mov	r1, r8
 800569c:	3330      	adds	r3, #48	; 0x30
 800569e:	9006      	str	r0, [sp, #24]
 80056a0:	4658      	mov	r0, fp
 80056a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80056a4:	f000 fb72 	bl	8005d8c <__mcmp>
 80056a8:	4632      	mov	r2, r6
 80056aa:	4681      	mov	r9, r0
 80056ac:	4621      	mov	r1, r4
 80056ae:	4628      	mov	r0, r5
 80056b0:	f000 fb88 	bl	8005dc4 <__mdiff>
 80056b4:	68c2      	ldr	r2, [r0, #12]
 80056b6:	4607      	mov	r7, r0
 80056b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ba:	bb02      	cbnz	r2, 80056fe <_dtoa_r+0xa7e>
 80056bc:	4601      	mov	r1, r0
 80056be:	4658      	mov	r0, fp
 80056c0:	f000 fb64 	bl	8005d8c <__mcmp>
 80056c4:	4602      	mov	r2, r0
 80056c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056c8:	4639      	mov	r1, r7
 80056ca:	4628      	mov	r0, r5
 80056cc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80056d0:	f000 f91e 	bl	8005910 <_Bfree>
 80056d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056d8:	9f08      	ldr	r7, [sp, #32]
 80056da:	ea43 0102 	orr.w	r1, r3, r2
 80056de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e0:	430b      	orrs	r3, r1
 80056e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056e4:	d10d      	bne.n	8005702 <_dtoa_r+0xa82>
 80056e6:	2b39      	cmp	r3, #57	; 0x39
 80056e8:	d029      	beq.n	800573e <_dtoa_r+0xabe>
 80056ea:	f1b9 0f00 	cmp.w	r9, #0
 80056ee:	dd01      	ble.n	80056f4 <_dtoa_r+0xa74>
 80056f0:	9b06      	ldr	r3, [sp, #24]
 80056f2:	3331      	adds	r3, #49	; 0x31
 80056f4:	9a04      	ldr	r2, [sp, #16]
 80056f6:	7013      	strb	r3, [r2, #0]
 80056f8:	e776      	b.n	80055e8 <_dtoa_r+0x968>
 80056fa:	4630      	mov	r0, r6
 80056fc:	e7b9      	b.n	8005672 <_dtoa_r+0x9f2>
 80056fe:	2201      	movs	r2, #1
 8005700:	e7e2      	b.n	80056c8 <_dtoa_r+0xa48>
 8005702:	f1b9 0f00 	cmp.w	r9, #0
 8005706:	db06      	blt.n	8005716 <_dtoa_r+0xa96>
 8005708:	9922      	ldr	r1, [sp, #136]	; 0x88
 800570a:	ea41 0909 	orr.w	r9, r1, r9
 800570e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005710:	ea59 0101 	orrs.w	r1, r9, r1
 8005714:	d120      	bne.n	8005758 <_dtoa_r+0xad8>
 8005716:	2a00      	cmp	r2, #0
 8005718:	ddec      	ble.n	80056f4 <_dtoa_r+0xa74>
 800571a:	4659      	mov	r1, fp
 800571c:	2201      	movs	r2, #1
 800571e:	4628      	mov	r0, r5
 8005720:	9308      	str	r3, [sp, #32]
 8005722:	f000 fac3 	bl	8005cac <__lshift>
 8005726:	4621      	mov	r1, r4
 8005728:	4683      	mov	fp, r0
 800572a:	f000 fb2f 	bl	8005d8c <__mcmp>
 800572e:	2800      	cmp	r0, #0
 8005730:	9b08      	ldr	r3, [sp, #32]
 8005732:	dc02      	bgt.n	800573a <_dtoa_r+0xaba>
 8005734:	d1de      	bne.n	80056f4 <_dtoa_r+0xa74>
 8005736:	07da      	lsls	r2, r3, #31
 8005738:	d5dc      	bpl.n	80056f4 <_dtoa_r+0xa74>
 800573a:	2b39      	cmp	r3, #57	; 0x39
 800573c:	d1d8      	bne.n	80056f0 <_dtoa_r+0xa70>
 800573e:	2339      	movs	r3, #57	; 0x39
 8005740:	9a04      	ldr	r2, [sp, #16]
 8005742:	7013      	strb	r3, [r2, #0]
 8005744:	463b      	mov	r3, r7
 8005746:	461f      	mov	r7, r3
 8005748:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800574c:	3b01      	subs	r3, #1
 800574e:	2a39      	cmp	r2, #57	; 0x39
 8005750:	d050      	beq.n	80057f4 <_dtoa_r+0xb74>
 8005752:	3201      	adds	r2, #1
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	e747      	b.n	80055e8 <_dtoa_r+0x968>
 8005758:	2a00      	cmp	r2, #0
 800575a:	dd03      	ble.n	8005764 <_dtoa_r+0xae4>
 800575c:	2b39      	cmp	r3, #57	; 0x39
 800575e:	d0ee      	beq.n	800573e <_dtoa_r+0xabe>
 8005760:	3301      	adds	r3, #1
 8005762:	e7c7      	b.n	80056f4 <_dtoa_r+0xa74>
 8005764:	9a08      	ldr	r2, [sp, #32]
 8005766:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005768:	f802 3c01 	strb.w	r3, [r2, #-1]
 800576c:	428a      	cmp	r2, r1
 800576e:	d02a      	beq.n	80057c6 <_dtoa_r+0xb46>
 8005770:	4659      	mov	r1, fp
 8005772:	2300      	movs	r3, #0
 8005774:	220a      	movs	r2, #10
 8005776:	4628      	mov	r0, r5
 8005778:	f000 f8ec 	bl	8005954 <__multadd>
 800577c:	45b0      	cmp	r8, r6
 800577e:	4683      	mov	fp, r0
 8005780:	f04f 0300 	mov.w	r3, #0
 8005784:	f04f 020a 	mov.w	r2, #10
 8005788:	4641      	mov	r1, r8
 800578a:	4628      	mov	r0, r5
 800578c:	d107      	bne.n	800579e <_dtoa_r+0xb1e>
 800578e:	f000 f8e1 	bl	8005954 <__multadd>
 8005792:	4680      	mov	r8, r0
 8005794:	4606      	mov	r6, r0
 8005796:	9b08      	ldr	r3, [sp, #32]
 8005798:	3301      	adds	r3, #1
 800579a:	9308      	str	r3, [sp, #32]
 800579c:	e775      	b.n	800568a <_dtoa_r+0xa0a>
 800579e:	f000 f8d9 	bl	8005954 <__multadd>
 80057a2:	4631      	mov	r1, r6
 80057a4:	4680      	mov	r8, r0
 80057a6:	2300      	movs	r3, #0
 80057a8:	220a      	movs	r2, #10
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 f8d2 	bl	8005954 <__multadd>
 80057b0:	4606      	mov	r6, r0
 80057b2:	e7f0      	b.n	8005796 <_dtoa_r+0xb16>
 80057b4:	f1b9 0f00 	cmp.w	r9, #0
 80057b8:	bfcc      	ite	gt
 80057ba:	464f      	movgt	r7, r9
 80057bc:	2701      	movle	r7, #1
 80057be:	f04f 0800 	mov.w	r8, #0
 80057c2:	9a03      	ldr	r2, [sp, #12]
 80057c4:	4417      	add	r7, r2
 80057c6:	4659      	mov	r1, fp
 80057c8:	2201      	movs	r2, #1
 80057ca:	4628      	mov	r0, r5
 80057cc:	9308      	str	r3, [sp, #32]
 80057ce:	f000 fa6d 	bl	8005cac <__lshift>
 80057d2:	4621      	mov	r1, r4
 80057d4:	4683      	mov	fp, r0
 80057d6:	f000 fad9 	bl	8005d8c <__mcmp>
 80057da:	2800      	cmp	r0, #0
 80057dc:	dcb2      	bgt.n	8005744 <_dtoa_r+0xac4>
 80057de:	d102      	bne.n	80057e6 <_dtoa_r+0xb66>
 80057e0:	9b08      	ldr	r3, [sp, #32]
 80057e2:	07db      	lsls	r3, r3, #31
 80057e4:	d4ae      	bmi.n	8005744 <_dtoa_r+0xac4>
 80057e6:	463b      	mov	r3, r7
 80057e8:	461f      	mov	r7, r3
 80057ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057ee:	2a30      	cmp	r2, #48	; 0x30
 80057f0:	d0fa      	beq.n	80057e8 <_dtoa_r+0xb68>
 80057f2:	e6f9      	b.n	80055e8 <_dtoa_r+0x968>
 80057f4:	9a03      	ldr	r2, [sp, #12]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d1a5      	bne.n	8005746 <_dtoa_r+0xac6>
 80057fa:	2331      	movs	r3, #49	; 0x31
 80057fc:	f10a 0a01 	add.w	sl, sl, #1
 8005800:	e779      	b.n	80056f6 <_dtoa_r+0xa76>
 8005802:	4b14      	ldr	r3, [pc, #80]	; (8005854 <_dtoa_r+0xbd4>)
 8005804:	f7ff baa8 	b.w	8004d58 <_dtoa_r+0xd8>
 8005808:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800580a:	2b00      	cmp	r3, #0
 800580c:	f47f aa81 	bne.w	8004d12 <_dtoa_r+0x92>
 8005810:	4b11      	ldr	r3, [pc, #68]	; (8005858 <_dtoa_r+0xbd8>)
 8005812:	f7ff baa1 	b.w	8004d58 <_dtoa_r+0xd8>
 8005816:	f1b9 0f00 	cmp.w	r9, #0
 800581a:	dc03      	bgt.n	8005824 <_dtoa_r+0xba4>
 800581c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800581e:	2b02      	cmp	r3, #2
 8005820:	f73f aecb 	bgt.w	80055ba <_dtoa_r+0x93a>
 8005824:	9f03      	ldr	r7, [sp, #12]
 8005826:	4621      	mov	r1, r4
 8005828:	4658      	mov	r0, fp
 800582a:	f7ff f99b 	bl	8004b64 <quorem>
 800582e:	9a03      	ldr	r2, [sp, #12]
 8005830:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005834:	f807 3b01 	strb.w	r3, [r7], #1
 8005838:	1aba      	subs	r2, r7, r2
 800583a:	4591      	cmp	r9, r2
 800583c:	ddba      	ble.n	80057b4 <_dtoa_r+0xb34>
 800583e:	4659      	mov	r1, fp
 8005840:	2300      	movs	r3, #0
 8005842:	220a      	movs	r2, #10
 8005844:	4628      	mov	r0, r5
 8005846:	f000 f885 	bl	8005954 <__multadd>
 800584a:	4683      	mov	fp, r0
 800584c:	e7eb      	b.n	8005826 <_dtoa_r+0xba6>
 800584e:	bf00      	nop
 8005850:	08007e37 	.word	0x08007e37
 8005854:	08007d94 	.word	0x08007d94
 8005858:	08007db8 	.word	0x08007db8

0800585c <_localeconv_r>:
 800585c:	4800      	ldr	r0, [pc, #0]	; (8005860 <_localeconv_r+0x4>)
 800585e:	4770      	bx	lr
 8005860:	20000170 	.word	0x20000170

08005864 <malloc>:
 8005864:	4b02      	ldr	r3, [pc, #8]	; (8005870 <malloc+0xc>)
 8005866:	4601      	mov	r1, r0
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	f000 bc0f 	b.w	800608c <_malloc_r>
 800586e:	bf00      	nop
 8005870:	2000001c 	.word	0x2000001c

08005874 <memchr>:
 8005874:	4603      	mov	r3, r0
 8005876:	b510      	push	{r4, lr}
 8005878:	b2c9      	uxtb	r1, r1
 800587a:	4402      	add	r2, r0
 800587c:	4293      	cmp	r3, r2
 800587e:	4618      	mov	r0, r3
 8005880:	d101      	bne.n	8005886 <memchr+0x12>
 8005882:	2000      	movs	r0, #0
 8005884:	e003      	b.n	800588e <memchr+0x1a>
 8005886:	7804      	ldrb	r4, [r0, #0]
 8005888:	3301      	adds	r3, #1
 800588a:	428c      	cmp	r4, r1
 800588c:	d1f6      	bne.n	800587c <memchr+0x8>
 800588e:	bd10      	pop	{r4, pc}

08005890 <_Balloc>:
 8005890:	b570      	push	{r4, r5, r6, lr}
 8005892:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005894:	4604      	mov	r4, r0
 8005896:	460d      	mov	r5, r1
 8005898:	b976      	cbnz	r6, 80058b8 <_Balloc+0x28>
 800589a:	2010      	movs	r0, #16
 800589c:	f7ff ffe2 	bl	8005864 <malloc>
 80058a0:	4602      	mov	r2, r0
 80058a2:	6260      	str	r0, [r4, #36]	; 0x24
 80058a4:	b920      	cbnz	r0, 80058b0 <_Balloc+0x20>
 80058a6:	2166      	movs	r1, #102	; 0x66
 80058a8:	4b17      	ldr	r3, [pc, #92]	; (8005908 <_Balloc+0x78>)
 80058aa:	4818      	ldr	r0, [pc, #96]	; (800590c <_Balloc+0x7c>)
 80058ac:	f000 fdce 	bl	800644c <__assert_func>
 80058b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058b4:	6006      	str	r6, [r0, #0]
 80058b6:	60c6      	str	r6, [r0, #12]
 80058b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80058ba:	68f3      	ldr	r3, [r6, #12]
 80058bc:	b183      	cbz	r3, 80058e0 <_Balloc+0x50>
 80058be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058c6:	b9b8      	cbnz	r0, 80058f8 <_Balloc+0x68>
 80058c8:	2101      	movs	r1, #1
 80058ca:	fa01 f605 	lsl.w	r6, r1, r5
 80058ce:	1d72      	adds	r2, r6, #5
 80058d0:	4620      	mov	r0, r4
 80058d2:	0092      	lsls	r2, r2, #2
 80058d4:	f000 fb5e 	bl	8005f94 <_calloc_r>
 80058d8:	b160      	cbz	r0, 80058f4 <_Balloc+0x64>
 80058da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058de:	e00e      	b.n	80058fe <_Balloc+0x6e>
 80058e0:	2221      	movs	r2, #33	; 0x21
 80058e2:	2104      	movs	r1, #4
 80058e4:	4620      	mov	r0, r4
 80058e6:	f000 fb55 	bl	8005f94 <_calloc_r>
 80058ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058ec:	60f0      	str	r0, [r6, #12]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e4      	bne.n	80058be <_Balloc+0x2e>
 80058f4:	2000      	movs	r0, #0
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
 80058f8:	6802      	ldr	r2, [r0, #0]
 80058fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058fe:	2300      	movs	r3, #0
 8005900:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005904:	e7f7      	b.n	80058f6 <_Balloc+0x66>
 8005906:	bf00      	nop
 8005908:	08007dc5 	.word	0x08007dc5
 800590c:	08007e48 	.word	0x08007e48

08005910 <_Bfree>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005914:	4605      	mov	r5, r0
 8005916:	460c      	mov	r4, r1
 8005918:	b976      	cbnz	r6, 8005938 <_Bfree+0x28>
 800591a:	2010      	movs	r0, #16
 800591c:	f7ff ffa2 	bl	8005864 <malloc>
 8005920:	4602      	mov	r2, r0
 8005922:	6268      	str	r0, [r5, #36]	; 0x24
 8005924:	b920      	cbnz	r0, 8005930 <_Bfree+0x20>
 8005926:	218a      	movs	r1, #138	; 0x8a
 8005928:	4b08      	ldr	r3, [pc, #32]	; (800594c <_Bfree+0x3c>)
 800592a:	4809      	ldr	r0, [pc, #36]	; (8005950 <_Bfree+0x40>)
 800592c:	f000 fd8e 	bl	800644c <__assert_func>
 8005930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005934:	6006      	str	r6, [r0, #0]
 8005936:	60c6      	str	r6, [r0, #12]
 8005938:	b13c      	cbz	r4, 800594a <_Bfree+0x3a>
 800593a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800593c:	6862      	ldr	r2, [r4, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005944:	6021      	str	r1, [r4, #0]
 8005946:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800594a:	bd70      	pop	{r4, r5, r6, pc}
 800594c:	08007dc5 	.word	0x08007dc5
 8005950:	08007e48 	.word	0x08007e48

08005954 <__multadd>:
 8005954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005958:	4607      	mov	r7, r0
 800595a:	460c      	mov	r4, r1
 800595c:	461e      	mov	r6, r3
 800595e:	2000      	movs	r0, #0
 8005960:	690d      	ldr	r5, [r1, #16]
 8005962:	f101 0c14 	add.w	ip, r1, #20
 8005966:	f8dc 3000 	ldr.w	r3, [ip]
 800596a:	3001      	adds	r0, #1
 800596c:	b299      	uxth	r1, r3
 800596e:	fb02 6101 	mla	r1, r2, r1, r6
 8005972:	0c1e      	lsrs	r6, r3, #16
 8005974:	0c0b      	lsrs	r3, r1, #16
 8005976:	fb02 3306 	mla	r3, r2, r6, r3
 800597a:	b289      	uxth	r1, r1
 800597c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005980:	4285      	cmp	r5, r0
 8005982:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005986:	f84c 1b04 	str.w	r1, [ip], #4
 800598a:	dcec      	bgt.n	8005966 <__multadd+0x12>
 800598c:	b30e      	cbz	r6, 80059d2 <__multadd+0x7e>
 800598e:	68a3      	ldr	r3, [r4, #8]
 8005990:	42ab      	cmp	r3, r5
 8005992:	dc19      	bgt.n	80059c8 <__multadd+0x74>
 8005994:	6861      	ldr	r1, [r4, #4]
 8005996:	4638      	mov	r0, r7
 8005998:	3101      	adds	r1, #1
 800599a:	f7ff ff79 	bl	8005890 <_Balloc>
 800599e:	4680      	mov	r8, r0
 80059a0:	b928      	cbnz	r0, 80059ae <__multadd+0x5a>
 80059a2:	4602      	mov	r2, r0
 80059a4:	21b5      	movs	r1, #181	; 0xb5
 80059a6:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <__multadd+0x84>)
 80059a8:	480c      	ldr	r0, [pc, #48]	; (80059dc <__multadd+0x88>)
 80059aa:	f000 fd4f 	bl	800644c <__assert_func>
 80059ae:	6922      	ldr	r2, [r4, #16]
 80059b0:	f104 010c 	add.w	r1, r4, #12
 80059b4:	3202      	adds	r2, #2
 80059b6:	0092      	lsls	r2, r2, #2
 80059b8:	300c      	adds	r0, #12
 80059ba:	f7fe fc23 	bl	8004204 <memcpy>
 80059be:	4621      	mov	r1, r4
 80059c0:	4638      	mov	r0, r7
 80059c2:	f7ff ffa5 	bl	8005910 <_Bfree>
 80059c6:	4644      	mov	r4, r8
 80059c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059cc:	3501      	adds	r5, #1
 80059ce:	615e      	str	r6, [r3, #20]
 80059d0:	6125      	str	r5, [r4, #16]
 80059d2:	4620      	mov	r0, r4
 80059d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059d8:	08007e37 	.word	0x08007e37
 80059dc:	08007e48 	.word	0x08007e48

080059e0 <__hi0bits>:
 80059e0:	0c02      	lsrs	r2, r0, #16
 80059e2:	0412      	lsls	r2, r2, #16
 80059e4:	4603      	mov	r3, r0
 80059e6:	b9ca      	cbnz	r2, 8005a1c <__hi0bits+0x3c>
 80059e8:	0403      	lsls	r3, r0, #16
 80059ea:	2010      	movs	r0, #16
 80059ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80059f0:	bf04      	itt	eq
 80059f2:	021b      	lsleq	r3, r3, #8
 80059f4:	3008      	addeq	r0, #8
 80059f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80059fa:	bf04      	itt	eq
 80059fc:	011b      	lsleq	r3, r3, #4
 80059fe:	3004      	addeq	r0, #4
 8005a00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005a04:	bf04      	itt	eq
 8005a06:	009b      	lsleq	r3, r3, #2
 8005a08:	3002      	addeq	r0, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	db05      	blt.n	8005a1a <__hi0bits+0x3a>
 8005a0e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005a12:	f100 0001 	add.w	r0, r0, #1
 8005a16:	bf08      	it	eq
 8005a18:	2020      	moveq	r0, #32
 8005a1a:	4770      	bx	lr
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	e7e5      	b.n	80059ec <__hi0bits+0xc>

08005a20 <__lo0bits>:
 8005a20:	6803      	ldr	r3, [r0, #0]
 8005a22:	4602      	mov	r2, r0
 8005a24:	f013 0007 	ands.w	r0, r3, #7
 8005a28:	d00b      	beq.n	8005a42 <__lo0bits+0x22>
 8005a2a:	07d9      	lsls	r1, r3, #31
 8005a2c:	d421      	bmi.n	8005a72 <__lo0bits+0x52>
 8005a2e:	0798      	lsls	r0, r3, #30
 8005a30:	bf49      	itett	mi
 8005a32:	085b      	lsrmi	r3, r3, #1
 8005a34:	089b      	lsrpl	r3, r3, #2
 8005a36:	2001      	movmi	r0, #1
 8005a38:	6013      	strmi	r3, [r2, #0]
 8005a3a:	bf5c      	itt	pl
 8005a3c:	2002      	movpl	r0, #2
 8005a3e:	6013      	strpl	r3, [r2, #0]
 8005a40:	4770      	bx	lr
 8005a42:	b299      	uxth	r1, r3
 8005a44:	b909      	cbnz	r1, 8005a4a <__lo0bits+0x2a>
 8005a46:	2010      	movs	r0, #16
 8005a48:	0c1b      	lsrs	r3, r3, #16
 8005a4a:	b2d9      	uxtb	r1, r3
 8005a4c:	b909      	cbnz	r1, 8005a52 <__lo0bits+0x32>
 8005a4e:	3008      	adds	r0, #8
 8005a50:	0a1b      	lsrs	r3, r3, #8
 8005a52:	0719      	lsls	r1, r3, #28
 8005a54:	bf04      	itt	eq
 8005a56:	091b      	lsreq	r3, r3, #4
 8005a58:	3004      	addeq	r0, #4
 8005a5a:	0799      	lsls	r1, r3, #30
 8005a5c:	bf04      	itt	eq
 8005a5e:	089b      	lsreq	r3, r3, #2
 8005a60:	3002      	addeq	r0, #2
 8005a62:	07d9      	lsls	r1, r3, #31
 8005a64:	d403      	bmi.n	8005a6e <__lo0bits+0x4e>
 8005a66:	085b      	lsrs	r3, r3, #1
 8005a68:	f100 0001 	add.w	r0, r0, #1
 8005a6c:	d003      	beq.n	8005a76 <__lo0bits+0x56>
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	4770      	bx	lr
 8005a72:	2000      	movs	r0, #0
 8005a74:	4770      	bx	lr
 8005a76:	2020      	movs	r0, #32
 8005a78:	4770      	bx	lr
	...

08005a7c <__i2b>:
 8005a7c:	b510      	push	{r4, lr}
 8005a7e:	460c      	mov	r4, r1
 8005a80:	2101      	movs	r1, #1
 8005a82:	f7ff ff05 	bl	8005890 <_Balloc>
 8005a86:	4602      	mov	r2, r0
 8005a88:	b928      	cbnz	r0, 8005a96 <__i2b+0x1a>
 8005a8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a8e:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <__i2b+0x24>)
 8005a90:	4804      	ldr	r0, [pc, #16]	; (8005aa4 <__i2b+0x28>)
 8005a92:	f000 fcdb 	bl	800644c <__assert_func>
 8005a96:	2301      	movs	r3, #1
 8005a98:	6144      	str	r4, [r0, #20]
 8005a9a:	6103      	str	r3, [r0, #16]
 8005a9c:	bd10      	pop	{r4, pc}
 8005a9e:	bf00      	nop
 8005aa0:	08007e37 	.word	0x08007e37
 8005aa4:	08007e48 	.word	0x08007e48

08005aa8 <__multiply>:
 8005aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aac:	4691      	mov	r9, r2
 8005aae:	690a      	ldr	r2, [r1, #16]
 8005ab0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	bfbe      	ittt	lt
 8005aba:	460b      	movlt	r3, r1
 8005abc:	464c      	movlt	r4, r9
 8005abe:	4699      	movlt	r9, r3
 8005ac0:	6927      	ldr	r7, [r4, #16]
 8005ac2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ac6:	68a3      	ldr	r3, [r4, #8]
 8005ac8:	6861      	ldr	r1, [r4, #4]
 8005aca:	eb07 060a 	add.w	r6, r7, sl
 8005ace:	42b3      	cmp	r3, r6
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	bfb8      	it	lt
 8005ad4:	3101      	addlt	r1, #1
 8005ad6:	f7ff fedb 	bl	8005890 <_Balloc>
 8005ada:	b930      	cbnz	r0, 8005aea <__multiply+0x42>
 8005adc:	4602      	mov	r2, r0
 8005ade:	f240 115d 	movw	r1, #349	; 0x15d
 8005ae2:	4b43      	ldr	r3, [pc, #268]	; (8005bf0 <__multiply+0x148>)
 8005ae4:	4843      	ldr	r0, [pc, #268]	; (8005bf4 <__multiply+0x14c>)
 8005ae6:	f000 fcb1 	bl	800644c <__assert_func>
 8005aea:	f100 0514 	add.w	r5, r0, #20
 8005aee:	462b      	mov	r3, r5
 8005af0:	2200      	movs	r2, #0
 8005af2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005af6:	4543      	cmp	r3, r8
 8005af8:	d321      	bcc.n	8005b3e <__multiply+0x96>
 8005afa:	f104 0314 	add.w	r3, r4, #20
 8005afe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005b02:	f109 0314 	add.w	r3, r9, #20
 8005b06:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005b0a:	9202      	str	r2, [sp, #8]
 8005b0c:	1b3a      	subs	r2, r7, r4
 8005b0e:	3a15      	subs	r2, #21
 8005b10:	f022 0203 	bic.w	r2, r2, #3
 8005b14:	3204      	adds	r2, #4
 8005b16:	f104 0115 	add.w	r1, r4, #21
 8005b1a:	428f      	cmp	r7, r1
 8005b1c:	bf38      	it	cc
 8005b1e:	2204      	movcc	r2, #4
 8005b20:	9201      	str	r2, [sp, #4]
 8005b22:	9a02      	ldr	r2, [sp, #8]
 8005b24:	9303      	str	r3, [sp, #12]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d80c      	bhi.n	8005b44 <__multiply+0x9c>
 8005b2a:	2e00      	cmp	r6, #0
 8005b2c:	dd03      	ble.n	8005b36 <__multiply+0x8e>
 8005b2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d059      	beq.n	8005bea <__multiply+0x142>
 8005b36:	6106      	str	r6, [r0, #16]
 8005b38:	b005      	add	sp, #20
 8005b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3e:	f843 2b04 	str.w	r2, [r3], #4
 8005b42:	e7d8      	b.n	8005af6 <__multiply+0x4e>
 8005b44:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b48:	f1ba 0f00 	cmp.w	sl, #0
 8005b4c:	d023      	beq.n	8005b96 <__multiply+0xee>
 8005b4e:	46a9      	mov	r9, r5
 8005b50:	f04f 0c00 	mov.w	ip, #0
 8005b54:	f104 0e14 	add.w	lr, r4, #20
 8005b58:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b5c:	f8d9 1000 	ldr.w	r1, [r9]
 8005b60:	fa1f fb82 	uxth.w	fp, r2
 8005b64:	b289      	uxth	r1, r1
 8005b66:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b6a:	4461      	add	r1, ip
 8005b6c:	f8d9 c000 	ldr.w	ip, [r9]
 8005b70:	0c12      	lsrs	r2, r2, #16
 8005b72:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005b76:	fb0a c202 	mla	r2, sl, r2, ip
 8005b7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b7e:	b289      	uxth	r1, r1
 8005b80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b84:	4577      	cmp	r7, lr
 8005b86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b8a:	f849 1b04 	str.w	r1, [r9], #4
 8005b8e:	d8e3      	bhi.n	8005b58 <__multiply+0xb0>
 8005b90:	9a01      	ldr	r2, [sp, #4]
 8005b92:	f845 c002 	str.w	ip, [r5, r2]
 8005b96:	9a03      	ldr	r2, [sp, #12]
 8005b98:	3304      	adds	r3, #4
 8005b9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b9e:	f1b9 0f00 	cmp.w	r9, #0
 8005ba2:	d020      	beq.n	8005be6 <__multiply+0x13e>
 8005ba4:	46ae      	mov	lr, r5
 8005ba6:	f04f 0a00 	mov.w	sl, #0
 8005baa:	6829      	ldr	r1, [r5, #0]
 8005bac:	f104 0c14 	add.w	ip, r4, #20
 8005bb0:	f8bc b000 	ldrh.w	fp, [ip]
 8005bb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005bb8:	b289      	uxth	r1, r1
 8005bba:	fb09 220b 	mla	r2, r9, fp, r2
 8005bbe:	4492      	add	sl, r2
 8005bc0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005bc4:	f84e 1b04 	str.w	r1, [lr], #4
 8005bc8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005bcc:	f8be 1000 	ldrh.w	r1, [lr]
 8005bd0:	0c12      	lsrs	r2, r2, #16
 8005bd2:	fb09 1102 	mla	r1, r9, r2, r1
 8005bd6:	4567      	cmp	r7, ip
 8005bd8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005bdc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005be0:	d8e6      	bhi.n	8005bb0 <__multiply+0x108>
 8005be2:	9a01      	ldr	r2, [sp, #4]
 8005be4:	50a9      	str	r1, [r5, r2]
 8005be6:	3504      	adds	r5, #4
 8005be8:	e79b      	b.n	8005b22 <__multiply+0x7a>
 8005bea:	3e01      	subs	r6, #1
 8005bec:	e79d      	b.n	8005b2a <__multiply+0x82>
 8005bee:	bf00      	nop
 8005bf0:	08007e37 	.word	0x08007e37
 8005bf4:	08007e48 	.word	0x08007e48

08005bf8 <__pow5mult>:
 8005bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bfc:	4615      	mov	r5, r2
 8005bfe:	f012 0203 	ands.w	r2, r2, #3
 8005c02:	4606      	mov	r6, r0
 8005c04:	460f      	mov	r7, r1
 8005c06:	d007      	beq.n	8005c18 <__pow5mult+0x20>
 8005c08:	4c25      	ldr	r4, [pc, #148]	; (8005ca0 <__pow5mult+0xa8>)
 8005c0a:	3a01      	subs	r2, #1
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c12:	f7ff fe9f 	bl	8005954 <__multadd>
 8005c16:	4607      	mov	r7, r0
 8005c18:	10ad      	asrs	r5, r5, #2
 8005c1a:	d03d      	beq.n	8005c98 <__pow5mult+0xa0>
 8005c1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c1e:	b97c      	cbnz	r4, 8005c40 <__pow5mult+0x48>
 8005c20:	2010      	movs	r0, #16
 8005c22:	f7ff fe1f 	bl	8005864 <malloc>
 8005c26:	4602      	mov	r2, r0
 8005c28:	6270      	str	r0, [r6, #36]	; 0x24
 8005c2a:	b928      	cbnz	r0, 8005c38 <__pow5mult+0x40>
 8005c2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005c30:	4b1c      	ldr	r3, [pc, #112]	; (8005ca4 <__pow5mult+0xac>)
 8005c32:	481d      	ldr	r0, [pc, #116]	; (8005ca8 <__pow5mult+0xb0>)
 8005c34:	f000 fc0a 	bl	800644c <__assert_func>
 8005c38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c3c:	6004      	str	r4, [r0, #0]
 8005c3e:	60c4      	str	r4, [r0, #12]
 8005c40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c48:	b94c      	cbnz	r4, 8005c5e <__pow5mult+0x66>
 8005c4a:	f240 2171 	movw	r1, #625	; 0x271
 8005c4e:	4630      	mov	r0, r6
 8005c50:	f7ff ff14 	bl	8005a7c <__i2b>
 8005c54:	2300      	movs	r3, #0
 8005c56:	4604      	mov	r4, r0
 8005c58:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c5c:	6003      	str	r3, [r0, #0]
 8005c5e:	f04f 0900 	mov.w	r9, #0
 8005c62:	07eb      	lsls	r3, r5, #31
 8005c64:	d50a      	bpl.n	8005c7c <__pow5mult+0x84>
 8005c66:	4639      	mov	r1, r7
 8005c68:	4622      	mov	r2, r4
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	f7ff ff1c 	bl	8005aa8 <__multiply>
 8005c70:	4680      	mov	r8, r0
 8005c72:	4639      	mov	r1, r7
 8005c74:	4630      	mov	r0, r6
 8005c76:	f7ff fe4b 	bl	8005910 <_Bfree>
 8005c7a:	4647      	mov	r7, r8
 8005c7c:	106d      	asrs	r5, r5, #1
 8005c7e:	d00b      	beq.n	8005c98 <__pow5mult+0xa0>
 8005c80:	6820      	ldr	r0, [r4, #0]
 8005c82:	b938      	cbnz	r0, 8005c94 <__pow5mult+0x9c>
 8005c84:	4622      	mov	r2, r4
 8005c86:	4621      	mov	r1, r4
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f7ff ff0d 	bl	8005aa8 <__multiply>
 8005c8e:	6020      	str	r0, [r4, #0]
 8005c90:	f8c0 9000 	str.w	r9, [r0]
 8005c94:	4604      	mov	r4, r0
 8005c96:	e7e4      	b.n	8005c62 <__pow5mult+0x6a>
 8005c98:	4638      	mov	r0, r7
 8005c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c9e:	bf00      	nop
 8005ca0:	08007f98 	.word	0x08007f98
 8005ca4:	08007dc5 	.word	0x08007dc5
 8005ca8:	08007e48 	.word	0x08007e48

08005cac <__lshift>:
 8005cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	4607      	mov	r7, r0
 8005cb4:	4691      	mov	r9, r2
 8005cb6:	6923      	ldr	r3, [r4, #16]
 8005cb8:	6849      	ldr	r1, [r1, #4]
 8005cba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cbe:	68a3      	ldr	r3, [r4, #8]
 8005cc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cc4:	f108 0601 	add.w	r6, r8, #1
 8005cc8:	42b3      	cmp	r3, r6
 8005cca:	db0b      	blt.n	8005ce4 <__lshift+0x38>
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f7ff fddf 	bl	8005890 <_Balloc>
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	b948      	cbnz	r0, 8005cea <__lshift+0x3e>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005cdc:	4b29      	ldr	r3, [pc, #164]	; (8005d84 <__lshift+0xd8>)
 8005cde:	482a      	ldr	r0, [pc, #168]	; (8005d88 <__lshift+0xdc>)
 8005ce0:	f000 fbb4 	bl	800644c <__assert_func>
 8005ce4:	3101      	adds	r1, #1
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	e7ee      	b.n	8005cc8 <__lshift+0x1c>
 8005cea:	2300      	movs	r3, #0
 8005cec:	f100 0114 	add.w	r1, r0, #20
 8005cf0:	f100 0210 	add.w	r2, r0, #16
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	4553      	cmp	r3, sl
 8005cf8:	db37      	blt.n	8005d6a <__lshift+0xbe>
 8005cfa:	6920      	ldr	r0, [r4, #16]
 8005cfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d00:	f104 0314 	add.w	r3, r4, #20
 8005d04:	f019 091f 	ands.w	r9, r9, #31
 8005d08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005d10:	d02f      	beq.n	8005d72 <__lshift+0xc6>
 8005d12:	468a      	mov	sl, r1
 8005d14:	f04f 0c00 	mov.w	ip, #0
 8005d18:	f1c9 0e20 	rsb	lr, r9, #32
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	fa02 f209 	lsl.w	r2, r2, r9
 8005d22:	ea42 020c 	orr.w	r2, r2, ip
 8005d26:	f84a 2b04 	str.w	r2, [sl], #4
 8005d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d2e:	4298      	cmp	r0, r3
 8005d30:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005d34:	d8f2      	bhi.n	8005d1c <__lshift+0x70>
 8005d36:	1b03      	subs	r3, r0, r4
 8005d38:	3b15      	subs	r3, #21
 8005d3a:	f023 0303 	bic.w	r3, r3, #3
 8005d3e:	3304      	adds	r3, #4
 8005d40:	f104 0215 	add.w	r2, r4, #21
 8005d44:	4290      	cmp	r0, r2
 8005d46:	bf38      	it	cc
 8005d48:	2304      	movcc	r3, #4
 8005d4a:	f841 c003 	str.w	ip, [r1, r3]
 8005d4e:	f1bc 0f00 	cmp.w	ip, #0
 8005d52:	d001      	beq.n	8005d58 <__lshift+0xac>
 8005d54:	f108 0602 	add.w	r6, r8, #2
 8005d58:	3e01      	subs	r6, #1
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	4621      	mov	r1, r4
 8005d5e:	612e      	str	r6, [r5, #16]
 8005d60:	f7ff fdd6 	bl	8005910 <_Bfree>
 8005d64:	4628      	mov	r0, r5
 8005d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d6e:	3301      	adds	r3, #1
 8005d70:	e7c1      	b.n	8005cf6 <__lshift+0x4a>
 8005d72:	3904      	subs	r1, #4
 8005d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d78:	4298      	cmp	r0, r3
 8005d7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d7e:	d8f9      	bhi.n	8005d74 <__lshift+0xc8>
 8005d80:	e7ea      	b.n	8005d58 <__lshift+0xac>
 8005d82:	bf00      	nop
 8005d84:	08007e37 	.word	0x08007e37
 8005d88:	08007e48 	.word	0x08007e48

08005d8c <__mcmp>:
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	690a      	ldr	r2, [r1, #16]
 8005d90:	6900      	ldr	r0, [r0, #16]
 8005d92:	b530      	push	{r4, r5, lr}
 8005d94:	1a80      	subs	r0, r0, r2
 8005d96:	d10d      	bne.n	8005db4 <__mcmp+0x28>
 8005d98:	3314      	adds	r3, #20
 8005d9a:	3114      	adds	r1, #20
 8005d9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005da0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005da4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005da8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005dac:	4295      	cmp	r5, r2
 8005dae:	d002      	beq.n	8005db6 <__mcmp+0x2a>
 8005db0:	d304      	bcc.n	8005dbc <__mcmp+0x30>
 8005db2:	2001      	movs	r0, #1
 8005db4:	bd30      	pop	{r4, r5, pc}
 8005db6:	42a3      	cmp	r3, r4
 8005db8:	d3f4      	bcc.n	8005da4 <__mcmp+0x18>
 8005dba:	e7fb      	b.n	8005db4 <__mcmp+0x28>
 8005dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc0:	e7f8      	b.n	8005db4 <__mcmp+0x28>
	...

08005dc4 <__mdiff>:
 8005dc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc8:	460d      	mov	r5, r1
 8005dca:	4607      	mov	r7, r0
 8005dcc:	4611      	mov	r1, r2
 8005dce:	4628      	mov	r0, r5
 8005dd0:	4614      	mov	r4, r2
 8005dd2:	f7ff ffdb 	bl	8005d8c <__mcmp>
 8005dd6:	1e06      	subs	r6, r0, #0
 8005dd8:	d111      	bne.n	8005dfe <__mdiff+0x3a>
 8005dda:	4631      	mov	r1, r6
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f7ff fd57 	bl	8005890 <_Balloc>
 8005de2:	4602      	mov	r2, r0
 8005de4:	b928      	cbnz	r0, 8005df2 <__mdiff+0x2e>
 8005de6:	f240 2132 	movw	r1, #562	; 0x232
 8005dea:	4b3a      	ldr	r3, [pc, #232]	; (8005ed4 <__mdiff+0x110>)
 8005dec:	483a      	ldr	r0, [pc, #232]	; (8005ed8 <__mdiff+0x114>)
 8005dee:	f000 fb2d 	bl	800644c <__assert_func>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005df8:	4610      	mov	r0, r2
 8005dfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfe:	bfa4      	itt	ge
 8005e00:	4623      	movge	r3, r4
 8005e02:	462c      	movge	r4, r5
 8005e04:	4638      	mov	r0, r7
 8005e06:	6861      	ldr	r1, [r4, #4]
 8005e08:	bfa6      	itte	ge
 8005e0a:	461d      	movge	r5, r3
 8005e0c:	2600      	movge	r6, #0
 8005e0e:	2601      	movlt	r6, #1
 8005e10:	f7ff fd3e 	bl	8005890 <_Balloc>
 8005e14:	4602      	mov	r2, r0
 8005e16:	b918      	cbnz	r0, 8005e20 <__mdiff+0x5c>
 8005e18:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005e1c:	4b2d      	ldr	r3, [pc, #180]	; (8005ed4 <__mdiff+0x110>)
 8005e1e:	e7e5      	b.n	8005dec <__mdiff+0x28>
 8005e20:	f102 0814 	add.w	r8, r2, #20
 8005e24:	46c2      	mov	sl, r8
 8005e26:	f04f 0c00 	mov.w	ip, #0
 8005e2a:	6927      	ldr	r7, [r4, #16]
 8005e2c:	60c6      	str	r6, [r0, #12]
 8005e2e:	692e      	ldr	r6, [r5, #16]
 8005e30:	f104 0014 	add.w	r0, r4, #20
 8005e34:	f105 0914 	add.w	r9, r5, #20
 8005e38:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005e3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e40:	3410      	adds	r4, #16
 8005e42:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005e46:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e4a:	fa1f f18b 	uxth.w	r1, fp
 8005e4e:	448c      	add	ip, r1
 8005e50:	b299      	uxth	r1, r3
 8005e52:	0c1b      	lsrs	r3, r3, #16
 8005e54:	ebac 0101 	sub.w	r1, ip, r1
 8005e58:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e5c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005e60:	b289      	uxth	r1, r1
 8005e62:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005e66:	454e      	cmp	r6, r9
 8005e68:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005e6c:	f84a 3b04 	str.w	r3, [sl], #4
 8005e70:	d8e7      	bhi.n	8005e42 <__mdiff+0x7e>
 8005e72:	1b73      	subs	r3, r6, r5
 8005e74:	3b15      	subs	r3, #21
 8005e76:	f023 0303 	bic.w	r3, r3, #3
 8005e7a:	3515      	adds	r5, #21
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	42ae      	cmp	r6, r5
 8005e80:	bf38      	it	cc
 8005e82:	2304      	movcc	r3, #4
 8005e84:	4418      	add	r0, r3
 8005e86:	4443      	add	r3, r8
 8005e88:	461e      	mov	r6, r3
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	4575      	cmp	r5, lr
 8005e8e:	d30e      	bcc.n	8005eae <__mdiff+0xea>
 8005e90:	f10e 0103 	add.w	r1, lr, #3
 8005e94:	1a09      	subs	r1, r1, r0
 8005e96:	f021 0103 	bic.w	r1, r1, #3
 8005e9a:	3803      	subs	r0, #3
 8005e9c:	4586      	cmp	lr, r0
 8005e9e:	bf38      	it	cc
 8005ea0:	2100      	movcc	r1, #0
 8005ea2:	4419      	add	r1, r3
 8005ea4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005ea8:	b18b      	cbz	r3, 8005ece <__mdiff+0x10a>
 8005eaa:	6117      	str	r7, [r2, #16]
 8005eac:	e7a4      	b.n	8005df8 <__mdiff+0x34>
 8005eae:	f855 8b04 	ldr.w	r8, [r5], #4
 8005eb2:	fa1f f188 	uxth.w	r1, r8
 8005eb6:	4461      	add	r1, ip
 8005eb8:	140c      	asrs	r4, r1, #16
 8005eba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ebe:	b289      	uxth	r1, r1
 8005ec0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005ec4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005ec8:	f846 1b04 	str.w	r1, [r6], #4
 8005ecc:	e7de      	b.n	8005e8c <__mdiff+0xc8>
 8005ece:	3f01      	subs	r7, #1
 8005ed0:	e7e8      	b.n	8005ea4 <__mdiff+0xe0>
 8005ed2:	bf00      	nop
 8005ed4:	08007e37 	.word	0x08007e37
 8005ed8:	08007e48 	.word	0x08007e48

08005edc <__d2b>:
 8005edc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005ee6:	4690      	mov	r8, r2
 8005ee8:	461d      	mov	r5, r3
 8005eea:	f7ff fcd1 	bl	8005890 <_Balloc>
 8005eee:	4604      	mov	r4, r0
 8005ef0:	b930      	cbnz	r0, 8005f00 <__d2b+0x24>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	f240 310a 	movw	r1, #778	; 0x30a
 8005ef8:	4b24      	ldr	r3, [pc, #144]	; (8005f8c <__d2b+0xb0>)
 8005efa:	4825      	ldr	r0, [pc, #148]	; (8005f90 <__d2b+0xb4>)
 8005efc:	f000 faa6 	bl	800644c <__assert_func>
 8005f00:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005f04:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005f08:	bb2d      	cbnz	r5, 8005f56 <__d2b+0x7a>
 8005f0a:	9301      	str	r3, [sp, #4]
 8005f0c:	f1b8 0300 	subs.w	r3, r8, #0
 8005f10:	d026      	beq.n	8005f60 <__d2b+0x84>
 8005f12:	4668      	mov	r0, sp
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	f7ff fd83 	bl	8005a20 <__lo0bits>
 8005f1a:	9900      	ldr	r1, [sp, #0]
 8005f1c:	b1f0      	cbz	r0, 8005f5c <__d2b+0x80>
 8005f1e:	9a01      	ldr	r2, [sp, #4]
 8005f20:	f1c0 0320 	rsb	r3, r0, #32
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	40c2      	lsrs	r2, r0
 8005f2c:	6163      	str	r3, [r4, #20]
 8005f2e:	9201      	str	r2, [sp, #4]
 8005f30:	9b01      	ldr	r3, [sp, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	bf14      	ite	ne
 8005f36:	2102      	movne	r1, #2
 8005f38:	2101      	moveq	r1, #1
 8005f3a:	61a3      	str	r3, [r4, #24]
 8005f3c:	6121      	str	r1, [r4, #16]
 8005f3e:	b1c5      	cbz	r5, 8005f72 <__d2b+0x96>
 8005f40:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f44:	4405      	add	r5, r0
 8005f46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f4a:	603d      	str	r5, [r7, #0]
 8005f4c:	6030      	str	r0, [r6, #0]
 8005f4e:	4620      	mov	r0, r4
 8005f50:	b002      	add	sp, #8
 8005f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f5a:	e7d6      	b.n	8005f0a <__d2b+0x2e>
 8005f5c:	6161      	str	r1, [r4, #20]
 8005f5e:	e7e7      	b.n	8005f30 <__d2b+0x54>
 8005f60:	a801      	add	r0, sp, #4
 8005f62:	f7ff fd5d 	bl	8005a20 <__lo0bits>
 8005f66:	2101      	movs	r1, #1
 8005f68:	9b01      	ldr	r3, [sp, #4]
 8005f6a:	6121      	str	r1, [r4, #16]
 8005f6c:	6163      	str	r3, [r4, #20]
 8005f6e:	3020      	adds	r0, #32
 8005f70:	e7e5      	b.n	8005f3e <__d2b+0x62>
 8005f72:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005f76:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f7a:	6038      	str	r0, [r7, #0]
 8005f7c:	6918      	ldr	r0, [r3, #16]
 8005f7e:	f7ff fd2f 	bl	80059e0 <__hi0bits>
 8005f82:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005f86:	6031      	str	r1, [r6, #0]
 8005f88:	e7e1      	b.n	8005f4e <__d2b+0x72>
 8005f8a:	bf00      	nop
 8005f8c:	08007e37 	.word	0x08007e37
 8005f90:	08007e48 	.word	0x08007e48

08005f94 <_calloc_r>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	fba1 5402 	umull	r5, r4, r1, r2
 8005f9a:	b934      	cbnz	r4, 8005faa <_calloc_r+0x16>
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	f000 f875 	bl	800608c <_malloc_r>
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	b928      	cbnz	r0, 8005fb2 <_calloc_r+0x1e>
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	bd70      	pop	{r4, r5, r6, pc}
 8005faa:	220c      	movs	r2, #12
 8005fac:	2600      	movs	r6, #0
 8005fae:	6002      	str	r2, [r0, #0]
 8005fb0:	e7f9      	b.n	8005fa6 <_calloc_r+0x12>
 8005fb2:	462a      	mov	r2, r5
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	f7fe f94d 	bl	8004254 <memset>
 8005fba:	e7f4      	b.n	8005fa6 <_calloc_r+0x12>

08005fbc <_free_r>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	2900      	cmp	r1, #0
 8005fc2:	d040      	beq.n	8006046 <_free_r+0x8a>
 8005fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc8:	1f0c      	subs	r4, r1, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	bfb8      	it	lt
 8005fce:	18e4      	addlt	r4, r4, r3
 8005fd0:	f000 fa7e 	bl	80064d0 <__malloc_lock>
 8005fd4:	4a1c      	ldr	r2, [pc, #112]	; (8006048 <_free_r+0x8c>)
 8005fd6:	6813      	ldr	r3, [r2, #0]
 8005fd8:	b933      	cbnz	r3, 8005fe8 <_free_r+0x2c>
 8005fda:	6063      	str	r3, [r4, #4]
 8005fdc:	6014      	str	r4, [r2, #0]
 8005fde:	4628      	mov	r0, r5
 8005fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fe4:	f000 ba7a 	b.w	80064dc <__malloc_unlock>
 8005fe8:	42a3      	cmp	r3, r4
 8005fea:	d908      	bls.n	8005ffe <_free_r+0x42>
 8005fec:	6820      	ldr	r0, [r4, #0]
 8005fee:	1821      	adds	r1, r4, r0
 8005ff0:	428b      	cmp	r3, r1
 8005ff2:	bf01      	itttt	eq
 8005ff4:	6819      	ldreq	r1, [r3, #0]
 8005ff6:	685b      	ldreq	r3, [r3, #4]
 8005ff8:	1809      	addeq	r1, r1, r0
 8005ffa:	6021      	streq	r1, [r4, #0]
 8005ffc:	e7ed      	b.n	8005fda <_free_r+0x1e>
 8005ffe:	461a      	mov	r2, r3
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	b10b      	cbz	r3, 8006008 <_free_r+0x4c>
 8006004:	42a3      	cmp	r3, r4
 8006006:	d9fa      	bls.n	8005ffe <_free_r+0x42>
 8006008:	6811      	ldr	r1, [r2, #0]
 800600a:	1850      	adds	r0, r2, r1
 800600c:	42a0      	cmp	r0, r4
 800600e:	d10b      	bne.n	8006028 <_free_r+0x6c>
 8006010:	6820      	ldr	r0, [r4, #0]
 8006012:	4401      	add	r1, r0
 8006014:	1850      	adds	r0, r2, r1
 8006016:	4283      	cmp	r3, r0
 8006018:	6011      	str	r1, [r2, #0]
 800601a:	d1e0      	bne.n	8005fde <_free_r+0x22>
 800601c:	6818      	ldr	r0, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	4401      	add	r1, r0
 8006022:	6011      	str	r1, [r2, #0]
 8006024:	6053      	str	r3, [r2, #4]
 8006026:	e7da      	b.n	8005fde <_free_r+0x22>
 8006028:	d902      	bls.n	8006030 <_free_r+0x74>
 800602a:	230c      	movs	r3, #12
 800602c:	602b      	str	r3, [r5, #0]
 800602e:	e7d6      	b.n	8005fde <_free_r+0x22>
 8006030:	6820      	ldr	r0, [r4, #0]
 8006032:	1821      	adds	r1, r4, r0
 8006034:	428b      	cmp	r3, r1
 8006036:	bf01      	itttt	eq
 8006038:	6819      	ldreq	r1, [r3, #0]
 800603a:	685b      	ldreq	r3, [r3, #4]
 800603c:	1809      	addeq	r1, r1, r0
 800603e:	6021      	streq	r1, [r4, #0]
 8006040:	6063      	str	r3, [r4, #4]
 8006042:	6054      	str	r4, [r2, #4]
 8006044:	e7cb      	b.n	8005fde <_free_r+0x22>
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	2000077c 	.word	0x2000077c

0800604c <sbrk_aligned>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	4e0e      	ldr	r6, [pc, #56]	; (8006088 <sbrk_aligned+0x3c>)
 8006050:	460c      	mov	r4, r1
 8006052:	6831      	ldr	r1, [r6, #0]
 8006054:	4605      	mov	r5, r0
 8006056:	b911      	cbnz	r1, 800605e <sbrk_aligned+0x12>
 8006058:	f000 f9e8 	bl	800642c <_sbrk_r>
 800605c:	6030      	str	r0, [r6, #0]
 800605e:	4621      	mov	r1, r4
 8006060:	4628      	mov	r0, r5
 8006062:	f000 f9e3 	bl	800642c <_sbrk_r>
 8006066:	1c43      	adds	r3, r0, #1
 8006068:	d00a      	beq.n	8006080 <sbrk_aligned+0x34>
 800606a:	1cc4      	adds	r4, r0, #3
 800606c:	f024 0403 	bic.w	r4, r4, #3
 8006070:	42a0      	cmp	r0, r4
 8006072:	d007      	beq.n	8006084 <sbrk_aligned+0x38>
 8006074:	1a21      	subs	r1, r4, r0
 8006076:	4628      	mov	r0, r5
 8006078:	f000 f9d8 	bl	800642c <_sbrk_r>
 800607c:	3001      	adds	r0, #1
 800607e:	d101      	bne.n	8006084 <sbrk_aligned+0x38>
 8006080:	f04f 34ff 	mov.w	r4, #4294967295
 8006084:	4620      	mov	r0, r4
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	20000780 	.word	0x20000780

0800608c <_malloc_r>:
 800608c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006090:	1ccd      	adds	r5, r1, #3
 8006092:	f025 0503 	bic.w	r5, r5, #3
 8006096:	3508      	adds	r5, #8
 8006098:	2d0c      	cmp	r5, #12
 800609a:	bf38      	it	cc
 800609c:	250c      	movcc	r5, #12
 800609e:	2d00      	cmp	r5, #0
 80060a0:	4607      	mov	r7, r0
 80060a2:	db01      	blt.n	80060a8 <_malloc_r+0x1c>
 80060a4:	42a9      	cmp	r1, r5
 80060a6:	d905      	bls.n	80060b4 <_malloc_r+0x28>
 80060a8:	230c      	movs	r3, #12
 80060aa:	2600      	movs	r6, #0
 80060ac:	603b      	str	r3, [r7, #0]
 80060ae:	4630      	mov	r0, r6
 80060b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060b4:	4e2e      	ldr	r6, [pc, #184]	; (8006170 <_malloc_r+0xe4>)
 80060b6:	f000 fa0b 	bl	80064d0 <__malloc_lock>
 80060ba:	6833      	ldr	r3, [r6, #0]
 80060bc:	461c      	mov	r4, r3
 80060be:	bb34      	cbnz	r4, 800610e <_malloc_r+0x82>
 80060c0:	4629      	mov	r1, r5
 80060c2:	4638      	mov	r0, r7
 80060c4:	f7ff ffc2 	bl	800604c <sbrk_aligned>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	4604      	mov	r4, r0
 80060cc:	d14d      	bne.n	800616a <_malloc_r+0xde>
 80060ce:	6834      	ldr	r4, [r6, #0]
 80060d0:	4626      	mov	r6, r4
 80060d2:	2e00      	cmp	r6, #0
 80060d4:	d140      	bne.n	8006158 <_malloc_r+0xcc>
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	4631      	mov	r1, r6
 80060da:	4638      	mov	r0, r7
 80060dc:	eb04 0803 	add.w	r8, r4, r3
 80060e0:	f000 f9a4 	bl	800642c <_sbrk_r>
 80060e4:	4580      	cmp	r8, r0
 80060e6:	d13a      	bne.n	800615e <_malloc_r+0xd2>
 80060e8:	6821      	ldr	r1, [r4, #0]
 80060ea:	3503      	adds	r5, #3
 80060ec:	1a6d      	subs	r5, r5, r1
 80060ee:	f025 0503 	bic.w	r5, r5, #3
 80060f2:	3508      	adds	r5, #8
 80060f4:	2d0c      	cmp	r5, #12
 80060f6:	bf38      	it	cc
 80060f8:	250c      	movcc	r5, #12
 80060fa:	4638      	mov	r0, r7
 80060fc:	4629      	mov	r1, r5
 80060fe:	f7ff ffa5 	bl	800604c <sbrk_aligned>
 8006102:	3001      	adds	r0, #1
 8006104:	d02b      	beq.n	800615e <_malloc_r+0xd2>
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	442b      	add	r3, r5
 800610a:	6023      	str	r3, [r4, #0]
 800610c:	e00e      	b.n	800612c <_malloc_r+0xa0>
 800610e:	6822      	ldr	r2, [r4, #0]
 8006110:	1b52      	subs	r2, r2, r5
 8006112:	d41e      	bmi.n	8006152 <_malloc_r+0xc6>
 8006114:	2a0b      	cmp	r2, #11
 8006116:	d916      	bls.n	8006146 <_malloc_r+0xba>
 8006118:	1961      	adds	r1, r4, r5
 800611a:	42a3      	cmp	r3, r4
 800611c:	6025      	str	r5, [r4, #0]
 800611e:	bf18      	it	ne
 8006120:	6059      	strne	r1, [r3, #4]
 8006122:	6863      	ldr	r3, [r4, #4]
 8006124:	bf08      	it	eq
 8006126:	6031      	streq	r1, [r6, #0]
 8006128:	5162      	str	r2, [r4, r5]
 800612a:	604b      	str	r3, [r1, #4]
 800612c:	4638      	mov	r0, r7
 800612e:	f104 060b 	add.w	r6, r4, #11
 8006132:	f000 f9d3 	bl	80064dc <__malloc_unlock>
 8006136:	f026 0607 	bic.w	r6, r6, #7
 800613a:	1d23      	adds	r3, r4, #4
 800613c:	1af2      	subs	r2, r6, r3
 800613e:	d0b6      	beq.n	80060ae <_malloc_r+0x22>
 8006140:	1b9b      	subs	r3, r3, r6
 8006142:	50a3      	str	r3, [r4, r2]
 8006144:	e7b3      	b.n	80060ae <_malloc_r+0x22>
 8006146:	6862      	ldr	r2, [r4, #4]
 8006148:	42a3      	cmp	r3, r4
 800614a:	bf0c      	ite	eq
 800614c:	6032      	streq	r2, [r6, #0]
 800614e:	605a      	strne	r2, [r3, #4]
 8006150:	e7ec      	b.n	800612c <_malloc_r+0xa0>
 8006152:	4623      	mov	r3, r4
 8006154:	6864      	ldr	r4, [r4, #4]
 8006156:	e7b2      	b.n	80060be <_malloc_r+0x32>
 8006158:	4634      	mov	r4, r6
 800615a:	6876      	ldr	r6, [r6, #4]
 800615c:	e7b9      	b.n	80060d2 <_malloc_r+0x46>
 800615e:	230c      	movs	r3, #12
 8006160:	4638      	mov	r0, r7
 8006162:	603b      	str	r3, [r7, #0]
 8006164:	f000 f9ba 	bl	80064dc <__malloc_unlock>
 8006168:	e7a1      	b.n	80060ae <_malloc_r+0x22>
 800616a:	6025      	str	r5, [r4, #0]
 800616c:	e7de      	b.n	800612c <_malloc_r+0xa0>
 800616e:	bf00      	nop
 8006170:	2000077c 	.word	0x2000077c

08006174 <__ssputs_r>:
 8006174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006178:	688e      	ldr	r6, [r1, #8]
 800617a:	4682      	mov	sl, r0
 800617c:	429e      	cmp	r6, r3
 800617e:	460c      	mov	r4, r1
 8006180:	4690      	mov	r8, r2
 8006182:	461f      	mov	r7, r3
 8006184:	d838      	bhi.n	80061f8 <__ssputs_r+0x84>
 8006186:	898a      	ldrh	r2, [r1, #12]
 8006188:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800618c:	d032      	beq.n	80061f4 <__ssputs_r+0x80>
 800618e:	6825      	ldr	r5, [r4, #0]
 8006190:	6909      	ldr	r1, [r1, #16]
 8006192:	3301      	adds	r3, #1
 8006194:	eba5 0901 	sub.w	r9, r5, r1
 8006198:	6965      	ldr	r5, [r4, #20]
 800619a:	444b      	add	r3, r9
 800619c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061a4:	106d      	asrs	r5, r5, #1
 80061a6:	429d      	cmp	r5, r3
 80061a8:	bf38      	it	cc
 80061aa:	461d      	movcc	r5, r3
 80061ac:	0553      	lsls	r3, r2, #21
 80061ae:	d531      	bpl.n	8006214 <__ssputs_r+0xa0>
 80061b0:	4629      	mov	r1, r5
 80061b2:	f7ff ff6b 	bl	800608c <_malloc_r>
 80061b6:	4606      	mov	r6, r0
 80061b8:	b950      	cbnz	r0, 80061d0 <__ssputs_r+0x5c>
 80061ba:	230c      	movs	r3, #12
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295
 80061c0:	f8ca 3000 	str.w	r3, [sl]
 80061c4:	89a3      	ldrh	r3, [r4, #12]
 80061c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ca:	81a3      	strh	r3, [r4, #12]
 80061cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d0:	464a      	mov	r2, r9
 80061d2:	6921      	ldr	r1, [r4, #16]
 80061d4:	f7fe f816 	bl	8004204 <memcpy>
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e2:	81a3      	strh	r3, [r4, #12]
 80061e4:	6126      	str	r6, [r4, #16]
 80061e6:	444e      	add	r6, r9
 80061e8:	6026      	str	r6, [r4, #0]
 80061ea:	463e      	mov	r6, r7
 80061ec:	6165      	str	r5, [r4, #20]
 80061ee:	eba5 0509 	sub.w	r5, r5, r9
 80061f2:	60a5      	str	r5, [r4, #8]
 80061f4:	42be      	cmp	r6, r7
 80061f6:	d900      	bls.n	80061fa <__ssputs_r+0x86>
 80061f8:	463e      	mov	r6, r7
 80061fa:	4632      	mov	r2, r6
 80061fc:	4641      	mov	r1, r8
 80061fe:	6820      	ldr	r0, [r4, #0]
 8006200:	f7fe f80e 	bl	8004220 <memmove>
 8006204:	68a3      	ldr	r3, [r4, #8]
 8006206:	2000      	movs	r0, #0
 8006208:	1b9b      	subs	r3, r3, r6
 800620a:	60a3      	str	r3, [r4, #8]
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	4433      	add	r3, r6
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	e7db      	b.n	80061cc <__ssputs_r+0x58>
 8006214:	462a      	mov	r2, r5
 8006216:	f000 f967 	bl	80064e8 <_realloc_r>
 800621a:	4606      	mov	r6, r0
 800621c:	2800      	cmp	r0, #0
 800621e:	d1e1      	bne.n	80061e4 <__ssputs_r+0x70>
 8006220:	4650      	mov	r0, sl
 8006222:	6921      	ldr	r1, [r4, #16]
 8006224:	f7ff feca 	bl	8005fbc <_free_r>
 8006228:	e7c7      	b.n	80061ba <__ssputs_r+0x46>
	...

0800622c <_svfiprintf_r>:
 800622c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006230:	4698      	mov	r8, r3
 8006232:	898b      	ldrh	r3, [r1, #12]
 8006234:	4607      	mov	r7, r0
 8006236:	061b      	lsls	r3, r3, #24
 8006238:	460d      	mov	r5, r1
 800623a:	4614      	mov	r4, r2
 800623c:	b09d      	sub	sp, #116	; 0x74
 800623e:	d50e      	bpl.n	800625e <_svfiprintf_r+0x32>
 8006240:	690b      	ldr	r3, [r1, #16]
 8006242:	b963      	cbnz	r3, 800625e <_svfiprintf_r+0x32>
 8006244:	2140      	movs	r1, #64	; 0x40
 8006246:	f7ff ff21 	bl	800608c <_malloc_r>
 800624a:	6028      	str	r0, [r5, #0]
 800624c:	6128      	str	r0, [r5, #16]
 800624e:	b920      	cbnz	r0, 800625a <_svfiprintf_r+0x2e>
 8006250:	230c      	movs	r3, #12
 8006252:	603b      	str	r3, [r7, #0]
 8006254:	f04f 30ff 	mov.w	r0, #4294967295
 8006258:	e0d1      	b.n	80063fe <_svfiprintf_r+0x1d2>
 800625a:	2340      	movs	r3, #64	; 0x40
 800625c:	616b      	str	r3, [r5, #20]
 800625e:	2300      	movs	r3, #0
 8006260:	9309      	str	r3, [sp, #36]	; 0x24
 8006262:	2320      	movs	r3, #32
 8006264:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006268:	2330      	movs	r3, #48	; 0x30
 800626a:	f04f 0901 	mov.w	r9, #1
 800626e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006272:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006418 <_svfiprintf_r+0x1ec>
 8006276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800627a:	4623      	mov	r3, r4
 800627c:	469a      	mov	sl, r3
 800627e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006282:	b10a      	cbz	r2, 8006288 <_svfiprintf_r+0x5c>
 8006284:	2a25      	cmp	r2, #37	; 0x25
 8006286:	d1f9      	bne.n	800627c <_svfiprintf_r+0x50>
 8006288:	ebba 0b04 	subs.w	fp, sl, r4
 800628c:	d00b      	beq.n	80062a6 <_svfiprintf_r+0x7a>
 800628e:	465b      	mov	r3, fp
 8006290:	4622      	mov	r2, r4
 8006292:	4629      	mov	r1, r5
 8006294:	4638      	mov	r0, r7
 8006296:	f7ff ff6d 	bl	8006174 <__ssputs_r>
 800629a:	3001      	adds	r0, #1
 800629c:	f000 80aa 	beq.w	80063f4 <_svfiprintf_r+0x1c8>
 80062a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062a2:	445a      	add	r2, fp
 80062a4:	9209      	str	r2, [sp, #36]	; 0x24
 80062a6:	f89a 3000 	ldrb.w	r3, [sl]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 80a2 	beq.w	80063f4 <_svfiprintf_r+0x1c8>
 80062b0:	2300      	movs	r3, #0
 80062b2:	f04f 32ff 	mov.w	r2, #4294967295
 80062b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062ba:	f10a 0a01 	add.w	sl, sl, #1
 80062be:	9304      	str	r3, [sp, #16]
 80062c0:	9307      	str	r3, [sp, #28]
 80062c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062c6:	931a      	str	r3, [sp, #104]	; 0x68
 80062c8:	4654      	mov	r4, sl
 80062ca:	2205      	movs	r2, #5
 80062cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d0:	4851      	ldr	r0, [pc, #324]	; (8006418 <_svfiprintf_r+0x1ec>)
 80062d2:	f7ff facf 	bl	8005874 <memchr>
 80062d6:	9a04      	ldr	r2, [sp, #16]
 80062d8:	b9d8      	cbnz	r0, 8006312 <_svfiprintf_r+0xe6>
 80062da:	06d0      	lsls	r0, r2, #27
 80062dc:	bf44      	itt	mi
 80062de:	2320      	movmi	r3, #32
 80062e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062e4:	0711      	lsls	r1, r2, #28
 80062e6:	bf44      	itt	mi
 80062e8:	232b      	movmi	r3, #43	; 0x2b
 80062ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062ee:	f89a 3000 	ldrb.w	r3, [sl]
 80062f2:	2b2a      	cmp	r3, #42	; 0x2a
 80062f4:	d015      	beq.n	8006322 <_svfiprintf_r+0xf6>
 80062f6:	4654      	mov	r4, sl
 80062f8:	2000      	movs	r0, #0
 80062fa:	f04f 0c0a 	mov.w	ip, #10
 80062fe:	9a07      	ldr	r2, [sp, #28]
 8006300:	4621      	mov	r1, r4
 8006302:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006306:	3b30      	subs	r3, #48	; 0x30
 8006308:	2b09      	cmp	r3, #9
 800630a:	d94e      	bls.n	80063aa <_svfiprintf_r+0x17e>
 800630c:	b1b0      	cbz	r0, 800633c <_svfiprintf_r+0x110>
 800630e:	9207      	str	r2, [sp, #28]
 8006310:	e014      	b.n	800633c <_svfiprintf_r+0x110>
 8006312:	eba0 0308 	sub.w	r3, r0, r8
 8006316:	fa09 f303 	lsl.w	r3, r9, r3
 800631a:	4313      	orrs	r3, r2
 800631c:	46a2      	mov	sl, r4
 800631e:	9304      	str	r3, [sp, #16]
 8006320:	e7d2      	b.n	80062c8 <_svfiprintf_r+0x9c>
 8006322:	9b03      	ldr	r3, [sp, #12]
 8006324:	1d19      	adds	r1, r3, #4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	9103      	str	r1, [sp, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	bfbb      	ittet	lt
 800632e:	425b      	neglt	r3, r3
 8006330:	f042 0202 	orrlt.w	r2, r2, #2
 8006334:	9307      	strge	r3, [sp, #28]
 8006336:	9307      	strlt	r3, [sp, #28]
 8006338:	bfb8      	it	lt
 800633a:	9204      	strlt	r2, [sp, #16]
 800633c:	7823      	ldrb	r3, [r4, #0]
 800633e:	2b2e      	cmp	r3, #46	; 0x2e
 8006340:	d10c      	bne.n	800635c <_svfiprintf_r+0x130>
 8006342:	7863      	ldrb	r3, [r4, #1]
 8006344:	2b2a      	cmp	r3, #42	; 0x2a
 8006346:	d135      	bne.n	80063b4 <_svfiprintf_r+0x188>
 8006348:	9b03      	ldr	r3, [sp, #12]
 800634a:	3402      	adds	r4, #2
 800634c:	1d1a      	adds	r2, r3, #4
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	9203      	str	r2, [sp, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	bfb8      	it	lt
 8006356:	f04f 33ff 	movlt.w	r3, #4294967295
 800635a:	9305      	str	r3, [sp, #20]
 800635c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800641c <_svfiprintf_r+0x1f0>
 8006360:	2203      	movs	r2, #3
 8006362:	4650      	mov	r0, sl
 8006364:	7821      	ldrb	r1, [r4, #0]
 8006366:	f7ff fa85 	bl	8005874 <memchr>
 800636a:	b140      	cbz	r0, 800637e <_svfiprintf_r+0x152>
 800636c:	2340      	movs	r3, #64	; 0x40
 800636e:	eba0 000a 	sub.w	r0, r0, sl
 8006372:	fa03 f000 	lsl.w	r0, r3, r0
 8006376:	9b04      	ldr	r3, [sp, #16]
 8006378:	3401      	adds	r4, #1
 800637a:	4303      	orrs	r3, r0
 800637c:	9304      	str	r3, [sp, #16]
 800637e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006382:	2206      	movs	r2, #6
 8006384:	4826      	ldr	r0, [pc, #152]	; (8006420 <_svfiprintf_r+0x1f4>)
 8006386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800638a:	f7ff fa73 	bl	8005874 <memchr>
 800638e:	2800      	cmp	r0, #0
 8006390:	d038      	beq.n	8006404 <_svfiprintf_r+0x1d8>
 8006392:	4b24      	ldr	r3, [pc, #144]	; (8006424 <_svfiprintf_r+0x1f8>)
 8006394:	bb1b      	cbnz	r3, 80063de <_svfiprintf_r+0x1b2>
 8006396:	9b03      	ldr	r3, [sp, #12]
 8006398:	3307      	adds	r3, #7
 800639a:	f023 0307 	bic.w	r3, r3, #7
 800639e:	3308      	adds	r3, #8
 80063a0:	9303      	str	r3, [sp, #12]
 80063a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a4:	4433      	add	r3, r6
 80063a6:	9309      	str	r3, [sp, #36]	; 0x24
 80063a8:	e767      	b.n	800627a <_svfiprintf_r+0x4e>
 80063aa:	460c      	mov	r4, r1
 80063ac:	2001      	movs	r0, #1
 80063ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80063b2:	e7a5      	b.n	8006300 <_svfiprintf_r+0xd4>
 80063b4:	2300      	movs	r3, #0
 80063b6:	f04f 0c0a 	mov.w	ip, #10
 80063ba:	4619      	mov	r1, r3
 80063bc:	3401      	adds	r4, #1
 80063be:	9305      	str	r3, [sp, #20]
 80063c0:	4620      	mov	r0, r4
 80063c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063c6:	3a30      	subs	r2, #48	; 0x30
 80063c8:	2a09      	cmp	r2, #9
 80063ca:	d903      	bls.n	80063d4 <_svfiprintf_r+0x1a8>
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0c5      	beq.n	800635c <_svfiprintf_r+0x130>
 80063d0:	9105      	str	r1, [sp, #20]
 80063d2:	e7c3      	b.n	800635c <_svfiprintf_r+0x130>
 80063d4:	4604      	mov	r4, r0
 80063d6:	2301      	movs	r3, #1
 80063d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80063dc:	e7f0      	b.n	80063c0 <_svfiprintf_r+0x194>
 80063de:	ab03      	add	r3, sp, #12
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	462a      	mov	r2, r5
 80063e4:	4638      	mov	r0, r7
 80063e6:	4b10      	ldr	r3, [pc, #64]	; (8006428 <_svfiprintf_r+0x1fc>)
 80063e8:	a904      	add	r1, sp, #16
 80063ea:	f7fd ffd9 	bl	80043a0 <_printf_float>
 80063ee:	1c42      	adds	r2, r0, #1
 80063f0:	4606      	mov	r6, r0
 80063f2:	d1d6      	bne.n	80063a2 <_svfiprintf_r+0x176>
 80063f4:	89ab      	ldrh	r3, [r5, #12]
 80063f6:	065b      	lsls	r3, r3, #25
 80063f8:	f53f af2c 	bmi.w	8006254 <_svfiprintf_r+0x28>
 80063fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063fe:	b01d      	add	sp, #116	; 0x74
 8006400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006404:	ab03      	add	r3, sp, #12
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	462a      	mov	r2, r5
 800640a:	4638      	mov	r0, r7
 800640c:	4b06      	ldr	r3, [pc, #24]	; (8006428 <_svfiprintf_r+0x1fc>)
 800640e:	a904      	add	r1, sp, #16
 8006410:	f7fe fa62 	bl	80048d8 <_printf_i>
 8006414:	e7eb      	b.n	80063ee <_svfiprintf_r+0x1c2>
 8006416:	bf00      	nop
 8006418:	08007fa4 	.word	0x08007fa4
 800641c:	08007faa 	.word	0x08007faa
 8006420:	08007fae 	.word	0x08007fae
 8006424:	080043a1 	.word	0x080043a1
 8006428:	08006175 	.word	0x08006175

0800642c <_sbrk_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	2300      	movs	r3, #0
 8006430:	4d05      	ldr	r5, [pc, #20]	; (8006448 <_sbrk_r+0x1c>)
 8006432:	4604      	mov	r4, r0
 8006434:	4608      	mov	r0, r1
 8006436:	602b      	str	r3, [r5, #0]
 8006438:	f7fb fda0 	bl	8001f7c <_sbrk>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d102      	bne.n	8006446 <_sbrk_r+0x1a>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	b103      	cbz	r3, 8006446 <_sbrk_r+0x1a>
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	bd38      	pop	{r3, r4, r5, pc}
 8006448:	20000784 	.word	0x20000784

0800644c <__assert_func>:
 800644c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800644e:	4614      	mov	r4, r2
 8006450:	461a      	mov	r2, r3
 8006452:	4b09      	ldr	r3, [pc, #36]	; (8006478 <__assert_func+0x2c>)
 8006454:	4605      	mov	r5, r0
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68d8      	ldr	r0, [r3, #12]
 800645a:	b14c      	cbz	r4, 8006470 <__assert_func+0x24>
 800645c:	4b07      	ldr	r3, [pc, #28]	; (800647c <__assert_func+0x30>)
 800645e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006462:	9100      	str	r1, [sp, #0]
 8006464:	462b      	mov	r3, r5
 8006466:	4906      	ldr	r1, [pc, #24]	; (8006480 <__assert_func+0x34>)
 8006468:	f000 f80e 	bl	8006488 <fiprintf>
 800646c:	f000 fa90 	bl	8006990 <abort>
 8006470:	4b04      	ldr	r3, [pc, #16]	; (8006484 <__assert_func+0x38>)
 8006472:	461c      	mov	r4, r3
 8006474:	e7f3      	b.n	800645e <__assert_func+0x12>
 8006476:	bf00      	nop
 8006478:	2000001c 	.word	0x2000001c
 800647c:	08007fb5 	.word	0x08007fb5
 8006480:	08007fc2 	.word	0x08007fc2
 8006484:	08007ff0 	.word	0x08007ff0

08006488 <fiprintf>:
 8006488:	b40e      	push	{r1, r2, r3}
 800648a:	b503      	push	{r0, r1, lr}
 800648c:	4601      	mov	r1, r0
 800648e:	ab03      	add	r3, sp, #12
 8006490:	4805      	ldr	r0, [pc, #20]	; (80064a8 <fiprintf+0x20>)
 8006492:	f853 2b04 	ldr.w	r2, [r3], #4
 8006496:	6800      	ldr	r0, [r0, #0]
 8006498:	9301      	str	r3, [sp, #4]
 800649a:	f000 f87b 	bl	8006594 <_vfiprintf_r>
 800649e:	b002      	add	sp, #8
 80064a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80064a4:	b003      	add	sp, #12
 80064a6:	4770      	bx	lr
 80064a8:	2000001c 	.word	0x2000001c

080064ac <__ascii_mbtowc>:
 80064ac:	b082      	sub	sp, #8
 80064ae:	b901      	cbnz	r1, 80064b2 <__ascii_mbtowc+0x6>
 80064b0:	a901      	add	r1, sp, #4
 80064b2:	b142      	cbz	r2, 80064c6 <__ascii_mbtowc+0x1a>
 80064b4:	b14b      	cbz	r3, 80064ca <__ascii_mbtowc+0x1e>
 80064b6:	7813      	ldrb	r3, [r2, #0]
 80064b8:	600b      	str	r3, [r1, #0]
 80064ba:	7812      	ldrb	r2, [r2, #0]
 80064bc:	1e10      	subs	r0, r2, #0
 80064be:	bf18      	it	ne
 80064c0:	2001      	movne	r0, #1
 80064c2:	b002      	add	sp, #8
 80064c4:	4770      	bx	lr
 80064c6:	4610      	mov	r0, r2
 80064c8:	e7fb      	b.n	80064c2 <__ascii_mbtowc+0x16>
 80064ca:	f06f 0001 	mvn.w	r0, #1
 80064ce:	e7f8      	b.n	80064c2 <__ascii_mbtowc+0x16>

080064d0 <__malloc_lock>:
 80064d0:	4801      	ldr	r0, [pc, #4]	; (80064d8 <__malloc_lock+0x8>)
 80064d2:	f000 bc19 	b.w	8006d08 <__retarget_lock_acquire_recursive>
 80064d6:	bf00      	nop
 80064d8:	20000788 	.word	0x20000788

080064dc <__malloc_unlock>:
 80064dc:	4801      	ldr	r0, [pc, #4]	; (80064e4 <__malloc_unlock+0x8>)
 80064de:	f000 bc14 	b.w	8006d0a <__retarget_lock_release_recursive>
 80064e2:	bf00      	nop
 80064e4:	20000788 	.word	0x20000788

080064e8 <_realloc_r>:
 80064e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ec:	4680      	mov	r8, r0
 80064ee:	4614      	mov	r4, r2
 80064f0:	460e      	mov	r6, r1
 80064f2:	b921      	cbnz	r1, 80064fe <_realloc_r+0x16>
 80064f4:	4611      	mov	r1, r2
 80064f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064fa:	f7ff bdc7 	b.w	800608c <_malloc_r>
 80064fe:	b92a      	cbnz	r2, 800650c <_realloc_r+0x24>
 8006500:	f7ff fd5c 	bl	8005fbc <_free_r>
 8006504:	4625      	mov	r5, r4
 8006506:	4628      	mov	r0, r5
 8006508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800650c:	f000 fc64 	bl	8006dd8 <_malloc_usable_size_r>
 8006510:	4284      	cmp	r4, r0
 8006512:	4607      	mov	r7, r0
 8006514:	d802      	bhi.n	800651c <_realloc_r+0x34>
 8006516:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800651a:	d812      	bhi.n	8006542 <_realloc_r+0x5a>
 800651c:	4621      	mov	r1, r4
 800651e:	4640      	mov	r0, r8
 8006520:	f7ff fdb4 	bl	800608c <_malloc_r>
 8006524:	4605      	mov	r5, r0
 8006526:	2800      	cmp	r0, #0
 8006528:	d0ed      	beq.n	8006506 <_realloc_r+0x1e>
 800652a:	42bc      	cmp	r4, r7
 800652c:	4622      	mov	r2, r4
 800652e:	4631      	mov	r1, r6
 8006530:	bf28      	it	cs
 8006532:	463a      	movcs	r2, r7
 8006534:	f7fd fe66 	bl	8004204 <memcpy>
 8006538:	4631      	mov	r1, r6
 800653a:	4640      	mov	r0, r8
 800653c:	f7ff fd3e 	bl	8005fbc <_free_r>
 8006540:	e7e1      	b.n	8006506 <_realloc_r+0x1e>
 8006542:	4635      	mov	r5, r6
 8006544:	e7df      	b.n	8006506 <_realloc_r+0x1e>

08006546 <__sfputc_r>:
 8006546:	6893      	ldr	r3, [r2, #8]
 8006548:	b410      	push	{r4}
 800654a:	3b01      	subs	r3, #1
 800654c:	2b00      	cmp	r3, #0
 800654e:	6093      	str	r3, [r2, #8]
 8006550:	da07      	bge.n	8006562 <__sfputc_r+0x1c>
 8006552:	6994      	ldr	r4, [r2, #24]
 8006554:	42a3      	cmp	r3, r4
 8006556:	db01      	blt.n	800655c <__sfputc_r+0x16>
 8006558:	290a      	cmp	r1, #10
 800655a:	d102      	bne.n	8006562 <__sfputc_r+0x1c>
 800655c:	bc10      	pop	{r4}
 800655e:	f000 b949 	b.w	80067f4 <__swbuf_r>
 8006562:	6813      	ldr	r3, [r2, #0]
 8006564:	1c58      	adds	r0, r3, #1
 8006566:	6010      	str	r0, [r2, #0]
 8006568:	7019      	strb	r1, [r3, #0]
 800656a:	4608      	mov	r0, r1
 800656c:	bc10      	pop	{r4}
 800656e:	4770      	bx	lr

08006570 <__sfputs_r>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	4606      	mov	r6, r0
 8006574:	460f      	mov	r7, r1
 8006576:	4614      	mov	r4, r2
 8006578:	18d5      	adds	r5, r2, r3
 800657a:	42ac      	cmp	r4, r5
 800657c:	d101      	bne.n	8006582 <__sfputs_r+0x12>
 800657e:	2000      	movs	r0, #0
 8006580:	e007      	b.n	8006592 <__sfputs_r+0x22>
 8006582:	463a      	mov	r2, r7
 8006584:	4630      	mov	r0, r6
 8006586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800658a:	f7ff ffdc 	bl	8006546 <__sfputc_r>
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	d1f3      	bne.n	800657a <__sfputs_r+0xa>
 8006592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006594 <_vfiprintf_r>:
 8006594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006598:	460d      	mov	r5, r1
 800659a:	4614      	mov	r4, r2
 800659c:	4698      	mov	r8, r3
 800659e:	4606      	mov	r6, r0
 80065a0:	b09d      	sub	sp, #116	; 0x74
 80065a2:	b118      	cbz	r0, 80065ac <_vfiprintf_r+0x18>
 80065a4:	6983      	ldr	r3, [r0, #24]
 80065a6:	b90b      	cbnz	r3, 80065ac <_vfiprintf_r+0x18>
 80065a8:	f000 fb10 	bl	8006bcc <__sinit>
 80065ac:	4b89      	ldr	r3, [pc, #548]	; (80067d4 <_vfiprintf_r+0x240>)
 80065ae:	429d      	cmp	r5, r3
 80065b0:	d11b      	bne.n	80065ea <_vfiprintf_r+0x56>
 80065b2:	6875      	ldr	r5, [r6, #4]
 80065b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065b6:	07d9      	lsls	r1, r3, #31
 80065b8:	d405      	bmi.n	80065c6 <_vfiprintf_r+0x32>
 80065ba:	89ab      	ldrh	r3, [r5, #12]
 80065bc:	059a      	lsls	r2, r3, #22
 80065be:	d402      	bmi.n	80065c6 <_vfiprintf_r+0x32>
 80065c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065c2:	f000 fba1 	bl	8006d08 <__retarget_lock_acquire_recursive>
 80065c6:	89ab      	ldrh	r3, [r5, #12]
 80065c8:	071b      	lsls	r3, r3, #28
 80065ca:	d501      	bpl.n	80065d0 <_vfiprintf_r+0x3c>
 80065cc:	692b      	ldr	r3, [r5, #16]
 80065ce:	b9eb      	cbnz	r3, 800660c <_vfiprintf_r+0x78>
 80065d0:	4629      	mov	r1, r5
 80065d2:	4630      	mov	r0, r6
 80065d4:	f000 f96e 	bl	80068b4 <__swsetup_r>
 80065d8:	b1c0      	cbz	r0, 800660c <_vfiprintf_r+0x78>
 80065da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065dc:	07dc      	lsls	r4, r3, #31
 80065de:	d50e      	bpl.n	80065fe <_vfiprintf_r+0x6a>
 80065e0:	f04f 30ff 	mov.w	r0, #4294967295
 80065e4:	b01d      	add	sp, #116	; 0x74
 80065e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ea:	4b7b      	ldr	r3, [pc, #492]	; (80067d8 <_vfiprintf_r+0x244>)
 80065ec:	429d      	cmp	r5, r3
 80065ee:	d101      	bne.n	80065f4 <_vfiprintf_r+0x60>
 80065f0:	68b5      	ldr	r5, [r6, #8]
 80065f2:	e7df      	b.n	80065b4 <_vfiprintf_r+0x20>
 80065f4:	4b79      	ldr	r3, [pc, #484]	; (80067dc <_vfiprintf_r+0x248>)
 80065f6:	429d      	cmp	r5, r3
 80065f8:	bf08      	it	eq
 80065fa:	68f5      	ldreq	r5, [r6, #12]
 80065fc:	e7da      	b.n	80065b4 <_vfiprintf_r+0x20>
 80065fe:	89ab      	ldrh	r3, [r5, #12]
 8006600:	0598      	lsls	r0, r3, #22
 8006602:	d4ed      	bmi.n	80065e0 <_vfiprintf_r+0x4c>
 8006604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006606:	f000 fb80 	bl	8006d0a <__retarget_lock_release_recursive>
 800660a:	e7e9      	b.n	80065e0 <_vfiprintf_r+0x4c>
 800660c:	2300      	movs	r3, #0
 800660e:	9309      	str	r3, [sp, #36]	; 0x24
 8006610:	2320      	movs	r3, #32
 8006612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006616:	2330      	movs	r3, #48	; 0x30
 8006618:	f04f 0901 	mov.w	r9, #1
 800661c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006620:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80067e0 <_vfiprintf_r+0x24c>
 8006624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006628:	4623      	mov	r3, r4
 800662a:	469a      	mov	sl, r3
 800662c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006630:	b10a      	cbz	r2, 8006636 <_vfiprintf_r+0xa2>
 8006632:	2a25      	cmp	r2, #37	; 0x25
 8006634:	d1f9      	bne.n	800662a <_vfiprintf_r+0x96>
 8006636:	ebba 0b04 	subs.w	fp, sl, r4
 800663a:	d00b      	beq.n	8006654 <_vfiprintf_r+0xc0>
 800663c:	465b      	mov	r3, fp
 800663e:	4622      	mov	r2, r4
 8006640:	4629      	mov	r1, r5
 8006642:	4630      	mov	r0, r6
 8006644:	f7ff ff94 	bl	8006570 <__sfputs_r>
 8006648:	3001      	adds	r0, #1
 800664a:	f000 80aa 	beq.w	80067a2 <_vfiprintf_r+0x20e>
 800664e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006650:	445a      	add	r2, fp
 8006652:	9209      	str	r2, [sp, #36]	; 0x24
 8006654:	f89a 3000 	ldrb.w	r3, [sl]
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 80a2 	beq.w	80067a2 <_vfiprintf_r+0x20e>
 800665e:	2300      	movs	r3, #0
 8006660:	f04f 32ff 	mov.w	r2, #4294967295
 8006664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006668:	f10a 0a01 	add.w	sl, sl, #1
 800666c:	9304      	str	r3, [sp, #16]
 800666e:	9307      	str	r3, [sp, #28]
 8006670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006674:	931a      	str	r3, [sp, #104]	; 0x68
 8006676:	4654      	mov	r4, sl
 8006678:	2205      	movs	r2, #5
 800667a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800667e:	4858      	ldr	r0, [pc, #352]	; (80067e0 <_vfiprintf_r+0x24c>)
 8006680:	f7ff f8f8 	bl	8005874 <memchr>
 8006684:	9a04      	ldr	r2, [sp, #16]
 8006686:	b9d8      	cbnz	r0, 80066c0 <_vfiprintf_r+0x12c>
 8006688:	06d1      	lsls	r1, r2, #27
 800668a:	bf44      	itt	mi
 800668c:	2320      	movmi	r3, #32
 800668e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006692:	0713      	lsls	r3, r2, #28
 8006694:	bf44      	itt	mi
 8006696:	232b      	movmi	r3, #43	; 0x2b
 8006698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800669c:	f89a 3000 	ldrb.w	r3, [sl]
 80066a0:	2b2a      	cmp	r3, #42	; 0x2a
 80066a2:	d015      	beq.n	80066d0 <_vfiprintf_r+0x13c>
 80066a4:	4654      	mov	r4, sl
 80066a6:	2000      	movs	r0, #0
 80066a8:	f04f 0c0a 	mov.w	ip, #10
 80066ac:	9a07      	ldr	r2, [sp, #28]
 80066ae:	4621      	mov	r1, r4
 80066b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066b4:	3b30      	subs	r3, #48	; 0x30
 80066b6:	2b09      	cmp	r3, #9
 80066b8:	d94e      	bls.n	8006758 <_vfiprintf_r+0x1c4>
 80066ba:	b1b0      	cbz	r0, 80066ea <_vfiprintf_r+0x156>
 80066bc:	9207      	str	r2, [sp, #28]
 80066be:	e014      	b.n	80066ea <_vfiprintf_r+0x156>
 80066c0:	eba0 0308 	sub.w	r3, r0, r8
 80066c4:	fa09 f303 	lsl.w	r3, r9, r3
 80066c8:	4313      	orrs	r3, r2
 80066ca:	46a2      	mov	sl, r4
 80066cc:	9304      	str	r3, [sp, #16]
 80066ce:	e7d2      	b.n	8006676 <_vfiprintf_r+0xe2>
 80066d0:	9b03      	ldr	r3, [sp, #12]
 80066d2:	1d19      	adds	r1, r3, #4
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	9103      	str	r1, [sp, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	bfbb      	ittet	lt
 80066dc:	425b      	neglt	r3, r3
 80066de:	f042 0202 	orrlt.w	r2, r2, #2
 80066e2:	9307      	strge	r3, [sp, #28]
 80066e4:	9307      	strlt	r3, [sp, #28]
 80066e6:	bfb8      	it	lt
 80066e8:	9204      	strlt	r2, [sp, #16]
 80066ea:	7823      	ldrb	r3, [r4, #0]
 80066ec:	2b2e      	cmp	r3, #46	; 0x2e
 80066ee:	d10c      	bne.n	800670a <_vfiprintf_r+0x176>
 80066f0:	7863      	ldrb	r3, [r4, #1]
 80066f2:	2b2a      	cmp	r3, #42	; 0x2a
 80066f4:	d135      	bne.n	8006762 <_vfiprintf_r+0x1ce>
 80066f6:	9b03      	ldr	r3, [sp, #12]
 80066f8:	3402      	adds	r4, #2
 80066fa:	1d1a      	adds	r2, r3, #4
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	9203      	str	r2, [sp, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	bfb8      	it	lt
 8006704:	f04f 33ff 	movlt.w	r3, #4294967295
 8006708:	9305      	str	r3, [sp, #20]
 800670a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80067e4 <_vfiprintf_r+0x250>
 800670e:	2203      	movs	r2, #3
 8006710:	4650      	mov	r0, sl
 8006712:	7821      	ldrb	r1, [r4, #0]
 8006714:	f7ff f8ae 	bl	8005874 <memchr>
 8006718:	b140      	cbz	r0, 800672c <_vfiprintf_r+0x198>
 800671a:	2340      	movs	r3, #64	; 0x40
 800671c:	eba0 000a 	sub.w	r0, r0, sl
 8006720:	fa03 f000 	lsl.w	r0, r3, r0
 8006724:	9b04      	ldr	r3, [sp, #16]
 8006726:	3401      	adds	r4, #1
 8006728:	4303      	orrs	r3, r0
 800672a:	9304      	str	r3, [sp, #16]
 800672c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006730:	2206      	movs	r2, #6
 8006732:	482d      	ldr	r0, [pc, #180]	; (80067e8 <_vfiprintf_r+0x254>)
 8006734:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006738:	f7ff f89c 	bl	8005874 <memchr>
 800673c:	2800      	cmp	r0, #0
 800673e:	d03f      	beq.n	80067c0 <_vfiprintf_r+0x22c>
 8006740:	4b2a      	ldr	r3, [pc, #168]	; (80067ec <_vfiprintf_r+0x258>)
 8006742:	bb1b      	cbnz	r3, 800678c <_vfiprintf_r+0x1f8>
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	3307      	adds	r3, #7
 8006748:	f023 0307 	bic.w	r3, r3, #7
 800674c:	3308      	adds	r3, #8
 800674e:	9303      	str	r3, [sp, #12]
 8006750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006752:	443b      	add	r3, r7
 8006754:	9309      	str	r3, [sp, #36]	; 0x24
 8006756:	e767      	b.n	8006628 <_vfiprintf_r+0x94>
 8006758:	460c      	mov	r4, r1
 800675a:	2001      	movs	r0, #1
 800675c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006760:	e7a5      	b.n	80066ae <_vfiprintf_r+0x11a>
 8006762:	2300      	movs	r3, #0
 8006764:	f04f 0c0a 	mov.w	ip, #10
 8006768:	4619      	mov	r1, r3
 800676a:	3401      	adds	r4, #1
 800676c:	9305      	str	r3, [sp, #20]
 800676e:	4620      	mov	r0, r4
 8006770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006774:	3a30      	subs	r2, #48	; 0x30
 8006776:	2a09      	cmp	r2, #9
 8006778:	d903      	bls.n	8006782 <_vfiprintf_r+0x1ee>
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0c5      	beq.n	800670a <_vfiprintf_r+0x176>
 800677e:	9105      	str	r1, [sp, #20]
 8006780:	e7c3      	b.n	800670a <_vfiprintf_r+0x176>
 8006782:	4604      	mov	r4, r0
 8006784:	2301      	movs	r3, #1
 8006786:	fb0c 2101 	mla	r1, ip, r1, r2
 800678a:	e7f0      	b.n	800676e <_vfiprintf_r+0x1da>
 800678c:	ab03      	add	r3, sp, #12
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	462a      	mov	r2, r5
 8006792:	4630      	mov	r0, r6
 8006794:	4b16      	ldr	r3, [pc, #88]	; (80067f0 <_vfiprintf_r+0x25c>)
 8006796:	a904      	add	r1, sp, #16
 8006798:	f7fd fe02 	bl	80043a0 <_printf_float>
 800679c:	4607      	mov	r7, r0
 800679e:	1c78      	adds	r0, r7, #1
 80067a0:	d1d6      	bne.n	8006750 <_vfiprintf_r+0x1bc>
 80067a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067a4:	07d9      	lsls	r1, r3, #31
 80067a6:	d405      	bmi.n	80067b4 <_vfiprintf_r+0x220>
 80067a8:	89ab      	ldrh	r3, [r5, #12]
 80067aa:	059a      	lsls	r2, r3, #22
 80067ac:	d402      	bmi.n	80067b4 <_vfiprintf_r+0x220>
 80067ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067b0:	f000 faab 	bl	8006d0a <__retarget_lock_release_recursive>
 80067b4:	89ab      	ldrh	r3, [r5, #12]
 80067b6:	065b      	lsls	r3, r3, #25
 80067b8:	f53f af12 	bmi.w	80065e0 <_vfiprintf_r+0x4c>
 80067bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067be:	e711      	b.n	80065e4 <_vfiprintf_r+0x50>
 80067c0:	ab03      	add	r3, sp, #12
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	462a      	mov	r2, r5
 80067c6:	4630      	mov	r0, r6
 80067c8:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <_vfiprintf_r+0x25c>)
 80067ca:	a904      	add	r1, sp, #16
 80067cc:	f7fe f884 	bl	80048d8 <_printf_i>
 80067d0:	e7e4      	b.n	800679c <_vfiprintf_r+0x208>
 80067d2:	bf00      	nop
 80067d4:	0800811c 	.word	0x0800811c
 80067d8:	0800813c 	.word	0x0800813c
 80067dc:	080080fc 	.word	0x080080fc
 80067e0:	08007fa4 	.word	0x08007fa4
 80067e4:	08007faa 	.word	0x08007faa
 80067e8:	08007fae 	.word	0x08007fae
 80067ec:	080043a1 	.word	0x080043a1
 80067f0:	08006571 	.word	0x08006571

080067f4 <__swbuf_r>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	460e      	mov	r6, r1
 80067f8:	4614      	mov	r4, r2
 80067fa:	4605      	mov	r5, r0
 80067fc:	b118      	cbz	r0, 8006806 <__swbuf_r+0x12>
 80067fe:	6983      	ldr	r3, [r0, #24]
 8006800:	b90b      	cbnz	r3, 8006806 <__swbuf_r+0x12>
 8006802:	f000 f9e3 	bl	8006bcc <__sinit>
 8006806:	4b21      	ldr	r3, [pc, #132]	; (800688c <__swbuf_r+0x98>)
 8006808:	429c      	cmp	r4, r3
 800680a:	d12b      	bne.n	8006864 <__swbuf_r+0x70>
 800680c:	686c      	ldr	r4, [r5, #4]
 800680e:	69a3      	ldr	r3, [r4, #24]
 8006810:	60a3      	str	r3, [r4, #8]
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	071a      	lsls	r2, r3, #28
 8006816:	d52f      	bpl.n	8006878 <__swbuf_r+0x84>
 8006818:	6923      	ldr	r3, [r4, #16]
 800681a:	b36b      	cbz	r3, 8006878 <__swbuf_r+0x84>
 800681c:	6923      	ldr	r3, [r4, #16]
 800681e:	6820      	ldr	r0, [r4, #0]
 8006820:	b2f6      	uxtb	r6, r6
 8006822:	1ac0      	subs	r0, r0, r3
 8006824:	6963      	ldr	r3, [r4, #20]
 8006826:	4637      	mov	r7, r6
 8006828:	4283      	cmp	r3, r0
 800682a:	dc04      	bgt.n	8006836 <__swbuf_r+0x42>
 800682c:	4621      	mov	r1, r4
 800682e:	4628      	mov	r0, r5
 8006830:	f000 f938 	bl	8006aa4 <_fflush_r>
 8006834:	bb30      	cbnz	r0, 8006884 <__swbuf_r+0x90>
 8006836:	68a3      	ldr	r3, [r4, #8]
 8006838:	3001      	adds	r0, #1
 800683a:	3b01      	subs	r3, #1
 800683c:	60a3      	str	r3, [r4, #8]
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	6022      	str	r2, [r4, #0]
 8006844:	701e      	strb	r6, [r3, #0]
 8006846:	6963      	ldr	r3, [r4, #20]
 8006848:	4283      	cmp	r3, r0
 800684a:	d004      	beq.n	8006856 <__swbuf_r+0x62>
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	07db      	lsls	r3, r3, #31
 8006850:	d506      	bpl.n	8006860 <__swbuf_r+0x6c>
 8006852:	2e0a      	cmp	r6, #10
 8006854:	d104      	bne.n	8006860 <__swbuf_r+0x6c>
 8006856:	4621      	mov	r1, r4
 8006858:	4628      	mov	r0, r5
 800685a:	f000 f923 	bl	8006aa4 <_fflush_r>
 800685e:	b988      	cbnz	r0, 8006884 <__swbuf_r+0x90>
 8006860:	4638      	mov	r0, r7
 8006862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006864:	4b0a      	ldr	r3, [pc, #40]	; (8006890 <__swbuf_r+0x9c>)
 8006866:	429c      	cmp	r4, r3
 8006868:	d101      	bne.n	800686e <__swbuf_r+0x7a>
 800686a:	68ac      	ldr	r4, [r5, #8]
 800686c:	e7cf      	b.n	800680e <__swbuf_r+0x1a>
 800686e:	4b09      	ldr	r3, [pc, #36]	; (8006894 <__swbuf_r+0xa0>)
 8006870:	429c      	cmp	r4, r3
 8006872:	bf08      	it	eq
 8006874:	68ec      	ldreq	r4, [r5, #12]
 8006876:	e7ca      	b.n	800680e <__swbuf_r+0x1a>
 8006878:	4621      	mov	r1, r4
 800687a:	4628      	mov	r0, r5
 800687c:	f000 f81a 	bl	80068b4 <__swsetup_r>
 8006880:	2800      	cmp	r0, #0
 8006882:	d0cb      	beq.n	800681c <__swbuf_r+0x28>
 8006884:	f04f 37ff 	mov.w	r7, #4294967295
 8006888:	e7ea      	b.n	8006860 <__swbuf_r+0x6c>
 800688a:	bf00      	nop
 800688c:	0800811c 	.word	0x0800811c
 8006890:	0800813c 	.word	0x0800813c
 8006894:	080080fc 	.word	0x080080fc

08006898 <__ascii_wctomb>:
 8006898:	4603      	mov	r3, r0
 800689a:	4608      	mov	r0, r1
 800689c:	b141      	cbz	r1, 80068b0 <__ascii_wctomb+0x18>
 800689e:	2aff      	cmp	r2, #255	; 0xff
 80068a0:	d904      	bls.n	80068ac <__ascii_wctomb+0x14>
 80068a2:	228a      	movs	r2, #138	; 0x8a
 80068a4:	f04f 30ff 	mov.w	r0, #4294967295
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	4770      	bx	lr
 80068ac:	2001      	movs	r0, #1
 80068ae:	700a      	strb	r2, [r1, #0]
 80068b0:	4770      	bx	lr
	...

080068b4 <__swsetup_r>:
 80068b4:	4b32      	ldr	r3, [pc, #200]	; (8006980 <__swsetup_r+0xcc>)
 80068b6:	b570      	push	{r4, r5, r6, lr}
 80068b8:	681d      	ldr	r5, [r3, #0]
 80068ba:	4606      	mov	r6, r0
 80068bc:	460c      	mov	r4, r1
 80068be:	b125      	cbz	r5, 80068ca <__swsetup_r+0x16>
 80068c0:	69ab      	ldr	r3, [r5, #24]
 80068c2:	b913      	cbnz	r3, 80068ca <__swsetup_r+0x16>
 80068c4:	4628      	mov	r0, r5
 80068c6:	f000 f981 	bl	8006bcc <__sinit>
 80068ca:	4b2e      	ldr	r3, [pc, #184]	; (8006984 <__swsetup_r+0xd0>)
 80068cc:	429c      	cmp	r4, r3
 80068ce:	d10f      	bne.n	80068f0 <__swsetup_r+0x3c>
 80068d0:	686c      	ldr	r4, [r5, #4]
 80068d2:	89a3      	ldrh	r3, [r4, #12]
 80068d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068d8:	0719      	lsls	r1, r3, #28
 80068da:	d42c      	bmi.n	8006936 <__swsetup_r+0x82>
 80068dc:	06dd      	lsls	r5, r3, #27
 80068de:	d411      	bmi.n	8006904 <__swsetup_r+0x50>
 80068e0:	2309      	movs	r3, #9
 80068e2:	6033      	str	r3, [r6, #0]
 80068e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068e8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ec:	81a3      	strh	r3, [r4, #12]
 80068ee:	e03e      	b.n	800696e <__swsetup_r+0xba>
 80068f0:	4b25      	ldr	r3, [pc, #148]	; (8006988 <__swsetup_r+0xd4>)
 80068f2:	429c      	cmp	r4, r3
 80068f4:	d101      	bne.n	80068fa <__swsetup_r+0x46>
 80068f6:	68ac      	ldr	r4, [r5, #8]
 80068f8:	e7eb      	b.n	80068d2 <__swsetup_r+0x1e>
 80068fa:	4b24      	ldr	r3, [pc, #144]	; (800698c <__swsetup_r+0xd8>)
 80068fc:	429c      	cmp	r4, r3
 80068fe:	bf08      	it	eq
 8006900:	68ec      	ldreq	r4, [r5, #12]
 8006902:	e7e6      	b.n	80068d2 <__swsetup_r+0x1e>
 8006904:	0758      	lsls	r0, r3, #29
 8006906:	d512      	bpl.n	800692e <__swsetup_r+0x7a>
 8006908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800690a:	b141      	cbz	r1, 800691e <__swsetup_r+0x6a>
 800690c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006910:	4299      	cmp	r1, r3
 8006912:	d002      	beq.n	800691a <__swsetup_r+0x66>
 8006914:	4630      	mov	r0, r6
 8006916:	f7ff fb51 	bl	8005fbc <_free_r>
 800691a:	2300      	movs	r3, #0
 800691c:	6363      	str	r3, [r4, #52]	; 0x34
 800691e:	89a3      	ldrh	r3, [r4, #12]
 8006920:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006924:	81a3      	strh	r3, [r4, #12]
 8006926:	2300      	movs	r3, #0
 8006928:	6063      	str	r3, [r4, #4]
 800692a:	6923      	ldr	r3, [r4, #16]
 800692c:	6023      	str	r3, [r4, #0]
 800692e:	89a3      	ldrh	r3, [r4, #12]
 8006930:	f043 0308 	orr.w	r3, r3, #8
 8006934:	81a3      	strh	r3, [r4, #12]
 8006936:	6923      	ldr	r3, [r4, #16]
 8006938:	b94b      	cbnz	r3, 800694e <__swsetup_r+0x9a>
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006944:	d003      	beq.n	800694e <__swsetup_r+0x9a>
 8006946:	4621      	mov	r1, r4
 8006948:	4630      	mov	r0, r6
 800694a:	f000 fa05 	bl	8006d58 <__smakebuf_r>
 800694e:	89a0      	ldrh	r0, [r4, #12]
 8006950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006954:	f010 0301 	ands.w	r3, r0, #1
 8006958:	d00a      	beq.n	8006970 <__swsetup_r+0xbc>
 800695a:	2300      	movs	r3, #0
 800695c:	60a3      	str	r3, [r4, #8]
 800695e:	6963      	ldr	r3, [r4, #20]
 8006960:	425b      	negs	r3, r3
 8006962:	61a3      	str	r3, [r4, #24]
 8006964:	6923      	ldr	r3, [r4, #16]
 8006966:	b943      	cbnz	r3, 800697a <__swsetup_r+0xc6>
 8006968:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800696c:	d1ba      	bne.n	80068e4 <__swsetup_r+0x30>
 800696e:	bd70      	pop	{r4, r5, r6, pc}
 8006970:	0781      	lsls	r1, r0, #30
 8006972:	bf58      	it	pl
 8006974:	6963      	ldrpl	r3, [r4, #20]
 8006976:	60a3      	str	r3, [r4, #8]
 8006978:	e7f4      	b.n	8006964 <__swsetup_r+0xb0>
 800697a:	2000      	movs	r0, #0
 800697c:	e7f7      	b.n	800696e <__swsetup_r+0xba>
 800697e:	bf00      	nop
 8006980:	2000001c 	.word	0x2000001c
 8006984:	0800811c 	.word	0x0800811c
 8006988:	0800813c 	.word	0x0800813c
 800698c:	080080fc 	.word	0x080080fc

08006990 <abort>:
 8006990:	2006      	movs	r0, #6
 8006992:	b508      	push	{r3, lr}
 8006994:	f000 fa50 	bl	8006e38 <raise>
 8006998:	2001      	movs	r0, #1
 800699a:	f7fb fa7c 	bl	8001e96 <_exit>
	...

080069a0 <__sflush_r>:
 80069a0:	898a      	ldrh	r2, [r1, #12]
 80069a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a4:	4605      	mov	r5, r0
 80069a6:	0710      	lsls	r0, r2, #28
 80069a8:	460c      	mov	r4, r1
 80069aa:	d457      	bmi.n	8006a5c <__sflush_r+0xbc>
 80069ac:	684b      	ldr	r3, [r1, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dc04      	bgt.n	80069bc <__sflush_r+0x1c>
 80069b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	dc01      	bgt.n	80069bc <__sflush_r+0x1c>
 80069b8:	2000      	movs	r0, #0
 80069ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069be:	2e00      	cmp	r6, #0
 80069c0:	d0fa      	beq.n	80069b8 <__sflush_r+0x18>
 80069c2:	2300      	movs	r3, #0
 80069c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069c8:	682f      	ldr	r7, [r5, #0]
 80069ca:	602b      	str	r3, [r5, #0]
 80069cc:	d032      	beq.n	8006a34 <__sflush_r+0x94>
 80069ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	075a      	lsls	r2, r3, #29
 80069d4:	d505      	bpl.n	80069e2 <__sflush_r+0x42>
 80069d6:	6863      	ldr	r3, [r4, #4]
 80069d8:	1ac0      	subs	r0, r0, r3
 80069da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069dc:	b10b      	cbz	r3, 80069e2 <__sflush_r+0x42>
 80069de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069e0:	1ac0      	subs	r0, r0, r3
 80069e2:	2300      	movs	r3, #0
 80069e4:	4602      	mov	r2, r0
 80069e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069e8:	4628      	mov	r0, r5
 80069ea:	6a21      	ldr	r1, [r4, #32]
 80069ec:	47b0      	blx	r6
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	89a3      	ldrh	r3, [r4, #12]
 80069f2:	d106      	bne.n	8006a02 <__sflush_r+0x62>
 80069f4:	6829      	ldr	r1, [r5, #0]
 80069f6:	291d      	cmp	r1, #29
 80069f8:	d82c      	bhi.n	8006a54 <__sflush_r+0xb4>
 80069fa:	4a29      	ldr	r2, [pc, #164]	; (8006aa0 <__sflush_r+0x100>)
 80069fc:	40ca      	lsrs	r2, r1
 80069fe:	07d6      	lsls	r6, r2, #31
 8006a00:	d528      	bpl.n	8006a54 <__sflush_r+0xb4>
 8006a02:	2200      	movs	r2, #0
 8006a04:	6062      	str	r2, [r4, #4]
 8006a06:	6922      	ldr	r2, [r4, #16]
 8006a08:	04d9      	lsls	r1, r3, #19
 8006a0a:	6022      	str	r2, [r4, #0]
 8006a0c:	d504      	bpl.n	8006a18 <__sflush_r+0x78>
 8006a0e:	1c42      	adds	r2, r0, #1
 8006a10:	d101      	bne.n	8006a16 <__sflush_r+0x76>
 8006a12:	682b      	ldr	r3, [r5, #0]
 8006a14:	b903      	cbnz	r3, 8006a18 <__sflush_r+0x78>
 8006a16:	6560      	str	r0, [r4, #84]	; 0x54
 8006a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a1a:	602f      	str	r7, [r5, #0]
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	d0cb      	beq.n	80069b8 <__sflush_r+0x18>
 8006a20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a24:	4299      	cmp	r1, r3
 8006a26:	d002      	beq.n	8006a2e <__sflush_r+0x8e>
 8006a28:	4628      	mov	r0, r5
 8006a2a:	f7ff fac7 	bl	8005fbc <_free_r>
 8006a2e:	2000      	movs	r0, #0
 8006a30:	6360      	str	r0, [r4, #52]	; 0x34
 8006a32:	e7c2      	b.n	80069ba <__sflush_r+0x1a>
 8006a34:	6a21      	ldr	r1, [r4, #32]
 8006a36:	2301      	movs	r3, #1
 8006a38:	4628      	mov	r0, r5
 8006a3a:	47b0      	blx	r6
 8006a3c:	1c41      	adds	r1, r0, #1
 8006a3e:	d1c7      	bne.n	80069d0 <__sflush_r+0x30>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0c4      	beq.n	80069d0 <__sflush_r+0x30>
 8006a46:	2b1d      	cmp	r3, #29
 8006a48:	d001      	beq.n	8006a4e <__sflush_r+0xae>
 8006a4a:	2b16      	cmp	r3, #22
 8006a4c:	d101      	bne.n	8006a52 <__sflush_r+0xb2>
 8006a4e:	602f      	str	r7, [r5, #0]
 8006a50:	e7b2      	b.n	80069b8 <__sflush_r+0x18>
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a58:	81a3      	strh	r3, [r4, #12]
 8006a5a:	e7ae      	b.n	80069ba <__sflush_r+0x1a>
 8006a5c:	690f      	ldr	r7, [r1, #16]
 8006a5e:	2f00      	cmp	r7, #0
 8006a60:	d0aa      	beq.n	80069b8 <__sflush_r+0x18>
 8006a62:	0793      	lsls	r3, r2, #30
 8006a64:	bf18      	it	ne
 8006a66:	2300      	movne	r3, #0
 8006a68:	680e      	ldr	r6, [r1, #0]
 8006a6a:	bf08      	it	eq
 8006a6c:	694b      	ldreq	r3, [r1, #20]
 8006a6e:	1bf6      	subs	r6, r6, r7
 8006a70:	600f      	str	r7, [r1, #0]
 8006a72:	608b      	str	r3, [r1, #8]
 8006a74:	2e00      	cmp	r6, #0
 8006a76:	dd9f      	ble.n	80069b8 <__sflush_r+0x18>
 8006a78:	4633      	mov	r3, r6
 8006a7a:	463a      	mov	r2, r7
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	6a21      	ldr	r1, [r4, #32]
 8006a80:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006a84:	47e0      	blx	ip
 8006a86:	2800      	cmp	r0, #0
 8006a88:	dc06      	bgt.n	8006a98 <__sflush_r+0xf8>
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a94:	81a3      	strh	r3, [r4, #12]
 8006a96:	e790      	b.n	80069ba <__sflush_r+0x1a>
 8006a98:	4407      	add	r7, r0
 8006a9a:	1a36      	subs	r6, r6, r0
 8006a9c:	e7ea      	b.n	8006a74 <__sflush_r+0xd4>
 8006a9e:	bf00      	nop
 8006aa0:	20400001 	.word	0x20400001

08006aa4 <_fflush_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	690b      	ldr	r3, [r1, #16]
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	b913      	cbnz	r3, 8006ab4 <_fflush_r+0x10>
 8006aae:	2500      	movs	r5, #0
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	b118      	cbz	r0, 8006abe <_fflush_r+0x1a>
 8006ab6:	6983      	ldr	r3, [r0, #24]
 8006ab8:	b90b      	cbnz	r3, 8006abe <_fflush_r+0x1a>
 8006aba:	f000 f887 	bl	8006bcc <__sinit>
 8006abe:	4b14      	ldr	r3, [pc, #80]	; (8006b10 <_fflush_r+0x6c>)
 8006ac0:	429c      	cmp	r4, r3
 8006ac2:	d11b      	bne.n	8006afc <_fflush_r+0x58>
 8006ac4:	686c      	ldr	r4, [r5, #4]
 8006ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0ef      	beq.n	8006aae <_fflush_r+0xa>
 8006ace:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ad0:	07d0      	lsls	r0, r2, #31
 8006ad2:	d404      	bmi.n	8006ade <_fflush_r+0x3a>
 8006ad4:	0599      	lsls	r1, r3, #22
 8006ad6:	d402      	bmi.n	8006ade <_fflush_r+0x3a>
 8006ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ada:	f000 f915 	bl	8006d08 <__retarget_lock_acquire_recursive>
 8006ade:	4628      	mov	r0, r5
 8006ae0:	4621      	mov	r1, r4
 8006ae2:	f7ff ff5d 	bl	80069a0 <__sflush_r>
 8006ae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ae8:	4605      	mov	r5, r0
 8006aea:	07da      	lsls	r2, r3, #31
 8006aec:	d4e0      	bmi.n	8006ab0 <_fflush_r+0xc>
 8006aee:	89a3      	ldrh	r3, [r4, #12]
 8006af0:	059b      	lsls	r3, r3, #22
 8006af2:	d4dd      	bmi.n	8006ab0 <_fflush_r+0xc>
 8006af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006af6:	f000 f908 	bl	8006d0a <__retarget_lock_release_recursive>
 8006afa:	e7d9      	b.n	8006ab0 <_fflush_r+0xc>
 8006afc:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <_fflush_r+0x70>)
 8006afe:	429c      	cmp	r4, r3
 8006b00:	d101      	bne.n	8006b06 <_fflush_r+0x62>
 8006b02:	68ac      	ldr	r4, [r5, #8]
 8006b04:	e7df      	b.n	8006ac6 <_fflush_r+0x22>
 8006b06:	4b04      	ldr	r3, [pc, #16]	; (8006b18 <_fflush_r+0x74>)
 8006b08:	429c      	cmp	r4, r3
 8006b0a:	bf08      	it	eq
 8006b0c:	68ec      	ldreq	r4, [r5, #12]
 8006b0e:	e7da      	b.n	8006ac6 <_fflush_r+0x22>
 8006b10:	0800811c 	.word	0x0800811c
 8006b14:	0800813c 	.word	0x0800813c
 8006b18:	080080fc 	.word	0x080080fc

08006b1c <std>:
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	4604      	mov	r4, r0
 8006b22:	e9c0 3300 	strd	r3, r3, [r0]
 8006b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b2a:	6083      	str	r3, [r0, #8]
 8006b2c:	8181      	strh	r1, [r0, #12]
 8006b2e:	6643      	str	r3, [r0, #100]	; 0x64
 8006b30:	81c2      	strh	r2, [r0, #14]
 8006b32:	6183      	str	r3, [r0, #24]
 8006b34:	4619      	mov	r1, r3
 8006b36:	2208      	movs	r2, #8
 8006b38:	305c      	adds	r0, #92	; 0x5c
 8006b3a:	f7fd fb8b 	bl	8004254 <memset>
 8006b3e:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <std+0x38>)
 8006b40:	6224      	str	r4, [r4, #32]
 8006b42:	6263      	str	r3, [r4, #36]	; 0x24
 8006b44:	4b04      	ldr	r3, [pc, #16]	; (8006b58 <std+0x3c>)
 8006b46:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b48:	4b04      	ldr	r3, [pc, #16]	; (8006b5c <std+0x40>)
 8006b4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b4c:	4b04      	ldr	r3, [pc, #16]	; (8006b60 <std+0x44>)
 8006b4e:	6323      	str	r3, [r4, #48]	; 0x30
 8006b50:	bd10      	pop	{r4, pc}
 8006b52:	bf00      	nop
 8006b54:	08006e71 	.word	0x08006e71
 8006b58:	08006e93 	.word	0x08006e93
 8006b5c:	08006ecb 	.word	0x08006ecb
 8006b60:	08006eef 	.word	0x08006eef

08006b64 <_cleanup_r>:
 8006b64:	4901      	ldr	r1, [pc, #4]	; (8006b6c <_cleanup_r+0x8>)
 8006b66:	f000 b8af 	b.w	8006cc8 <_fwalk_reent>
 8006b6a:	bf00      	nop
 8006b6c:	08006aa5 	.word	0x08006aa5

08006b70 <__sfmoreglue>:
 8006b70:	2268      	movs	r2, #104	; 0x68
 8006b72:	b570      	push	{r4, r5, r6, lr}
 8006b74:	1e4d      	subs	r5, r1, #1
 8006b76:	4355      	muls	r5, r2
 8006b78:	460e      	mov	r6, r1
 8006b7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b7e:	f7ff fa85 	bl	800608c <_malloc_r>
 8006b82:	4604      	mov	r4, r0
 8006b84:	b140      	cbz	r0, 8006b98 <__sfmoreglue+0x28>
 8006b86:	2100      	movs	r1, #0
 8006b88:	e9c0 1600 	strd	r1, r6, [r0]
 8006b8c:	300c      	adds	r0, #12
 8006b8e:	60a0      	str	r0, [r4, #8]
 8006b90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b94:	f7fd fb5e 	bl	8004254 <memset>
 8006b98:	4620      	mov	r0, r4
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}

08006b9c <__sfp_lock_acquire>:
 8006b9c:	4801      	ldr	r0, [pc, #4]	; (8006ba4 <__sfp_lock_acquire+0x8>)
 8006b9e:	f000 b8b3 	b.w	8006d08 <__retarget_lock_acquire_recursive>
 8006ba2:	bf00      	nop
 8006ba4:	20000789 	.word	0x20000789

08006ba8 <__sfp_lock_release>:
 8006ba8:	4801      	ldr	r0, [pc, #4]	; (8006bb0 <__sfp_lock_release+0x8>)
 8006baa:	f000 b8ae 	b.w	8006d0a <__retarget_lock_release_recursive>
 8006bae:	bf00      	nop
 8006bb0:	20000789 	.word	0x20000789

08006bb4 <__sinit_lock_acquire>:
 8006bb4:	4801      	ldr	r0, [pc, #4]	; (8006bbc <__sinit_lock_acquire+0x8>)
 8006bb6:	f000 b8a7 	b.w	8006d08 <__retarget_lock_acquire_recursive>
 8006bba:	bf00      	nop
 8006bbc:	2000078a 	.word	0x2000078a

08006bc0 <__sinit_lock_release>:
 8006bc0:	4801      	ldr	r0, [pc, #4]	; (8006bc8 <__sinit_lock_release+0x8>)
 8006bc2:	f000 b8a2 	b.w	8006d0a <__retarget_lock_release_recursive>
 8006bc6:	bf00      	nop
 8006bc8:	2000078a 	.word	0x2000078a

08006bcc <__sinit>:
 8006bcc:	b510      	push	{r4, lr}
 8006bce:	4604      	mov	r4, r0
 8006bd0:	f7ff fff0 	bl	8006bb4 <__sinit_lock_acquire>
 8006bd4:	69a3      	ldr	r3, [r4, #24]
 8006bd6:	b11b      	cbz	r3, 8006be0 <__sinit+0x14>
 8006bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bdc:	f7ff bff0 	b.w	8006bc0 <__sinit_lock_release>
 8006be0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006be4:	6523      	str	r3, [r4, #80]	; 0x50
 8006be6:	4b13      	ldr	r3, [pc, #76]	; (8006c34 <__sinit+0x68>)
 8006be8:	4a13      	ldr	r2, [pc, #76]	; (8006c38 <__sinit+0x6c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bee:	42a3      	cmp	r3, r4
 8006bf0:	bf08      	it	eq
 8006bf2:	2301      	moveq	r3, #1
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	bf08      	it	eq
 8006bf8:	61a3      	streq	r3, [r4, #24]
 8006bfa:	f000 f81f 	bl	8006c3c <__sfp>
 8006bfe:	6060      	str	r0, [r4, #4]
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 f81b 	bl	8006c3c <__sfp>
 8006c06:	60a0      	str	r0, [r4, #8]
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f000 f817 	bl	8006c3c <__sfp>
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2104      	movs	r1, #4
 8006c12:	60e0      	str	r0, [r4, #12]
 8006c14:	6860      	ldr	r0, [r4, #4]
 8006c16:	f7ff ff81 	bl	8006b1c <std>
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	2109      	movs	r1, #9
 8006c1e:	68a0      	ldr	r0, [r4, #8]
 8006c20:	f7ff ff7c 	bl	8006b1c <std>
 8006c24:	2202      	movs	r2, #2
 8006c26:	2112      	movs	r1, #18
 8006c28:	68e0      	ldr	r0, [r4, #12]
 8006c2a:	f7ff ff77 	bl	8006b1c <std>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	61a3      	str	r3, [r4, #24]
 8006c32:	e7d1      	b.n	8006bd8 <__sinit+0xc>
 8006c34:	08007d80 	.word	0x08007d80
 8006c38:	08006b65 	.word	0x08006b65

08006c3c <__sfp>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	4607      	mov	r7, r0
 8006c40:	f7ff ffac 	bl	8006b9c <__sfp_lock_acquire>
 8006c44:	4b1e      	ldr	r3, [pc, #120]	; (8006cc0 <__sfp+0x84>)
 8006c46:	681e      	ldr	r6, [r3, #0]
 8006c48:	69b3      	ldr	r3, [r6, #24]
 8006c4a:	b913      	cbnz	r3, 8006c52 <__sfp+0x16>
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	f7ff ffbd 	bl	8006bcc <__sinit>
 8006c52:	3648      	adds	r6, #72	; 0x48
 8006c54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	d503      	bpl.n	8006c64 <__sfp+0x28>
 8006c5c:	6833      	ldr	r3, [r6, #0]
 8006c5e:	b30b      	cbz	r3, 8006ca4 <__sfp+0x68>
 8006c60:	6836      	ldr	r6, [r6, #0]
 8006c62:	e7f7      	b.n	8006c54 <__sfp+0x18>
 8006c64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c68:	b9d5      	cbnz	r5, 8006ca0 <__sfp+0x64>
 8006c6a:	4b16      	ldr	r3, [pc, #88]	; (8006cc4 <__sfp+0x88>)
 8006c6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c70:	60e3      	str	r3, [r4, #12]
 8006c72:	6665      	str	r5, [r4, #100]	; 0x64
 8006c74:	f000 f847 	bl	8006d06 <__retarget_lock_init_recursive>
 8006c78:	f7ff ff96 	bl	8006ba8 <__sfp_lock_release>
 8006c7c:	2208      	movs	r2, #8
 8006c7e:	4629      	mov	r1, r5
 8006c80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c88:	6025      	str	r5, [r4, #0]
 8006c8a:	61a5      	str	r5, [r4, #24]
 8006c8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c90:	f7fd fae0 	bl	8004254 <memset>
 8006c94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ca0:	3468      	adds	r4, #104	; 0x68
 8006ca2:	e7d9      	b.n	8006c58 <__sfp+0x1c>
 8006ca4:	2104      	movs	r1, #4
 8006ca6:	4638      	mov	r0, r7
 8006ca8:	f7ff ff62 	bl	8006b70 <__sfmoreglue>
 8006cac:	4604      	mov	r4, r0
 8006cae:	6030      	str	r0, [r6, #0]
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d1d5      	bne.n	8006c60 <__sfp+0x24>
 8006cb4:	f7ff ff78 	bl	8006ba8 <__sfp_lock_release>
 8006cb8:	230c      	movs	r3, #12
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	e7ee      	b.n	8006c9c <__sfp+0x60>
 8006cbe:	bf00      	nop
 8006cc0:	08007d80 	.word	0x08007d80
 8006cc4:	ffff0001 	.word	0xffff0001

08006cc8 <_fwalk_reent>:
 8006cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ccc:	4606      	mov	r6, r0
 8006cce:	4688      	mov	r8, r1
 8006cd0:	2700      	movs	r7, #0
 8006cd2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cda:	f1b9 0901 	subs.w	r9, r9, #1
 8006cde:	d505      	bpl.n	8006cec <_fwalk_reent+0x24>
 8006ce0:	6824      	ldr	r4, [r4, #0]
 8006ce2:	2c00      	cmp	r4, #0
 8006ce4:	d1f7      	bne.n	8006cd6 <_fwalk_reent+0xe>
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cec:	89ab      	ldrh	r3, [r5, #12]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d907      	bls.n	8006d02 <_fwalk_reent+0x3a>
 8006cf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	d003      	beq.n	8006d02 <_fwalk_reent+0x3a>
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	47c0      	blx	r8
 8006d00:	4307      	orrs	r7, r0
 8006d02:	3568      	adds	r5, #104	; 0x68
 8006d04:	e7e9      	b.n	8006cda <_fwalk_reent+0x12>

08006d06 <__retarget_lock_init_recursive>:
 8006d06:	4770      	bx	lr

08006d08 <__retarget_lock_acquire_recursive>:
 8006d08:	4770      	bx	lr

08006d0a <__retarget_lock_release_recursive>:
 8006d0a:	4770      	bx	lr

08006d0c <__swhatbuf_r>:
 8006d0c:	b570      	push	{r4, r5, r6, lr}
 8006d0e:	460e      	mov	r6, r1
 8006d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d14:	4614      	mov	r4, r2
 8006d16:	2900      	cmp	r1, #0
 8006d18:	461d      	mov	r5, r3
 8006d1a:	b096      	sub	sp, #88	; 0x58
 8006d1c:	da08      	bge.n	8006d30 <__swhatbuf_r+0x24>
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d24:	602a      	str	r2, [r5, #0]
 8006d26:	061a      	lsls	r2, r3, #24
 8006d28:	d410      	bmi.n	8006d4c <__swhatbuf_r+0x40>
 8006d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d2e:	e00e      	b.n	8006d4e <__swhatbuf_r+0x42>
 8006d30:	466a      	mov	r2, sp
 8006d32:	f000 f903 	bl	8006f3c <_fstat_r>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	dbf1      	blt.n	8006d1e <__swhatbuf_r+0x12>
 8006d3a:	9a01      	ldr	r2, [sp, #4]
 8006d3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d44:	425a      	negs	r2, r3
 8006d46:	415a      	adcs	r2, r3
 8006d48:	602a      	str	r2, [r5, #0]
 8006d4a:	e7ee      	b.n	8006d2a <__swhatbuf_r+0x1e>
 8006d4c:	2340      	movs	r3, #64	; 0x40
 8006d4e:	2000      	movs	r0, #0
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	b016      	add	sp, #88	; 0x58
 8006d54:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d58 <__smakebuf_r>:
 8006d58:	898b      	ldrh	r3, [r1, #12]
 8006d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d5c:	079d      	lsls	r5, r3, #30
 8006d5e:	4606      	mov	r6, r0
 8006d60:	460c      	mov	r4, r1
 8006d62:	d507      	bpl.n	8006d74 <__smakebuf_r+0x1c>
 8006d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d68:	6023      	str	r3, [r4, #0]
 8006d6a:	6123      	str	r3, [r4, #16]
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	6163      	str	r3, [r4, #20]
 8006d70:	b002      	add	sp, #8
 8006d72:	bd70      	pop	{r4, r5, r6, pc}
 8006d74:	466a      	mov	r2, sp
 8006d76:	ab01      	add	r3, sp, #4
 8006d78:	f7ff ffc8 	bl	8006d0c <__swhatbuf_r>
 8006d7c:	9900      	ldr	r1, [sp, #0]
 8006d7e:	4605      	mov	r5, r0
 8006d80:	4630      	mov	r0, r6
 8006d82:	f7ff f983 	bl	800608c <_malloc_r>
 8006d86:	b948      	cbnz	r0, 8006d9c <__smakebuf_r+0x44>
 8006d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d8c:	059a      	lsls	r2, r3, #22
 8006d8e:	d4ef      	bmi.n	8006d70 <__smakebuf_r+0x18>
 8006d90:	f023 0303 	bic.w	r3, r3, #3
 8006d94:	f043 0302 	orr.w	r3, r3, #2
 8006d98:	81a3      	strh	r3, [r4, #12]
 8006d9a:	e7e3      	b.n	8006d64 <__smakebuf_r+0xc>
 8006d9c:	4b0d      	ldr	r3, [pc, #52]	; (8006dd4 <__smakebuf_r+0x7c>)
 8006d9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006da0:	89a3      	ldrh	r3, [r4, #12]
 8006da2:	6020      	str	r0, [r4, #0]
 8006da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da8:	81a3      	strh	r3, [r4, #12]
 8006daa:	9b00      	ldr	r3, [sp, #0]
 8006dac:	6120      	str	r0, [r4, #16]
 8006dae:	6163      	str	r3, [r4, #20]
 8006db0:	9b01      	ldr	r3, [sp, #4]
 8006db2:	b15b      	cbz	r3, 8006dcc <__smakebuf_r+0x74>
 8006db4:	4630      	mov	r0, r6
 8006db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dba:	f000 f8d1 	bl	8006f60 <_isatty_r>
 8006dbe:	b128      	cbz	r0, 8006dcc <__smakebuf_r+0x74>
 8006dc0:	89a3      	ldrh	r3, [r4, #12]
 8006dc2:	f023 0303 	bic.w	r3, r3, #3
 8006dc6:	f043 0301 	orr.w	r3, r3, #1
 8006dca:	81a3      	strh	r3, [r4, #12]
 8006dcc:	89a0      	ldrh	r0, [r4, #12]
 8006dce:	4305      	orrs	r5, r0
 8006dd0:	81a5      	strh	r5, [r4, #12]
 8006dd2:	e7cd      	b.n	8006d70 <__smakebuf_r+0x18>
 8006dd4:	08006b65 	.word	0x08006b65

08006dd8 <_malloc_usable_size_r>:
 8006dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ddc:	1f18      	subs	r0, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	bfbc      	itt	lt
 8006de2:	580b      	ldrlt	r3, [r1, r0]
 8006de4:	18c0      	addlt	r0, r0, r3
 8006de6:	4770      	bx	lr

08006de8 <_raise_r>:
 8006de8:	291f      	cmp	r1, #31
 8006dea:	b538      	push	{r3, r4, r5, lr}
 8006dec:	4604      	mov	r4, r0
 8006dee:	460d      	mov	r5, r1
 8006df0:	d904      	bls.n	8006dfc <_raise_r+0x14>
 8006df2:	2316      	movs	r3, #22
 8006df4:	6003      	str	r3, [r0, #0]
 8006df6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006dfe:	b112      	cbz	r2, 8006e06 <_raise_r+0x1e>
 8006e00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e04:	b94b      	cbnz	r3, 8006e1a <_raise_r+0x32>
 8006e06:	4620      	mov	r0, r4
 8006e08:	f000 f830 	bl	8006e6c <_getpid_r>
 8006e0c:	462a      	mov	r2, r5
 8006e0e:	4601      	mov	r1, r0
 8006e10:	4620      	mov	r0, r4
 8006e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e16:	f000 b817 	b.w	8006e48 <_kill_r>
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d00a      	beq.n	8006e34 <_raise_r+0x4c>
 8006e1e:	1c59      	adds	r1, r3, #1
 8006e20:	d103      	bne.n	8006e2a <_raise_r+0x42>
 8006e22:	2316      	movs	r3, #22
 8006e24:	6003      	str	r3, [r0, #0]
 8006e26:	2001      	movs	r0, #1
 8006e28:	e7e7      	b.n	8006dfa <_raise_r+0x12>
 8006e2a:	2400      	movs	r4, #0
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e32:	4798      	blx	r3
 8006e34:	2000      	movs	r0, #0
 8006e36:	e7e0      	b.n	8006dfa <_raise_r+0x12>

08006e38 <raise>:
 8006e38:	4b02      	ldr	r3, [pc, #8]	; (8006e44 <raise+0xc>)
 8006e3a:	4601      	mov	r1, r0
 8006e3c:	6818      	ldr	r0, [r3, #0]
 8006e3e:	f7ff bfd3 	b.w	8006de8 <_raise_r>
 8006e42:	bf00      	nop
 8006e44:	2000001c 	.word	0x2000001c

08006e48 <_kill_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	4d06      	ldr	r5, [pc, #24]	; (8006e68 <_kill_r+0x20>)
 8006e4e:	4604      	mov	r4, r0
 8006e50:	4608      	mov	r0, r1
 8006e52:	4611      	mov	r1, r2
 8006e54:	602b      	str	r3, [r5, #0]
 8006e56:	f7fb f80e 	bl	8001e76 <_kill>
 8006e5a:	1c43      	adds	r3, r0, #1
 8006e5c:	d102      	bne.n	8006e64 <_kill_r+0x1c>
 8006e5e:	682b      	ldr	r3, [r5, #0]
 8006e60:	b103      	cbz	r3, 8006e64 <_kill_r+0x1c>
 8006e62:	6023      	str	r3, [r4, #0]
 8006e64:	bd38      	pop	{r3, r4, r5, pc}
 8006e66:	bf00      	nop
 8006e68:	20000784 	.word	0x20000784

08006e6c <_getpid_r>:
 8006e6c:	f7fa bffc 	b.w	8001e68 <_getpid>

08006e70 <__sread>:
 8006e70:	b510      	push	{r4, lr}
 8006e72:	460c      	mov	r4, r1
 8006e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e78:	f000 f894 	bl	8006fa4 <_read_r>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	bfab      	itete	ge
 8006e80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e82:	89a3      	ldrhlt	r3, [r4, #12]
 8006e84:	181b      	addge	r3, r3, r0
 8006e86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e8a:	bfac      	ite	ge
 8006e8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e8e:	81a3      	strhlt	r3, [r4, #12]
 8006e90:	bd10      	pop	{r4, pc}

08006e92 <__swrite>:
 8006e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e96:	461f      	mov	r7, r3
 8006e98:	898b      	ldrh	r3, [r1, #12]
 8006e9a:	4605      	mov	r5, r0
 8006e9c:	05db      	lsls	r3, r3, #23
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	4616      	mov	r6, r2
 8006ea2:	d505      	bpl.n	8006eb0 <__swrite+0x1e>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eac:	f000 f868 	bl	8006f80 <_lseek_r>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	4632      	mov	r2, r6
 8006eb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eb8:	81a3      	strh	r3, [r4, #12]
 8006eba:	4628      	mov	r0, r5
 8006ebc:	463b      	mov	r3, r7
 8006ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec6:	f000 b817 	b.w	8006ef8 <_write_r>

08006eca <__sseek>:
 8006eca:	b510      	push	{r4, lr}
 8006ecc:	460c      	mov	r4, r1
 8006ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed2:	f000 f855 	bl	8006f80 <_lseek_r>
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	bf15      	itete	ne
 8006edc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ede:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ee2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ee6:	81a3      	strheq	r3, [r4, #12]
 8006ee8:	bf18      	it	ne
 8006eea:	81a3      	strhne	r3, [r4, #12]
 8006eec:	bd10      	pop	{r4, pc}

08006eee <__sclose>:
 8006eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef2:	f000 b813 	b.w	8006f1c <_close_r>
	...

08006ef8 <_write_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4604      	mov	r4, r0
 8006efc:	4608      	mov	r0, r1
 8006efe:	4611      	mov	r1, r2
 8006f00:	2200      	movs	r2, #0
 8006f02:	4d05      	ldr	r5, [pc, #20]	; (8006f18 <_write_r+0x20>)
 8006f04:	602a      	str	r2, [r5, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	f7fa ffec 	bl	8001ee4 <_write>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d102      	bne.n	8006f16 <_write_r+0x1e>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	b103      	cbz	r3, 8006f16 <_write_r+0x1e>
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	20000784 	.word	0x20000784

08006f1c <_close_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	2300      	movs	r3, #0
 8006f20:	4d05      	ldr	r5, [pc, #20]	; (8006f38 <_close_r+0x1c>)
 8006f22:	4604      	mov	r4, r0
 8006f24:	4608      	mov	r0, r1
 8006f26:	602b      	str	r3, [r5, #0]
 8006f28:	f7fa fff8 	bl	8001f1c <_close>
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	d102      	bne.n	8006f36 <_close_r+0x1a>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	b103      	cbz	r3, 8006f36 <_close_r+0x1a>
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	bd38      	pop	{r3, r4, r5, pc}
 8006f38:	20000784 	.word	0x20000784

08006f3c <_fstat_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	2300      	movs	r3, #0
 8006f40:	4d06      	ldr	r5, [pc, #24]	; (8006f5c <_fstat_r+0x20>)
 8006f42:	4604      	mov	r4, r0
 8006f44:	4608      	mov	r0, r1
 8006f46:	4611      	mov	r1, r2
 8006f48:	602b      	str	r3, [r5, #0]
 8006f4a:	f7fa fff2 	bl	8001f32 <_fstat>
 8006f4e:	1c43      	adds	r3, r0, #1
 8006f50:	d102      	bne.n	8006f58 <_fstat_r+0x1c>
 8006f52:	682b      	ldr	r3, [r5, #0]
 8006f54:	b103      	cbz	r3, 8006f58 <_fstat_r+0x1c>
 8006f56:	6023      	str	r3, [r4, #0]
 8006f58:	bd38      	pop	{r3, r4, r5, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000784 	.word	0x20000784

08006f60 <_isatty_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	2300      	movs	r3, #0
 8006f64:	4d05      	ldr	r5, [pc, #20]	; (8006f7c <_isatty_r+0x1c>)
 8006f66:	4604      	mov	r4, r0
 8006f68:	4608      	mov	r0, r1
 8006f6a:	602b      	str	r3, [r5, #0]
 8006f6c:	f7fa fff0 	bl	8001f50 <_isatty>
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	d102      	bne.n	8006f7a <_isatty_r+0x1a>
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	b103      	cbz	r3, 8006f7a <_isatty_r+0x1a>
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	bd38      	pop	{r3, r4, r5, pc}
 8006f7c:	20000784 	.word	0x20000784

08006f80 <_lseek_r>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	4604      	mov	r4, r0
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	2200      	movs	r2, #0
 8006f8a:	4d05      	ldr	r5, [pc, #20]	; (8006fa0 <_lseek_r+0x20>)
 8006f8c:	602a      	str	r2, [r5, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f7fa ffe8 	bl	8001f64 <_lseek>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d102      	bne.n	8006f9e <_lseek_r+0x1e>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	b103      	cbz	r3, 8006f9e <_lseek_r+0x1e>
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	bd38      	pop	{r3, r4, r5, pc}
 8006fa0:	20000784 	.word	0x20000784

08006fa4 <_read_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	4608      	mov	r0, r1
 8006faa:	4611      	mov	r1, r2
 8006fac:	2200      	movs	r2, #0
 8006fae:	4d05      	ldr	r5, [pc, #20]	; (8006fc4 <_read_r+0x20>)
 8006fb0:	602a      	str	r2, [r5, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f7fa ff79 	bl	8001eaa <_read>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <_read_r+0x1e>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	b103      	cbz	r3, 8006fc2 <_read_r+0x1e>
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	20000784 	.word	0x20000784

08006fc8 <_init>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	bf00      	nop
 8006fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fce:	bc08      	pop	{r3}
 8006fd0:	469e      	mov	lr, r3
 8006fd2:	4770      	bx	lr

08006fd4 <_fini>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	bf00      	nop
 8006fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fda:	bc08      	pop	{r3}
 8006fdc:	469e      	mov	lr, r3
 8006fde:	4770      	bx	lr
